<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lossingdawn.top/"/>
  <updated>2019-05-24T15:23:02.790Z</updated>
  <id>https://lossingdawn.top/</id>
  
  <author>
    <name>Ruffianjiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CentOS 7.3 安装Python3</title>
    <link href="https://lossingdawn.top/p/cn/12168.html"/>
    <id>https://lossingdawn.top/p/cn/12168.html</id>
    <published>2019-05-21T06:19:00.000Z</published>
    <updated>2019-05-24T15:23:02.790Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 1、排查 CentOS 7.3 默认安装的是python2，使用命令 python V 可以看到 python 的版本 然后使用命令 which python 查看一下Python可执行文件的位置 可见执行文件在 /usr/bin/ 目录下，切换到该目录下执行 ll python 命令查看 可见 p阅读全文</p><a id="more"></a><h3 id="1-排查"><a class="markdownIt-Anchor" href="#1-排查"></a> 1、排查</h3><p>CentOS 7.3 默认安装的是python2，使用命令 python -V 可以看到 python 的版本</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Python</span> 2<span class="selector-class">.7</span><span class="selector-class">.5</span></span><br></pre></td></tr></table></figure><p>然后使用命令 which python 查看一下Python可执行文件的位置<br><img src="https://img2018.cnblogs.com/blog/670989/201905/670989-20190521164747683-835556990.png" alt=""></p><p>可见执行文件在 /usr/bin/ 目录下，切换到该目录下执行 ll python/* 命令查看 <br><img src="https://img2018.cnblogs.com/blog/670989/201905/670989-20190521164804189-1266289982.png" alt=""></p><p>可见 python 和 python2 都指向了 python2.7，因此执行 python 程序可用 python 和 python2。</p><p>我们在 yum 仓库搜索 python 相关的包，发现没有 python3 相关的</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="built_in">search</span> <span class="keyword">python</span></span><br><span class="line">yum <span class="built_in">search</span> <span class="keyword">python3</span></span><br></pre></td></tr></table></figure><p>因此，我们使用编译的形式安装 python3，并使用软链在 /usr/bin/ 下建立 python3 。</p><h3 id="2-安装"><a class="markdownIt-Anchor" href="#2-安装"></a> 2、安装</h3><p>没有 python 的可用 yum install python 来安装</p><p>安装相关依赖</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install </span>zlib-devel <span class="keyword">bzip2-devel </span>openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make</span><br></pre></td></tr></table></figure><p>下载 python3 的包，在任意目录。没有wget的，yum安装一下，再下载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>www.python.org<span class="regexp">/ftp/</span>python<span class="regexp">/3.6.2/</span>Python-<span class="number">3.6</span>.<span class="number">2</span>.tar.xz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-xvJf</span>  <span class="selector-tag">Python-3</span><span class="selector-class">.6</span><span class="selector-class">.2</span><span class="selector-class">.tar</span><span class="selector-class">.xz</span></span><br></pre></td></tr></table></figure><p>切换进入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cd</span> <span class="selector-tag">Python-3</span><span class="selector-class">.6</span><span class="selector-class">.2</span></span><br></pre></td></tr></table></figure><p>编译安装</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure prefix=/usr/<span class="keyword">local</span>/python3</span><br><span class="line"><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install</span><br></pre></td></tr></table></figure><p>安装完毕，/usr/local/ 目录下就会有 python3了<br><img src="https://img2018.cnblogs.com/blog/670989/201905/670989-20190521164824241-932419417.png" alt=""><br>因此我们可以添加软链到执行目录下/usr/bin</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s <span class="regexp">/usr/</span>local<span class="regexp">/python3/</span>bin<span class="regexp">/python3 /u</span>sr<span class="regexp">/bin/</span>python3</span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/670989/201905/670989-20190521164837050-1742035920.png" alt=""></p><p>查看 python 的版本</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> -V</span><br><span class="line">python2 -V</span><br><span class="line"><span class="keyword">python3</span> -V</span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/670989/201905/670989-20190521164852467-160857733.png" alt=""></p><p>需要 python 即是 python3 的，可以参考最后的参考链接。建软链不同，和需要修改 yum 的配置（不建议去修改 python 的默认版本，建议用 python3 来代替，因为有些软件默认是 python2 的，可能会引起意外的事故）</p><p>参考：<br><a href="https://www.cnblogs.com/JahanGu/p/7452527.html" target="_blank" rel="noopener">https://www.cnblogs.com/JahanGu/p/7452527.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 1、排查 CentOS 7.3 默认安装的是python2，使用命令 python V 可以看到 python 的版本 然后使用命令 which python 查看一下Python可执行文件的位置 可见执行文件在 /usr/bin/ 目录下，切换到该目录下执行 ll python 命令查看 可见 p阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://lossingdawn.top/categories/linux/"/>
    
    
      <category term="linux" scheme="https://lossingdawn.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>找到Linux中当前java的安装位置</title>
    <link href="https://lossingdawn.top/p/cn/58622.html"/>
    <id>https://lossingdawn.top/p/cn/58622.html</id>
    <published>2019-05-13T05:49:00.000Z</published>
    <updated>2019-05-24T15:23:02.837Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 先看java version 然后： 不一定有，如果没有，那就要找一下 先 再找到/usr/bin/java的超链接位置发现还是超链接 再来一次，发现最终位置 最后的这个jdk位置就是目前用的java的jdk位置 在.bashrc里面 加上一句 export JAVA_HOME=你的java安装路径阅读全文</p><a id="more"></a><p>先看java -version</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$java</span> version <span class="string">"1.8.0_111"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_111-b14)</span><br><span class="line">Java HotSpot(TM) 64-Bit<span class="built_in"> Server </span>VM (build 25.111-b14, mixed mode)</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure><p>不一定有，如果没有，那就要找一下 先</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">which</span> java</span></span><br><span class="line">/usr/bin/java</span><br></pre></td></tr></table></figure><p>再找到/usr/bin/java的超链接位置发现还是超链接</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ls -lrt <span class="regexp">/usr/</span>bin/java</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">22</span> Jul <span class="number">27</span> <span class="number">11</span>:<span class="number">43</span> <span class="regexp">/usr/</span>bin<span class="regexp">/java -&gt; /</span>etc<span class="regexp">/alternatives/</span>java</span><br></pre></td></tr></table></figure><p>再来一次，发现最终位置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ls -lrt <span class="regexp">/etc/</span>alternatives/java</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">35</span> Jul <span class="number">27</span> <span class="number">11</span>:<span class="number">43</span> <span class="regexp">/etc/</span>alternatives<span class="regexp">/java -&gt; /</span>usr<span class="regexp">/java/</span>jdk1<span class="number">.8</span><span class="number">.0</span>_111<span class="regexp">/jre/</span>bin/java</span><br></pre></td></tr></table></figure><p>最后的这个jdk位置就是目前用的java的jdk位置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>java<span class="regexp">/jdk1.8.0_111/</span>（这个是我的，你用你自己的）</span><br></pre></td></tr></table></figure><p>在.bashrc里面<br>加上一句<br>export JAVA_HOME=你的java安装路径</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 先看java version 然后： 不一定有，如果没有，那就要找一下 先 再找到/usr/bin/java的超链接位置发现还是超链接 再来一次，发现最终位置 最后的这个jdk位置就是目前用的java的jdk位置 在.bashrc里面 加上一句 export JAVA_HOME=你的java安装路径阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://lossingdawn.top/categories/linux/"/>
    
    
      <category term="linux" scheme="https://lossingdawn.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Poi解析excel文件报错</title>
    <link href="https://lossingdawn.top/p/cn/63371.html"/>
    <id>https://lossingdawn.top/p/cn/63371.html</id>
    <published>2019-04-03T08:05:00.000Z</published>
    <updated>2019-05-24T15:23:02.821Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: getFileMagic() only operates on streams which support mark(int) 使用 bis 解决 找不到类，一般是版本问题，可以把版本调整一致，3.15 java.lang.reflect.InvocationTargetException org.阅读全文</p><a id="more"></a><p>getFileMagic() only operates on streams which support mark(int)</p><p>使用 bis 解决</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BufferedInputStream bis = <span class="keyword">new</span> <span class="type">BufferedInputStream</span>(<span class="keyword">new</span> <span class="type">FileInputStream</span>(<span class="keyword">new</span> <span class="type">File</span>(path)));</span><br><span class="line">        XSSFWorkbook xssfWorkbook = <span class="keyword">new</span> <span class="type">XSSFWorkbook</span>(bis);</span><br></pre></td></tr></table></figure><p>找不到类，一般是版本问题，可以把版本调整一致，3.15<br>java.lang.reflect.InvocationTargetException<br>org.apache.poi.POIXMLException: java.lang.reflect.InvocationTargetException</p><p>Java.lang.NoClassDefFoundError :org/openxmlformats/schemas/spreadsheetml/x2006/main/ctextensionlist</p><p>pom配置，版本保持一致，3.15</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-scratchpad<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml-schemas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: getFileMagic() only operates on streams which support mark(int) 使用 bis 解决 找不到类，一般是版本问题，可以把版本调整一致，3.15 java.lang.reflect.InvocationTargetException org.阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lossingdawn.top/categories/java/"/>
    
    
      <category term="java, poi" scheme="https://lossingdawn.top/tags/java-poi/"/>
    
  </entry>
  
  <entry>
    <title>理解 Spring 定时任务的 fixedRate 和 fixedDelay 的区别</title>
    <link href="https://lossingdawn.top/p/cn/50457.html"/>
    <id>https://lossingdawn.top/p/cn/50457.html</id>
    <published>2019-01-24T05:32:00.000Z</published>
    <updated>2019-05-24T15:23:02.839Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 用过 Spring 的 @EnableScheduling 的都知道，有三种方式，即 @Scheduled 注解的 fixedRate(fixedRateString), fixedDelay(fixedDelayString), 以及 cron 这里讨论 fixedRate 和 fixedDela阅读全文</p><a id="more"></a><p>用过 Spring 的 @EnableScheduling 的都知道，有三种方式，即 @Scheduled 注解的 fixedRate(fixedRateString), fixedDelay(fixedDelayString), 以及 cron<br>这里讨论 fixedRate 和 fixedDelay 参数</p><p>fixedRate 是有一个时刻表的概念，在任务启动时，T1、T2、T3就已经排好了执行的时刻，比如1分、2分、3分，当T1的执行时间大于1分钟时，就会造成T2晚点，当T1执行完时T2立即执行，</p><p>fixedDelay 比较简单，表示上个任务结束，到下个任务开始的时间间隔。无论任务执行花费多少时间，两个任务间的间隔始终是一致的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 用过 Spring 的 @EnableScheduling 的都知道，有三种方式，即 @Scheduled 注解的 fixedRate(fixedRateString), fixedDelay(fixedDelayString), 以及 cron 这里讨论 fixedRate 和 fixedDela阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lossingdawn.top/categories/java/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
      <category term="spring" scheme="https://lossingdawn.top/tags/spring/"/>
    
      <category term="Scheduled" scheme="https://lossingdawn.top/tags/Scheduled/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题库(长期)</title>
    <link href="https://lossingdawn.top/p/cn/12531.html"/>
    <id>https://lossingdawn.top/p/cn/12531.html</id>
    <published>2018-11-30T01:37:00.000Z</published>
    <updated>2019-05-24T15:23:02.816Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 本文内容来自互联网各种面试实例，以及自己的面试经历，主要是中级开发的面试题 初中级java面试主要分为几个部分： 0、序 1、 “java基础” 2、 “java多线程” 3、 “jvm知识” 4、 “spring等框架知识” 5、 “常用实践，如session同步” 6、 &quot;其他知识，例如tomc阅读全文</p><a id="more"></a><p>本文内容来自互联网各种面试实例，以及自己的面试经历，主要是中级开发的面试题</p><p>初中级java面试主要分为几个部分：</p><p>0、序<br>1、<a href="">java基础</a><br>2、 <a href="">java多线程</a><br>3、 <a href="">jvm知识</a><br>4、 <a href="">spring等框架知识</a><br>5、 <a href="">常用实践，如session同步</a><br>6、 <a href="">其他知识，例如tomcat</a><br>7、 <a href="">笔试算法</a></p><h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>首先，外貌要干净整洁，这个是必须的。其次守时，既不能晚点也不能早到，最好在约定时间的前十分钟<br>面试主要分为几个部分，首先是java基础，这类占比</p><p>较少<br>；其次是对java及spring框架的的深入理解，如多线程，ioc，apo，spring bean的生命周期，这类占比</p><p>较重<br>；再往后就是常用的工具的理解，如jvm的常用配置，年轻代老年代，gc，tomcat等容器怎么处理请求，这类问题占比</p><p>适中<br>；最后就是一些广度的问题(实际的经验)，对自己项目的理解，用到了那些工具，遇到了哪些问题,解决的方法<br>最后，一定要做一些面试的准备，刷面试题、练习面试，建议至少提前一个月做准备，机会是留给有准备的人的</p><h2 id="1-java基础"><a class="markdownIt-Anchor" href="#1-java基础"></a> 1、java基础</h2><p><strong>1.1、List、Set、Map的异同</strong><br><strong>List(列表)</strong></p><p>List<br>的元素以线性方式存储，可以存放重复对象，List主要有以下两个实现类：</p><dl><dt>ArrayList</dt><dd>长度可变的数组，可以对元素进行随机的访问，向ArrayList中插入与删除元素的速度慢。 JDK8 中ArrayList扩容的实现是通过grow()方法里使用语句newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1)（即1.5倍扩容）计算容量，然后调用Arrays.copyof()方法进行对原数组进行复制。</dd><dt>LinkedList</dt><dd>采用链表数据结构，插入和删除速度快，但访问速度慢。</dd></dl><p><strong>Set(集合)</strong></p><p>Set<br>中的对象不按特定(HashCode)的方式排序，并且没有重复对象，Set主要有以下两个实现类：</p><p>HashSet<br>： HashSet按照哈希算法来存取集合中的对象，存取速度比较快。当HashSet中的元素个数超过数组大小/*loadFactor（默认值为0.75）时，就会进行近似两倍扩容（newCapacity = (oldCapacity &lt;&lt; 1) + 1）。</p><p>TreeSet<br>：TreeSet实现了SortedSet接口，能够对集合中的对象进行排序。</p><p><strong>Map(映射)</strong></p><p>Map<br>是一种把键对象和值对象映射的集合，它的每一个元素都包含一个键对象和值对象。 Map主要有以下两个实现类：</p><p>HashMap<br>：HashMap基于散列表实现，其插入和查询&lt;K,V&gt;的开销是固定的，可以通过构造器设置容量和负载因子来调整容器的性能。<br>LinkedHashMap：类似于HashMap，但是迭代遍历它时，取得&lt;K,V&gt;的顺序是其插入次序，或者是最近最少使用(LRU)的次序。</p><p>TreeMap<br>：TreeMap基于红黑树实现。查看&lt;K,V&gt;时，它们会被排序。TreeMap是唯一的带有subMap()方法的Map，subMap()可以返回一个子树。<br>比较 List Set Map 继承接口 Collection Collection 常见实现类 AbstractList(其常用子类有ArrayList、LinkedList、Vector) AbstractSet(其常用子类有HashSet、LinkedHashSet、TreeSet) HashMap、HashTable 常见方法 add( )、remove( )、clear( )、get( )、contains( )、size( ) add( )、remove( )、clear( )、contains( )、size( ) put( )、get()、remove( )、clear( )、containsKey( )、containsValue( )、keySet( )、values( )、size( ) 元素 可重复 不可重复(用<br>equals()判断) 不可重复 顺序 有序 无序(实际上由HashCode决定) 线程安全 Vector线程安全 Hashtable线程安全</p><p><strong>1.2、String、StringBuffer、StringBuilder的使用</strong></p><p><strong>1.3、HashMap、TreeMap、LinkedHashMap的特点</strong></p><p><strong>1.4、HashMap内部结构、算法</strong><br><strong>底层实现</strong>：HashMap底层整体结构是一个数组，数组中的每个元素又是一个链表。每次添加一个对象（put）时会产生一个链表对象（Object类型），Map中的每个Entry就是数组中的一个元素（Map.Entry就是一个&lt;Key,Value&gt;），它具有由当前元素指向下一个元素的引用，这就构成了链表。<br><strong>存储原理</strong>：当向HsahMap中添加元素的时候，先根据HashCode重新计算Key的Hash值，得到数组下标，如果数组该位置已经存在其他元素，那么这个位置的元素将会以链表的形式存放，新加入的放在链头，最先加入的放在链尾，如果数组该位置元素不存在，那么就直接将该元素放到此数组中的该位置。<br><strong>去重原理</strong>：不同的Key算到数组下标相同的几率很小，新建一个&lt;K,V&gt;放入到HashMap的时候，首先会计算Key的数组下标，如果数组该位置已经存在其他元素，则比较两个Key，若相同则覆盖写入，若不同则形成链表。<br><strong>读取原理</strong>：从HashMap中读取（get）元素时，首先计算Key的HashCode，找到数组下标，然后在对应位置的链表中找到需要的元素。<br><strong>扩容机制</strong>：当HashMap中的元素个数超过数组大小/*loadFactor（默认值为0.75）时，就会进行2倍扩容（oldThr &lt;&lt; 1）。</p><p><strong>1.5、concurrent包下面有那几大类</strong><br>atomic<br>locks<br>Executor<br>Queue<br>Dueue<br>ConcurrentXX<br>Scheduled<br>Callable<br>Future</p><h2 id="2-java多线程"><a class="markdownIt-Anchor" href="#2-java多线程"></a> 2、java多线程</h2><p><strong>2.1、lock和synchronized</strong></p><p>synchronized是java中的一个关键字，也就是说是Java语言内置的特性。那么为什么会出现Lock呢？</p><p>在上面一篇文章中，我们了解到如果一个代码块被synchronized修饰了，当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待，等待获取锁的线程释放锁，而这里获取锁的线程释放锁只会有两种情况：</p><p>1）获取锁的线程执行完了该代码块，然后线程释放对锁的占有；</p><p>2）线程执行发生异常，此时JVM会让线程自动释放锁。</p><p>那么如果这个获取锁的线程由于要等待IO或者其他原因（比如调用sleep方法）被阻塞了，但是又没有释放锁，其他线程便只能干巴巴地等待，试想一下，这多么影响程序执行效率。</p><p>因此就需要有一种机制可以不让等待的线程一直无期限地等待下去（比如只等待一定的时间或者能够响应中断），通过Lock就可以办到。</p><p>再举个例子：当有多个线程读写文件时，读操作和写操作会发生冲突现象，写操作和写操作会发生冲突现象，但是读操作和读操作不会发生冲突现象。</p><p>但是采用synchronized关键字来实现同步的话，就会导致一个问题：</p><p>如果多个线程都只是进行读操作，所以当一个线程在进行读操作时，其他线程只能等待无法进行读操作。</p><p>因此就需要一种机制来使得多个线程都只是进行读操作时，线程之间不会发生冲突，通过Lock就可以办到。</p><p>另外，通过Lock可以知道线程有没有成功获取到锁。这个是synchronized无法办到的。</p><p>总结一下，也就是说Lock提供了比synchronized更多的功能。但是要注意以下几点：</p><p>1）Lock不是Java语言内置的，synchronized是Java语言的关键字，因此是内置特性。Lock是一个类，通过这个类可以实现同步访问；</p><p>2）Lock和synchronized有一点非常大的不同，采用synchronized不需要用户去手动释放锁，当synchronized方法或者synchronized代码块执行完之后，系统会自动让线程释放对锁的占用；而Lock则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象。</p><p>Lock是一个接口，而synchronized是关键字。<br>synchronized会自动释放锁，而Lock必须手动释放锁。<br>Lock可以让等待锁的线程响应中断，而synchronized不会，线程会一直等待下去。<br>通过Lock可以知道线程有没有拿到锁，而synchronized不能。<br>Lock能提高多个线程读操作的效率。</p><p>synchronized能锁住类、方法和代码块，而Lock是块范围内的</p><p>第一大不足：由于我们没办法设置synchronized关键字在获取锁的时候等待时间，所以synchronized可能会导致线程为了加锁而无限期地处于阻塞状态。</p><p>第二大不足：使用synchronized关键字等同于使用了互斥锁，即其他线程都无法获得锁对象的访问权。这种策略对于读多写少的应用而言是很不利的，因为即使多个读者看似可以并发运行，但他们实际上还是串行的，并将最终导致并发性能的下降。</p><p>虽然synchronized已经作为一个关键字被固化在Java语言中了，但它只提供了一种相当保守的线程安全策略，且该策略开放给程序员的控制能力极弱。</p><p><strong>2.2、单机上一个线程池正在处理服务，如果忽然断电了怎么办（正在处理和阻塞队列里的请求怎么处理）？</strong></p><p><strong>2.3、为什么要使用线程池？</strong></p><p>在Java中，如果每当一个请求到达就创建一个新线程，开销是相当大的。在实际使用中，每个请求创建新线程的服务器在创建和销毁线程上花费的时间和消耗的系统资源，甚至可能要比花在处理实际的用户请求的时间和资源要多得多。除了创建和销毁线程的开销之外，活动的线程也需要消耗系统资源。如果在一个JVM里创建太多的线程，可能会导致系统由于过度消耗内存或“切换过度”而导致系统资源不足。为了防止资源不足，服务器应用程序需要一些办法来限制任何给定时刻处理的请求数目，尽可能减少创建和销毁线程的次数，特别是一些资源耗费比较大的线程的创建和销毁，尽量利用已有对象来进行服务，这就是“池化资源”技术产生的原因。</p><p><strong>2.4、线程池有什么作用？</strong></p><p>线程池主要用来解决线程生命周期开销问题和资源不足问题。通过对多个任务重用线程，线程创建的开销就被分摊到了多个任务上了，而且由于在请求到达时线程已经存在，所以消除了线程创建所带来的延迟。这样，就可以立即为请求服务，使应用程序响应更快。另外，通过适当地调整线程池中的线程数目可以防止出现资源不足的情况。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.使用<span class="keyword">new</span> <span class="keyword">Thread</span>()创建线程的弊端：  </span><br><span class="line">每次通过<span class="keyword">new</span> <span class="keyword">Thread</span>()创建对象性能不佳。  </span><br><span class="line">线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或oom。  </span><br><span class="line">缺乏更多功能，如定时执行、定期执行、线程中断。  </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.使用Java线程池的好处：</span><br><span class="line">重用存在的线程，减少对象创建、消亡的开销，提升性能。  </span><br><span class="line">可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。  </span><br><span class="line">提供定时执行、定期执行、单线程、并发数控制等功能。</span><br></pre></td></tr></table></figure><p><strong>2.5、说说几种常见的线程池及使用场景。</strong><br>场景：<br>单个任务处理时间短<br>将需处理的任务数量大</p><p><strong>2.6、线程池都有哪几种工作队列？</strong><br>ArrayBlockingQueue 数组型阻塞队列<br>LinkedBlockingQueue 链表型阻塞队列<br>DelayQueue 延时队列<br>SynchronousQueue 同步队列<br>PriorityBlockingQueue 优先阻塞队列</p><p><strong>2.7、怎么理解无界队列和有界队列？</strong><br>有界队列：<br>1.初始的poolSize &lt; corePoolSize，提交的runnable任务，会直接做为new一个Thread的参数，立马执行 。</p><p>2.当提交的任务数超过了corePoolSize，会将当前的runable提交到一个block queue中,。</p><p>3.有界队列满了之后，如果poolSize &lt; maximumPoolsize时，会尝试new 一个Thread的进行救急处理，立马执行对应的runnable任务。</p><p>4.如果3中也无法处理了，就会走到第四步执行reject操作。</p><p>与有界队列相比，除非系统资源耗尽，否则无界的任务队列不存在任务入队失败的情况。当有新的任务到来，系统的线程数小于corePoolSize时，则新建线程执行任务。当达到corePoolSize后，就不会继续增加，若后续仍有新的任务加入，而没有空闲的线程资源，则任务直接进入队列等待。若任务创建和处理的速度差异很大，无界队列会保持快速增长，直到耗尽系统内存。</p><p><strong>2.8、线程池中的几种重要的参数及流程说明</strong></p><p>中止<br>：Abort策略，默认策略，新任务提交时直接抛出未检查的异常RejectedExecutionException，该异常可由调用者捕获。</p><p>抛弃<br>：Discard策略，新提交的任务被抛弃。</p><p>抛弃最旧的<br>：DiscardOldest策略，队列的是“队头”的任务，然后尝试提交新的任务。（不适合工作队列为优先队列场景）</p><p>调用者运行<br>： CallerRuns策略，为调节机制，既不抛弃任务也不抛出异常，而是将某些任务回退到调用者。不会在线程池的线程中执行新的任务，而是在调用exector的线程中运行新的任务。</p><p><strong>2.9、线程池中的几种重要的参数及流程说明</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize,</span><br><span class="line">                              <span class="keyword">int</span> maximumPoolSize,</span><br><span class="line">                              <span class="keyword">long</span> keepAliveTime,</span><br><span class="line">                              TimeUnit unit,</span><br><span class="line">                              BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                              ThreadFactory threadFactory,</span><br><span class="line">                              RejectedExecutionHandler <span class="keyword">handler</span>) &#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>corePoolSize</p><ul><li>池中所保存的线程数，包括空闲线程。需要注意的是在初创建线程池时线程不会立即启动，直到有任务提交才开始启动线程并逐渐时线程数目达到corePoolSize。若想一开始就创建所有核心线程需调用prestartAllCoreThreads方法。</li></ul><p>maximumPoolSize<br>-池中允许的最大线程数。需要注意的是当核心线程满且阻塞队列也满时才会判断当前线程数是否小于最大线程数，并决定是否创建新线程。</p><p>keepAliveTime</p><ul><li>当线程数大于核心时，多于的空闲线程最多存活时间</li></ul><p>unit</p><ul><li>keepAliveTime 参数的时间单位。</li></ul><p>workQueue</p><ul><li>当线程数目超过核心线程数时用于保存任务的队列。主要有3种类型的BlockingQueue可供选择：无界队列，有界队列和同步移交。将在下文中详细阐述。从参数中可以看到，此队列仅保存实现Runnable接口的任务。</li></ul><p>threadFactory</p><ul><li>执行程序创建新线程时使用的工厂。</li></ul><p>handler</p><ul><li>阻塞队列已满且线程数达到最大值时所采取的饱和策略。java默认提供了4种饱和策略的实现方式：中止、抛弃、抛弃最旧的、调用者运行。将在下文中详细阐述。</li></ul><p><strong>2.10、线程和cpu核心数的关系</strong></p><p>线程数=Ncpu / (1-阻塞系数)<br>IO密集型，阻塞系数接近于1<br>计算密集型，阻塞系数接近于0</p><h2 id="3-jvm知识"><a class="markdownIt-Anchor" href="#3-jvm知识"></a> 3、jvm知识</h2><p><strong>3.1、happened-before原则</strong></p><p>1.程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作</p><p>2.监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁</p><p>3.volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读</p><p>4.传递性：如果A happens-before B，且B happens-before C，那么A happens-before C</p><p>5.start规则：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的ThreadB.start()操作happens-before于线程B中的任意操作</p><p>6.join规则：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回</p><p><strong>3.2、类的加载</strong></p><p><img src="" alt="image"><br><a href="https://blog.csdn.net/wen7280/article/details/53856790" target="_blank" rel="noopener">https://blog.csdn.net/wen7280/article/details/53856790</a></p><p>类装载的条件：</p><p>Java虚拟机不会无条件的装载Class类型。</p><p>Java虚拟机规定：一个类或者接口在初次使用时，必须进行初始化。</p><p>这里的使用指的是主动使用，主动使用有以下几种情况：</p><p>当创建一个类的实例时，比如使用new关键字，或者通过反射、克隆、反序列化方式。</p><p>当调用类的静态方法时，即当使用了字节码invokestatic指令</p><p>当使用类或者接口的静态字段时（final常量除外，此种情况只会加载类而不会进行初始化），即使用getstatic或者putstatic指令（可以使用jclasslib软件查看生成的字节码文件）</p><p>当使用java.lang.reflect包中的方法反射类的方法时</p><p>当初始化子类时，必须先初始化父类</p><p>作为启动虚拟机、含有main方法的那个类</p><p>除了以上情况属于主动使用外，其他情况均属于被动使用，被动使用不会引起类的初始化，只是加载了类却没有初始化。</p><h2 id="4-spring等框架知识"><a class="markdownIt-Anchor" href="#4-spring等框架知识"></a> 4、spring等框架知识</h2><p><strong>4.1、spring mvc处理请求</strong></p><p><img src="" alt="image"></p><p>SpringMVC核心处理流程：</p><p>1、DispatcherServlet前端控制器接收发过来的请求，交给HandlerMapping处理器映射器</p><p>2、HandlerMapping处理器映射器，根据请求路径找到相应的HandlerAdapter处理器适配器（处理器适配器就是那些拦截器或Controller）</p><p>3、HandlerAdapter处理器适配器，处理一些功能请求，返回一个ModelAndView对象（包括模型数据、逻辑视图名）</p><p>4、ViewResolver视图解析器，先根据ModelAndView中设置的View解析具体视图</p><p>5、然后再将Model模型中的数据渲染到View上</p><p><strong>4.2、Springbootapplication注解的原理</strong></p><p><img src="" alt="image"></p><p><a href="http://majunwei.com/view/201708231840127244.html" target="_blank" rel="noopener">http://majunwei.com/view/201708231840127244.html</a></p><h2 id="5-常用实践session同步"><a class="markdownIt-Anchor" href="#5-常用实践session同步"></a> 5、常用实践,session同步</h2><p><strong>5.1、session同步</strong></p><p>使用redis作为session持久化存储。首先用户连接进来，把session放在本地一份，redis一份，在本地有记录的情况下使用本地缓存(设置极小的时间过期，如2s)。当用户再次连接进来，在本地记录过期，或者本地没有session的情况下，使用redis的记录，</p><p><strong>5.2、redis的简单介绍</strong></p><p><strong>5.3、缓存的使用</strong></p><h2 id="6-其他知识如tomcat"><a class="markdownIt-Anchor" href="#6-其他知识如tomcat"></a> 6、其他知识,如tomcat</h2><p><strong>6.1、tomcat如何处理请求</strong></p><p><img src="https://images2017.cnblogs.com/blog/1131840/201712/1131840-20171215142449996-360033997.jpg" alt="http://images2017.cnblogs.com/blog/1131840/201712/1131840-20171215142449996-360033997.jpg"><br>Tomcat的两个核心组件：Connector 和 Container</p><p><strong>1.Connector组件</strong></p><p>Connector组件将在某个指定的端口上侦听客户请求，接收浏览器发过来的tcp连接请求，创建一个Request和一个Response对象分别用于和其你去端交换数据，然后会产生一个线程来处理这个请求并把产生的Request和Response对象传给Engine，从Engine中获得响应并返回给客户端。</p><p>Tomcat有两个经典的Connector，一个直接侦听来自浏览器的HTTP请求，另外一个侦听来自其他的WebServer的请求。Cotote HTTP/1.1 Connector在端口8080处侦听来自客户浏览器的HTTP请求，Coyote JK2 Connector在端口8009处侦听其他WebServer的Servlet/JSP请求。 Connector 最重要的功能就是接收连接请求然后分配线程让 Container来处理这个请求，所以这必然是多线程的，多线程的处理是 Connector 设计的核心</p><p><strong>2.Container组件</strong></p><p>Container组件的体系结构如下：<br><img src="https://images2017.cnblogs.com/blog/1131840/201712/1131840-20171215142450871-601807957.jpg" alt="http://images2017.cnblogs.com/blog/1131840/201712/1131840-20171215142450871-601807957.jpg"></p><p>Container</p><p>Container是容器的父接口，该容器的设计用的是典型的责任链的设计模式，它由四个自容器组件构成，分别是Engine、Host、Context、Wrapper。这四个组件是负责关系，存在包含关系。通常一个Servlet class对应一个Wrapper，如果有多个Servlet则定义多个Wrapper，如果有多个Wrapper就要定义一个更高的Container，如Context。 Context定义在父容器 Host 中，其中Host 不是必须的，但是要运行 war 程序，就必须要 Host，因为 war 中必有 web.xml 文件，这个文件的解析就需要 Host 了，如果要有多个 Host 就要定义一个 top 容器 Engine 了。而 Engine 没有父容器了，一个 Engine 代表一个完整的 Servlet 引擎。</p><p>Engine</p><p>Engine 容器比较简单，它只定义了一些基本的关联关系 Host 容器</p><p>Host</p><p>Host 是 Engine 的字容器，一个 Host 在 Engine 中代表一个虚拟主机，这个虚拟主机的作用就是运行多个应用，它负责安装和展开这些应用，并且标识这个应用以便能够区分它们。它的子容器通常是 Context，它除了关联子容器外，还有就是保存一个主机应该有的信息。</p><p>Context</p><p>Context 代表 Servlet 的 Context，它具备了 Servlet 运行的基本环境，理论上只要有 Context 就能运行 Servlet 了。简单的 Tomcat 可以没有 Engine 和 Host。Context 最重要的功能就是管理它里面的 Servlet 实例，Servlet 实例在 Context 中是以 Wrapper 出现的，还有一点就是 Context 如何才能找到正确的 Servlet 来执行它呢？ Tomcat5 以前是通过一个 Mapper 类来管理的，Tomcat5 以后这个功能被移到了 request 中，在前面的时序图中就可以发现获取子容器都是通过 request 来分配的</p><p>Wrapper</p><p>Wrapper 代表一个 Servlet，它负责管理一个 Servlet，包括的 Servlet 的装载、初始化、执行以及资源回收。Wrapper 是最底层的容器，它没有子容器了，所以调用它的 addChild 将会报错。 Wrapper 的实现类是 StandardWrapper，StandardWrapper 还实现了拥有一个 Servlet 初始化信息的 ServletConfig，由此看出 StandardWrapper 将直接和 Servlet 的各种信息打交道。<br>说明：除了上述组件外，Tomcat中还有其他重要的组件，如安全组件security、logger日志组件、session、mbeans、naming等其他组件。这些组件共同为Connector和Container提供必要的服务。</p><p>完整请求过程如下：</p><p><img src="https://images2017.cnblogs.com/blog/1131840/201712/1131840-20171215142451699-1297214931.jpg" alt="http://images2017.cnblogs.com/blog/1131840/201712/1131840-20171215142451699-1297214931.jpg"></p><p>1.用户在浏览器中输入网址localhost:8080/test/index.jsp，请求被发送到本机端口8080，被在那里监听的Coyote HTTP/1.1 Connector获得；</p><p>2.Connector把该请求交给它所在的Service的Engine（Container）来处理，并等待Engine的回应；</p><p>3.Engine获得请求localhost/test/index.jsp，匹配所有的虚拟主机Host；</p><p>4.Engine匹配到名为localhost的Host（即使匹配不到也把请求交给该Host处理，因为该Host被定义为该Engine的默认主机），名为localhost的Host获得请求/test/index.jsp，匹配它所拥有的所有Context。Host匹配到路径为/test的Context（如果匹配不到就把该请求交给路径名为“ ”的Context去处理）；</p><p>5.path=“/test”的Context获得请求/index.jsp，在它的mapping table中寻找出对应的Servlet。Context匹配到URL Pattern为/*.jsp的Servlet，对应于JspServlet类；</p><p>6.构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用JspServlet的doGet()或doPost(),执行业务逻辑、数据存储等；</p><p>7.Context把执行完之后的HttpServletResponse对象返回给Host；</p><p>8.Host把HttpServletResponse对象返回给Engine；</p><p>9.Engine把HttpServletResponse对象返回Connector；</p><p>10.Connector把HttpServletResponse对象返回给客户Browser。</p><h2 id="7-笔试算法"><a class="markdownIt-Anchor" href="#7-笔试算法"></a> 7、笔试算法</h2><p><strong>7.1、</strong></p><p><strong>7.2、</strong></p><p><strong>7.3、</strong></p><p><strong>7.4、让您做一个电商平台，您如何设置一个在买家下订单后的”第60秒“发短信通知卖家发货，您需要考虑的是 像淘宝一样的大并发量的订单。</strong></p><p>1、具有排序功能的队列</p><p>2、Redis+定时器</p><p>3、队列，死信</p><p>参考地址：<a href="https://mp.weixin.qq.com/s/Dzv-i8n7waJVac-N7MJCvA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Dzv-i8n7waJVac-N7MJCvA</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 本文内容来自互联网各种面试实例，以及自己的面试经历，主要是中级开发的面试题 初中级java面试主要分为几个部分： 0、序 1、 “java基础” 2、 “java多线程” 3、 “jvm知识” 4、 “spring等框架知识” 5、 “常用实践，如session同步” 6、 &amp;quot;其他知识，例如tomc阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="面试" scheme="https://lossingdawn.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="java, 面试" scheme="https://lossingdawn.top/tags/java-%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>RSA Premaster Secret Error 错误解决</title>
    <link href="https://lossingdawn.top/p/cn/18860.html"/>
    <id>https://lossingdawn.top/p/cn/18860.html</id>
    <published>2018-09-13T06:57:00.000Z</published>
    <updated>2019-05-24T15:23:02.793Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 报错信息如下： Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: 驱动程序无法使用安全套接字层(SSL)加密与 SQL Server 建立安全连接。错误: RSA premaster secret error。 java连接sql阅读全文</p><a id="more"></a><p>报错信息如下：<br>Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: 驱动程序无法使用安全套接字层(SSL)加密与 SQL Server 建立安全连接。错误: RSA premaster secret error。</p><p>java连接sqlserver报RSA私钥错误，在网上查询了一番基本是这两个解决方案</p><p>1、调整jdk的引用<br>2、把sunjce_provider.jar放到\jre\lib\ext下</p><p>我的问题是由于jdk的问题，gradle编译自动吧jdk换成了JavaSE，换成本地的JDK1.8，问题解决</p><p><img src="https://images2018.cnblogs.com/blog/670989/201809/670989-20180913145221230-988186623.png" alt="参考图片"></p><p><strong>问题原因</strong><br>由于</p><p>gradle<br>插件编译的问题，自动调整为java SE版本，导致引用问题，maven编译后虽然也是java SE版本，但是没有问题<br>还是要少用gradle</p><p>参考：<br><a href="https://blog.csdn.net/huang9012/article/details/6629775" target="_blank" rel="noopener">https://blog.csdn.net/huang9012/article/details/6629775</a></p><p><a href="https://social.msdn.microsoft.com/Forums/sqlserver/zh-CN/031c5b4c-0871-4f12-a163-ce547035740c/error-connecting-to-mssql-via-jdbc-through-a-window-service?forum=sqldataaccess" target="_blank" rel="noopener">https://social.msdn.microsoft.com/Forums/sqlserver/zh-CN/031c5b4c-0871-4f12-a163-ce547035740c/error-connecting-to-mssql-via-jdbc-through-a-window-service?forum=sqldataaccess</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 报错信息如下： Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: 驱动程序无法使用安全套接字层(SSL)加密与 SQL Server 建立安全连接。错误: RSA premaster secret error。 java连接sql阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lossingdawn.top/categories/java/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>我的众安面试经历（题库）</title>
    <link href="https://lossingdawn.top/p/cn/35012.html"/>
    <id>https://lossingdawn.top/p/cn/35012.html</id>
    <published>2018-09-01T03:02:00.000Z</published>
    <updated>2019-05-24T15:23:02.836Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 摘要: 原创出处 “<a href="https://www.cnblogs.com/lossingdawn/p/9569524.html" target="_blank" rel="noopener">https://www.cnblogs.com/lossingdawn/p/9569524.html</a>” 「痞子姜」欢迎转载，保留摘要，谢谢！ 面试众安在线 背景 ：两年java，面中级开发 首先 ，是两道编程题，笔试 1、斐波那契数列，f(n)=f(n 1)+f(n 2)，n足够阅读全文</p><a id="more"></a><p>摘要: 原创出处 <a href="https://www.cnblogs.com/lossingdawn/p/9569524.html" target="_blank" rel="noopener">https://www.cnblogs.com/lossingdawn/p/9569524.html</a>「痞子姜」欢迎转载，保留摘要，谢谢！</p><p>面试众安在线<br><strong>背景</strong>：两年java，面中级开发</p><p><strong>首先</strong>，是两道编程题，笔试<br>1、斐波那契数列，f(n)=f(n-1)+f(n-2)，n足够大，获取f(n)的值<br>~<br>2、一个足够大的数组，有10E+个数字，怎么快速找到前10大的数字，时间复杂度是多少<br>~<br><strong>接着</strong>，面试官开始提问了<br>最近，华住数据泄漏事件知道吧<br>~<br>有一篇分析贴看了吧，假如你拿到了这些数据，你会从哪些方面去分析，拿到这些数据你会做什么，你有什么措施来防止这次的事件<br>~<br>加密算法，对称与非对称，<br>~<br>对于多线程的理解，多线程有什么优势<br>~<br>单核cpu如何执行多线程<br>~<br>多线程后台任务怎么保证任务完成了<br>~<br>执行时间长于执行周期的问题，例如每一秒执行一次，执行一次需要三秒<br>~<br>一个线程占用多少资源<br>~<br>支付过程加密用哪种<br>~<br>TCP/UDP的区别<br>~<br>spring的设计模式<br>~<br>IOC、AOP的理解<br>~<br>多进程与多线程的区别<br>~<br>tomcat处理请求，对于线程进程的关系<br>~<br>tomcat处理请求的生命周期<br>~<br>讲一讲你们微服务是怎么搭建的，是按什么划分的，中间有经历什么<br>~<br>暂时就想起来这么多，后面有回忆起立的再补充</p><p><strong>最后</strong>，对面试官有什么要问的？<br>微服务架构：<br>hsf框架，加少量的dubbo和spring could</p><p>考核的标准：<br>业务完成情况、难易度，价值观，对新人的帮助，组内的沟通情况等等</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 摘要: 原创出处 “&lt;a href=&quot;https://www.cnblogs.com/lossingdawn/p/9569524.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/lossingdawn/p/9569524.html&lt;/a&gt;” 「痞子姜」欢迎转载，保留摘要，谢谢！ 面试众安在线 背景 ：两年java，面中级开发 首先 ，是两道编程题，笔试 1、斐波那契数列，f(n)=f(n 1)+f(n 2)，n足够阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="面试" scheme="https://lossingdawn.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
      <category term="面试" scheme="https://lossingdawn.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>图片转字符图片（三）</title>
    <link href="https://lossingdawn.top/p/cn/48068.html"/>
    <id>https://lossingdawn.top/p/cn/48068.html</id>
    <published>2018-08-20T17:11:00.000Z</published>
    <updated>2019-05-24T15:23:02.834Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 序言 这个是从抖音上学来的，一开始刷抖音，遇到不少字符串跳舞的视频，因此来实践一下 主要分为三个部分 1. 静态图片转静态图片 2. gif转gif 3. 视频转视频 视频转视频 主要用到了FFmpeg这个工具，利用命令对视频文件进行操作。首先根据自己调的参数进行图片的截取（本文的是1秒10帧的参数阅读全文</p><a id="more"></a><h3 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h3><p>这个是从抖音上学来的，一开始刷抖音，遇到不少字符串跳舞的视频，因此来实践一下</p><h3 id="主要分为三个部分"><a class="markdownIt-Anchor" href="#主要分为三个部分"></a> 主要分为三个部分</h3><ol><li>静态图片转静态图片</li><li>gif转gif</li><li>视频转视频</li></ol><h3 id="视频转视频"><a class="markdownIt-Anchor" href="#视频转视频"></a> 视频转视频</h3><p>主要用到了FFmpeg这个工具，利用命令对视频文件进行操作。首先根据自己调的参数进行图片的截取（本文的是1秒10帧的参数），图片转换，然后分离音频，最后字符图片和音频合成目标视频。</p><p>FFmpeg的代码库：<br><a href="https://github.com/FFmpeg/FFmpeg" target="_blank" rel="noopener">https://github.com/FFmpeg/FFmpeg</a><br>FFmpeg下载地址：<br><a href="https://ffmpeg.org/download.html" target="_blank" rel="noopener">https://ffmpeg.org/download.html</a></p><p>主要用到的几个命令，其他按帧截图命令参考文末链接4：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 截图</span></span><br><span class="line">ffmpeg -ss <span class="number">10</span> -i input.flv -y -f image2  -vframes <span class="number">100</span> -s <span class="number">352</span>x240 b-%<span class="number">03</span>d.jpg</span><br><span class="line"><span class="comment">// 分离音频</span></span><br><span class="line">ffmpeg -i <span class="number">3.</span>mp4 -vn -y -acodec copy <span class="number">3.</span>aac</span><br><span class="line"><span class="comment">// 合成视频</span></span><br><span class="line">ffmpeg -threads2 -y -r <span class="number">10</span> -i /tmpdir/image%<span class="number">04</span>d.jpg -i audio.mp3 -absf aac_adtstoasc output.mp4</span><br></pre></td></tr></table></figure><p>环境：<br>JDK 1.8</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ffmpeg -ss 10 -i input.flv -y -f image2  -vframes 100 -s 352x240 b-%03d.jpg  </span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ffmpeg 截图，并指定图片的大小</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param srcVideoPath</span></span><br><span class="line"><span class="comment">     * @param tarImagePath</span></span><br><span class="line"><span class="comment">     *            截取后图片路径</span></span><br><span class="line"><span class="comment">     * @param width</span></span><br><span class="line"><span class="comment">     *            截图的宽</span></span><br><span class="line"><span class="comment">     * @param hight</span></span><br><span class="line"><span class="comment">     *            截图的高</span></span><br><span class="line"><span class="comment">     * @param offsetValue</span></span><br><span class="line"><span class="comment">     *            表示相对于文件开始处的时间偏移值 可以是分秒</span></span><br><span class="line"><span class="comment">     * @param vframes</span></span><br><span class="line"><span class="comment">     *            表示截图的桢数</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">boolean</span> processFfmpegImage(<span class="keyword">String</span> srcVideoPath, <span class="keyword">String</span> tarImagePath, <span class="built_in">int</span> <span class="built_in">width</span>, <span class="built_in">int</span> hight,</span><br><span class="line">            <span class="built_in">float</span> offsetValue, <span class="built_in">float</span> vframes) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!checkfile(srcVideoPath)) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"【"</span> + srcVideoPath + <span class="string">"】  不存在 !"</span>);</span><br><span class="line">            <span class="comment">// logger.error("【" + srcVideoPath + "】 不存在 !");</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;<span class="keyword">String</span>&gt; commend = <span class="keyword">new</span> java.util.ArrayList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(ffmpegPath);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-i"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(srcVideoPath);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-y"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-f"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"image2"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-ss"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(offsetValue + <span class="string">""</span>); <span class="comment">// 在视频的某个插入时间截图，例子为5秒后</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// commend.add("-vframes");</span></span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-t"</span>);<span class="comment">// 添加参数＂-t＂，该参数指定持续时间</span></span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(vframes + <span class="string">""</span>); <span class="comment">// 截图的桢数,添加持续时间为1毫秒</span></span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-s"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="built_in">width</span> + <span class="string">"x"</span> + hight); <span class="comment">// 截图的的大小</span></span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(tarImagePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ProcessBuilder builder = <span class="keyword">new</span> ProcessBuilder();</span><br><span class="line">            builder.command(commend);</span><br><span class="line">            builder.redirectErrorStream(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// builder.redirectOutput(new File("F:/123/log/log.log"));</span></span><br><span class="line">            Process process = builder.start();</span><br><span class="line">            doWaitFor(process);</span><br><span class="line">            process.destroy();</span><br><span class="line">            <span class="keyword">if</span> (!checkfile(tarImagePath)) &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(tarImagePath + <span class="string">" is not exit!  processFfmpegImage 转换不成功 !"</span>);</span><br><span class="line">                <span class="comment">// logger.info(tarImagePath + " is not exit! processFfmpegImage</span></span><br><span class="line">                <span class="comment">// 转换不成功 !");</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"【"</span> + srcVideoPath + <span class="string">"】 processFfmpegImage  转换不成功 !"</span>);</span><br><span class="line">            <span class="comment">// logger.error("【" + srcVideoPath + "】 processFfmpegImage 转换不成功</span></span><br><span class="line">            <span class="comment">// !");</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">boolean</span> processFfmpegAudio(<span class="keyword">String</span> srcVideoPath, <span class="keyword">String</span> tarAudioPath) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!checkfile(srcVideoPath)) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"【"</span> + srcVideoPath + <span class="string">"】  不存在 !"</span>);</span><br><span class="line">            <span class="comment">// logger.error("【" + srcVideoPath + "】 不存在 !");</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// https://blog.csdn.net/xiaocao9903/article/details/53420519</span></span><br><span class="line">        <span class="comment">// ffmpeg -i 3.mp4 -vn -y -acodec copy 3.aac</span></span><br><span class="line">        <span class="comment">// ffmpeg -i 3.mp4 -vn -y -acodec copy 3.m4a</span></span><br><span class="line">        </span><br><span class="line">        List&lt;<span class="keyword">String</span>&gt; commend = <span class="keyword">new</span> java.util.ArrayList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line">        </span><br><span class="line">        commend.<span class="built_in">add</span>(ffmpegPath);</span><br><span class="line">        </span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-i"</span>);</span><br><span class="line">        </span><br><span class="line">        commend.<span class="built_in">add</span>(srcVideoPath);</span><br><span class="line">        </span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-vn"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-y"</span>);</span><br><span class="line">        </span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-acodec"</span>);</span><br><span class="line">        </span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"copy"</span>); <span class="comment">// 在视频的某个插入时间截图，例子为5秒后</span></span><br><span class="line">        </span><br><span class="line">        commend.<span class="built_in">add</span>(tarAudioPath);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ProcessBuilder builder = <span class="keyword">new</span> ProcessBuilder();</span><br><span class="line">            builder.command(commend);</span><br><span class="line">            builder.redirectErrorStream(<span class="keyword">true</span>);</span><br><span class="line">            Process process = builder.start();</span><br><span class="line">            doWaitFor(process);</span><br><span class="line">            process.destroy();</span><br><span class="line">            <span class="keyword">if</span> (!checkfile(tarAudioPath)) &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(tarAudioPath + <span class="string">" is not exit!  processFfmpegAudio 转换不成功 !"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"【"</span> + srcVideoPath + <span class="string">"】 processFfmpegAudio  转换不成功 !"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ffmpeg 合成视频</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param srcVideoPath</span></span><br><span class="line"><span class="comment">     * @param tarImagePath</span></span><br><span class="line"><span class="comment">     *            截取后图片路径</span></span><br><span class="line"><span class="comment">     * @param width</span></span><br><span class="line"><span class="comment">     *            截图的宽</span></span><br><span class="line"><span class="comment">     * @param hight</span></span><br><span class="line"><span class="comment">     *            截图的高</span></span><br><span class="line"><span class="comment">     * @param offsetValue</span></span><br><span class="line"><span class="comment">     *            表示相对于文件开始处的时间偏移值 可以是分秒</span></span><br><span class="line"><span class="comment">     * @param vframes</span></span><br><span class="line"><span class="comment">     *            表示截图的桢数</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">boolean</span> processFfmpegVideo(<span class="keyword">String</span> imagePath, <span class="keyword">String</span> audioPath, <span class="keyword">String</span> tarVideoPath, <span class="built_in">int</span> step) &#123;</span><br><span class="line">        <span class="comment">// https://blog.csdn.net/wangshuainan/article/details/77914508?fps=1&amp;locationNum=4</span></span><br><span class="line">        <span class="comment">// 带音频</span></span><br><span class="line">        <span class="comment">// ffmpeg -threads2 -y -r 10 -i /tmpdir/image%04d.jpg -i audio.mp3 -absf</span></span><br><span class="line">        <span class="comment">// aac_adtstoasc output.mp4</span></span><br><span class="line"></span><br><span class="line">        List&lt;<span class="keyword">String</span>&gt; commend = <span class="keyword">new</span> java.util.ArrayList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(ffmpegPath);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-threads"</span>);</span><br><span class="line">        </span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-y"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-r"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(step + <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-i"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(imagePath); <span class="comment">// 图片</span></span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-i"</span>);</span><br><span class="line"></span><br><span class="line">         commend.<span class="built_in">add</span>(audioPath);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-absf"</span>);<span class="comment">// </span></span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"aac_adtstoasc"</span>); <span class="comment">// </span></span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(tarVideoPath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ProcessBuilder builder = <span class="keyword">new</span> ProcessBuilder();</span><br><span class="line">            builder.command(commend);</span><br><span class="line">            builder.redirectErrorStream(<span class="keyword">true</span>);</span><br><span class="line">             builder.redirectOutput(<span class="keyword">new</span> File(<span class="string">"F:/123/log/log.log"</span>));</span><br><span class="line">            Process process = builder.start();</span><br><span class="line">            doWaitFor(process);</span><br><span class="line">            process.destroy();</span><br><span class="line">            <span class="keyword">if</span> (!checkfile(tarVideoPath)) &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(tarVideoPath + <span class="string">" is not exit!  processFfmpegVideo 转换不成功 !"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"【"</span> + tarVideoPath + <span class="string">"】 processFfmpegVideo  转换不成功 !"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>源码地址：<br><a href="https://github.com/Ruffianjiang/java4fun/tree/master/img2text" target="_blank" rel="noopener">https://github.com/Ruffianjiang/java4fun/tree/master/img2text</a></p><p>参考：</p><ol><li><a href="https://blog.csdn.net/i_likechard/article/details/79032931" target="_blank" rel="noopener">https://blog.csdn.net/i_likechard/article/details/79032931</a></li><li><a href="https://blog.csdn.net/xiaocao9903/article/details/53420519" target="_blank" rel="noopener">https://blog.csdn.net/xiaocao9903/article/details/53420519</a></li><li><a href="https://blog.csdn.net/wangshuainan/article/details/77914508?fps=1&amp;locationNum=4" target="_blank" rel="noopener">https://blog.csdn.net/wangshuainan/article/details/77914508?fps=1&amp;locationNum=4</a></li><li><a href="https://blog.csdn.net/yourijing/article/details/50786758" target="_blank" rel="noopener">https://blog.csdn.net/yourijing/article/details/50786758</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 序言 这个是从抖音上学来的，一开始刷抖音，遇到不少字符串跳舞的视频，因此来实践一下 主要分为三个部分 1. 静态图片转静态图片 2. gif转gif 3. 视频转视频 视频转视频 主要用到了FFmpeg这个工具，利用命令对视频文件进行操作。首先根据自己调的参数进行图片的截取（本文的是1秒10帧的参数阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lossingdawn.top/categories/java/"/>
    
      <category term="fun" scheme="https://lossingdawn.top/categories/java/fun/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
      <category term="fun" scheme="https://lossingdawn.top/tags/fun/"/>
    
  </entry>
  
  <entry>
    <title>图片转字符图片（一）</title>
    <link href="https://lossingdawn.top/p/cn/10183.html"/>
    <id>https://lossingdawn.top/p/cn/10183.html</id>
    <published>2018-08-20T16:02:00.000Z</published>
    <updated>2019-05-24T15:23:02.832Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 序言 这个是从抖音上学来的，一开始刷抖音，遇到不少字符串跳舞的视频，因此来实践一下 主要分为三个部分 1. 静态图片转静态图片 2. gif转gif 3. 视频转视频 静态图片转静态图片 其实原理很简单，读取图片的像素，新建一张大小一样的图片，根据原图像素的灰度，决定是不是要显示出来，并在新图相应的阅读全文</p><a id="more"></a><h3 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h3><p>这个是从抖音上学来的，一开始刷抖音，遇到不少字符串跳舞的视频，因此来实践一下</p><h3 id="主要分为三个部分"><a class="markdownIt-Anchor" href="#主要分为三个部分"></a> 主要分为三个部分</h3><ol><li>静态图片转静态图片</li><li>gif转gif</li><li>视频转视频</li></ol><h3 id="静态图片转静态图片"><a class="markdownIt-Anchor" href="#静态图片转静态图片"></a> 静态图片转静态图片</h3><p>其实原理很简单，读取图片的像素，新建一张大小一样的图片，根据原图像素的灰度，决定是不是要显示出来，并在新图相应的位置添加字符，这样就完成了</p><p>借助前辈写的工具，主要包含一下四个类：<br>AnimatedGifEncoder<br>GifDecoder<br>LZWEncoder<br>NeuQuant</p><p><a href="https://github.com/rtyley/animated-gif-lib-for-java" target="_blank" rel="noopener">源地址</a><br><a href="https://github.com/rtyley/animated-gif-lib-for-java" target="_blank" rel="noopener">https://github.com/rtyley/animated-gif-lib-for-java</a><br>ps: 网上各种版本的太多，不清楚这个是不是原作者，github上搜GifDecoder，有不少</p><h3 id="环境"><a class="markdownIt-Anchor" href="#环境"></a> 环境：</h3><p>JDK 1.8<br>注：Java原生代码实现使用jdk内部的GIFImageReader、GIFImageWriter等类，maven在编译的时候会提示这是sun公司的私有API，在1.7、1.8版的JDK中已经删除，所以是有风险的。在此使用ImageIO这个类来进行图片的操作。</p><p>主要代码如下所示：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.<span class="built_in">image</span>.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ClassName: ImgUtil</span></span><br><span class="line"><span class="comment"> * @Description: TODO</span></span><br><span class="line"><span class="comment"> * @author jiang</span></span><br><span class="line"><span class="comment"> * @date 2018年8月14日 下午10:15:56</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class ImgUtil &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(ImgUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">boolean</span> toTextImg(<span class="keyword">String</span> inputFile, <span class="keyword">String</span> outputFile, <span class="keyword">final</span> <span class="keyword">String</span> base, <span class="built_in">int</span> threshold) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        String blackFile = "F:/123/head_black.png";</span></span><br><span class="line">        BufferedImage src = <span class="keyword">null</span>;</span><br><span class="line">        BufferedImage tag = <span class="keyword">null</span>;</span><br><span class="line">        <span class="built_in">boolean</span> res = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            src = ImageIO.read(<span class="keyword">new</span> FileInputStream(inputFile));</span><br><span class="line">            <span class="built_in">int</span>[] rgb = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>];</span><br><span class="line">            <span class="built_in">int</span> <span class="built_in">width</span> = src.getWidth();</span><br><span class="line">            <span class="built_in">int</span> <span class="built_in">height</span> = src.getHeight();</span><br><span class="line">            <span class="built_in">int</span> minx = src.getMinX();</span><br><span class="line">            <span class="built_in">int</span> miny = src.getMinY();</span><br><span class="line">            <span class="comment">// 黑白化</span></span><br><span class="line"><span class="comment">/*-                        </span></span><br><span class="line"><span class="comment">            src = new ColorConvertOp(ColorSpace.getInstance(ColorSpace.CS_GRAY), null).filter(src, null);</span></span><br><span class="line"><span class="comment">            res = ImageIO.write(src, blackFile.substring(blackFile.lastIndexOf(".") + 1), new File(blackFile));</span></span><br><span class="line"><span class="comment">            src = ImageIO.read(new FileInputStream(blackFile));*/</span></span><br><span class="line"></span><br><span class="line">            tag = <span class="keyword">new</span> BufferedImage(<span class="built_in">width</span>, <span class="built_in">height</span>, BufferedImage.TYPE_4BYTE_ABGR);</span><br><span class="line">            Graphics g = tag.getGraphics();</span><br><span class="line">            g.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.PLAIN, <span class="number">10</span>));<span class="comment">// 设置字体</span></span><br><span class="line">            g.setColor(Color.BLUE);<span class="comment">// 设置颜色</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> x = minx; x &lt; <span class="built_in">width</span>; x += <span class="number">6</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> y = miny; y &lt; <span class="built_in">height</span>; y += <span class="number">6</span>) &#123;</span><br><span class="line">                    <span class="built_in">int</span> pixel = src.getRGB(x, y); <span class="comment">// 下面三行代码将一个数字转换为RGB数字</span></span><br><span class="line">                    rgb[<span class="number">0</span>] = (pixel &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span>;<span class="comment">// red</span></span><br><span class="line">                    rgb[<span class="number">1</span>] = (pixel &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>;<span class="comment">// green</span></span><br><span class="line">                    rgb[<span class="number">2</span>] = (pixel &amp; <span class="number">0xff</span>);<span class="comment">// blue</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="built_in">float</span> gray = <span class="number">0.299</span>f * rgb[<span class="number">0</span>] + <span class="number">0.578</span>f * rgb[<span class="number">1</span>] + <span class="number">0.114</span>f * rgb[<span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">final</span> <span class="built_in">int</span> index = Math.<span class="built_in">round</span>(gray * (base.length() + <span class="number">1</span>) / <span class="number">255</span>);</span><br><span class="line"><span class="comment">//                    logger.debug("&#123;&#125;,&#123;&#125;",index,base.length() / threshold);</span></span><br><span class="line">                    <span class="keyword">if</span> (index &lt;= threshold) &#123;</span><br><span class="line">                        g.drawString(<span class="keyword">String</span>.valueOf(base.charAt(index % base.length())), x, y);<span class="comment">// 文字的编写及位置</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/*-</span></span><br><span class="line"><span class="comment">                    if (rgb[0] + rgb[1] + rgb[2] &lt;= 500) &#123;</span></span><br><span class="line"><span class="comment">                        System.out.println("i=" + i + ",j=" + j + ":(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + ")");</span></span><br><span class="line"><span class="comment">                        g.drawString("v", i, j);// 文字的编写及位置</span></span><br><span class="line"><span class="comment">                    &#125;*/</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            g.dispose();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出图片</span></span><br><span class="line">            res = ImageIO.write(tag, outputFile.substring(outputFile.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>),</span><br><span class="line">                    <span class="keyword">new</span> File(outputFile));</span><br><span class="line">            logger.debug(<span class="string">"字符化结果：&#123;&#125;"</span>, res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"err"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码的思路很简单，</p><p>src.getRGB(x, y)<br>获取具体像素点的颜色值，共六位，每两位一个颜色值，依次是</p><p>red</p><p>green</p><p>blue<br>,类似的使用</p><p>(pixel &amp; 0xff0000) &gt;&gt; 16<br>获取第一位的红色等，根据灰度公式</p><p>Gray = R/*0.299 + G/*0.587 + B/*0.114<br>计算灰度（百度</p><p>颜色灰度公式<br>，有很多来计算心理灰度的解决方案），选择合适的灰度替换上合适的字符即可</p><p>源码地址：<br><a href="https://github.com/Ruffianjiang/java4fun/tree/master/img2text" target="_blank" rel="noopener">https://github.com/Ruffianjiang/java4fun/tree/master/img2text</a></p><p>参考：</p><ol><li><a href="https://blog.csdn.net/chwshuang/article/details/64923345" target="_blank" rel="noopener">https://blog.csdn.net/chwshuang/article/details/64923345</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 序言 这个是从抖音上学来的，一开始刷抖音，遇到不少字符串跳舞的视频，因此来实践一下 主要分为三个部分 1. 静态图片转静态图片 2. gif转gif 3. 视频转视频 静态图片转静态图片 其实原理很简单，读取图片的像素，新建一张大小一样的图片，根据原图像素的灰度，决定是不是要显示出来，并在新图相应的阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lossingdawn.top/categories/java/"/>
    
      <category term="fun" scheme="https://lossingdawn.top/categories/java/fun/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
      <category term="fun" scheme="https://lossingdawn.top/tags/fun/"/>
    
  </entry>
  
  <entry>
    <title>Github访问不到，登陆不上</title>
    <link href="https://lossingdawn.top/p/cn/61789.html"/>
    <id>https://lossingdawn.top/p/cn/61789.html</id>
    <published>2018-06-10T05:50:00.000Z</published>
    <updated>2019-05-24T15:23:02.810Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 为github添加host 在host文件添加如下两行 再次 ping <a href="http://github.com" target="_blank" rel="noopener">github.com</a> 解析后的ip就会强制指向host中的ip 注1： host文件修改需要权限，建议使用 nodepad++ ，保存后会自动要求管理员权限，再次保存即可 注2： 关于IP的选择，可以去 站长工具 去查 参考： 阅读全文</p><a id="more"></a><p>为github添加host</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\W</span>INDOWS<span class="symbol">\S</span>ystem32<span class="symbol">\d</span>rivers<span class="symbol">\e</span>tc</span><br></pre></td></tr></table></figure><p>在host文件添加如下两行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192<span class="selector-class">.30</span><span class="selector-class">.253</span><span class="selector-class">.112</span> <span class="selector-tag">github</span><span class="selector-class">.com</span></span><br><span class="line">151<span class="selector-class">.101</span><span class="selector-class">.113</span><span class="selector-class">.194</span> <span class="selector-tag">github</span><span class="selector-class">.global</span><span class="selector-class">.SSL</span><span class="selector-class">.fastly</span><span class="selector-class">.net</span></span><br></pre></td></tr></table></figure><p>再次 ping <a href="http://github.com" target="_blank" rel="noopener">github.com</a> 解析后的ip就会强制指向host中的ip</p><p><img src="https://images2018.cnblogs.com/blog/670989/201806/670989-20180610134332071-1047669790.png" alt=""></p><p></p><p>注1：</p><p>host文件修改需要权限，建议使用 <a href="https://notepad-plus.en.softonic.com/" target="_blank" rel="noopener">nodepad++</a> ，保存后会自动要求管理员权限，再次保存即可</p><p>注2：</p><p>关于IP的选择，可以去 <a href="http://tool.chinaz.com/dns/" target="_blank" rel="noopener">站长工具</a> 去查</p><p>参考：</p><p><a href="https://blog.csdn.net/wl_521/article/details/80154063" target="_blank" rel="noopener">https://blog.csdn.net/wl_521/article/details/80154063</a></p><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 为github添加host 在host文件添加如下两行 再次 ping &lt;a href=&quot;http://github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github.com&lt;/a&gt; 解析后的ip就会强制指向host中的ip 注1： host文件修改需要权限，建议使用 nodepad++ ，保存后会自动要求管理员权限，再次保存即可 注2： 关于IP的选择，可以去 站长工具 去查 参考： 阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="github" scheme="https://lossingdawn.top/categories/github/"/>
    
    
      <category term="github" scheme="https://lossingdawn.top/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Jdk安装错误1316，jdk-10.0.1</title>
    <link href="https://lossingdawn.top/p/cn/49489.html"/>
    <id>https://lossingdawn.top/p/cn/49489.html</id>
    <published>2018-05-24T16:50:00.000Z</published>
    <updated>2019-05-24T15:23:02.817Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 打开注册表regedit ，定个位到 计算机\HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\ 把jdk，jre下面的目录删掉。即10.0.1 ，问题解决 参考： <a href="https://blog.csdn.net/lesorb/article/details/4389626%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87" target="_blank" rel="noopener">https://blog.csdn.net/lesorb/article/details/4389626阅读全文</a></p><a id="more"></a><p>打开注册表regedit ，定个位到</p><p>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\</p><p>把jdk，jre下面的目录删掉。即10.0.1 ，问题解决</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180525004720215-2037377963.png" alt=""></p><p>参考：</p><p><a href="https://blog.csdn.net/lesorb/article/details/4389626" target="_blank" rel="noopener">https://blog.csdn.net/lesorb/article/details/4389626</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 打开注册表regedit ，定个位到 计算机\HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\ 把jdk，jre下面的目录删掉。即10.0.1 ，问题解决 参考： &lt;a href=&quot;https://blog.csdn.net/lesorb/article/details/4389626%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/lesorb/article/details/4389626阅读全文&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lossingdawn.top/categories/java/"/>
    
      <category term="jdk" scheme="https://lossingdawn.top/categories/java/jdk/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
      <category term="jdk" scheme="https://lossingdawn.top/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>Windows安装mongodb</title>
    <link href="https://lossingdawn.top/p/cn/13792.html"/>
    <id>https://lossingdawn.top/p/cn/13792.html</id>
    <published>2018-05-23T15:44:00.000Z</published>
    <updated>2019-05-24T15:23:02.826Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 一、资源 mongo下载地址： <a href="https://www.mongodb.com/download-center#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center#community</a> romongo下载： <a href="https://robomongo.org/" target="_blank" rel="noopener">https://robomongo.org/</a> 如下三个文件，（mongodb-compass可以不用下在，这是管理mongo用的图形化界面，习惯用阅读全文</p><a id="more"></a><h1 id="一-资源"><a class="markdownIt-Anchor" href="#一-资源"></a> 一、资源</h1><p>mongo下载地址：</p><p><a href="https://www.mongodb.com/download-center/#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/#community</a></p><p>romongo下载：</p><p><a href="https://robomongo.org/" target="_blank" rel="noopener">https://robomongo.org/</a></p><p>如下三个文件，（mongodb-compass可以不用下在，这是管理mongo用的图形化界面，习惯用romongo查询，studio3t可以自己学习使用）</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523230609258-1965975496.png" alt=""></p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523230624498-2048375172.png" alt=""></p><p>安装好以上软件，我本地的mongo安装到了d:tools\mongo 目录下，新建两个目录用于存储数据和日志</p><p>d:\tools\data\db  和  d:\tools\data\log</p><h1 id="二-初始化工作"><a class="markdownIt-Anchor" href="#二-初始化工作"></a> 二、初始化工作</h1><p>在命令行使用命令：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">启动脚本</span><br><span class="line">D:<span class="symbol">\t</span>ools<span class="symbol">\m</span>ongo<span class="symbol">\b</span>in<span class="symbol">\m</span>ongod --dbpath D:<span class="symbol">\t</span>ools<span class="symbol">\d</span>ata<span class="symbol">\d</span>b</span><br><span class="line"></span><br><span class="line">连接脚本</span><br><span class="line">D:<span class="symbol">\t</span>ools<span class="symbol">\m</span>ongo<span class="symbol">\b</span>in<span class="symbol">\m</span>ongo.exe</span><br></pre></td></tr></table></figure><p>出现  waiting for connetions on port 27017 ，则表示启动成功，ctrl+c可以关闭</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523231214127-696762503.png" alt=""></p><p>使用连接脚本连接数据库（新开一个命令行）</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523231314507-1741726332.png" alt=""></p><p>启动数据库命令行出现如下连接者的信息，连接成功</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523231548680-1994178827.png" alt=""></p><p>使用mongodb compass连接</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523231912505-440335011.png" alt=""></p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523231932604-1994370193.png" alt=""></p><p>romongo连接</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523232009239-2102787447.png" alt=""></p><p>后面主要使用romongo进行数据的查询，其中三种视图的切换</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523232601167-1448570459.png" alt=""></p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523232628501-270467638.png" alt=""></p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523232638818-290755981.png" alt=""></p><h1 id="三-mongo的配置"><a class="markdownIt-Anchor" href="#三-mongo的配置"></a> 三、mongo的配置</h1><p>配置 MongoDB 服务</p><p><em>创建一个配置文件位于 D:\tools\mongo\mongod.cfg<br>具体内容如下：</em></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">systemLog:</span></span><br><span class="line"><span class="string">destination:</span> file</span><br><span class="line"><span class="string">path:</span> <span class="string">D:</span>\tools\data\log\mongod.log</span><br><span class="line"><span class="string">storage:</span></span><br><span class="line"><span class="string">dbPath:</span> <span class="string">D:</span>\tools\data\db</span><br></pre></td></tr></table></figure><p>安装 MongoDB服务</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:<span class="symbol">\t</span>ools<span class="symbol">\m</span>ongo<span class="symbol">\b</span>in<span class="symbol">\m</span>ongod.exe --config "D:<span class="symbol">\t</span>ools<span class="symbol">\m</span>ongo<span class="symbol">\m</span>ongod.cfg" --install</span><br></pre></td></tr></table></figure><p></p><p>命令行需要管理员权限，没使用管理员权限的出现如下log信息</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523233935268-1055788732.png" alt=""></p><p>安装完成log信息如下：</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523234018623-1110298683.png" alt=""></p><p>在服务里可以找到MongoBD的服务</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523233703415-677450017.png" alt=""></p><p></p><p>启动MongoDB服务</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> MongoDB</span><br></pre></td></tr></table></figure><p>关闭MongoDB服务</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net <span class="built_in">stop</span> MongoDB</span><br></pre></td></tr></table></figure><p>移除 MongoDB 服务</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\m</span>ongodb<span class="symbol">\b</span>in<span class="symbol">\m</span>ongod.exe --remove</span><br></pre></td></tr></table></figure><p>其他的信息自行摸索吧，现在可以愉快的使用mongo了</p><p>参考：</p><p><a href="http://www.runoob.com/mongodb/mongodb-window-install.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-window-install.html</a></p><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 一、资源 mongo下载地址： &lt;a href=&quot;https://www.mongodb.com/download-center#community&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.mongodb.com/download-center#community&lt;/a&gt; romongo下载： &lt;a href=&quot;https://robomongo.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://robomongo.org/&lt;/a&gt; 如下三个文件，（mongodb-compass可以不用下在，这是管理mongo用的图形化界面，习惯用阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="db" scheme="https://lossingdawn.top/categories/db/"/>
    
      <category term="mongo" scheme="https://lossingdawn.top/categories/db/mongo/"/>
    
    
      <category term="mongo" scheme="https://lossingdawn.top/tags/mongo/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse中Cannot Nest Src Folder解决方法</title>
    <link href="https://lossingdawn.top/p/cn/61671.html"/>
    <id>https://lossingdawn.top/p/cn/61671.html</id>
    <published>2018-04-25T01:04:00.000Z</published>
    <updated>2019-05-24T15:23:02.791Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 错误示例： 解决方法： 右击项目 -&gt; properties -&gt; java build path -&gt; source 一般是上图的红框的问题，这个已经改过的，报错的时候，是一个还未新建的文件夹目录/bin/main，解决方案如下图所示： 第一种就是把allow output folders xxx阅读全文</p><a id="more"></a><p>错误示例：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: Java Model Status [Cannot nest output <span class="built_in">folder</span> <span class="string">'xxx/bin/main'</span> inside output <span class="built_in">folder</span> <span class="string">'xxx/bin'</span>]</span><br></pre></td></tr></table></figure><p>解决方法：</p><p>右击项目 -&gt; properties -&gt; java build path -&gt; source</p><p><img src="https://images2018.cnblogs.com/blog/670989/201804/670989-20180425085906920-111690844.png" alt=""></p><p>一般是上图的红框的问题，这个已经改过的，报错的时候，是一个还未新建的文件夹目录/bin/main，解决方案如下图所示：</p><p><img src="https://images2018.cnblogs.com/blog/670989/201804/670989-20180425090102781-1418976264.png" alt=""></p><p>第一种就是把allow output folders xxx 的勾选去掉</p><p>第二种不去勾选，把default output folder目录改到bin目录</p><p></p><p>另外一种参考方法：</p><p><a href="https://blog.csdn.net/sinat_30397435/article/details/78522566" target="_blank" rel="noopener">https://blog.csdn.net/sinat_30397435/article/details/78522566</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 错误示例： 解决方法： 右击项目 -&amp;gt; properties -&amp;gt; java build path -&amp;gt; source 一般是上图的红框的问题，这个已经改过的，报错的时候，是一个还未新建的文件夹目录/bin/main，解决方案如下图所示： 第一种就是把allow output folders xxx阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="ide" scheme="https://lossingdawn.top/categories/ide/"/>
    
      <category term="eclipse" scheme="https://lossingdawn.top/categories/ide/eclipse/"/>
    
    
      <category term="ide" scheme="https://lossingdawn.top/tags/ide/"/>
    
      <category term="eclipse" scheme="https://lossingdawn.top/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>restTemplate重定向问题 &amp;Cookie问题</title>
    <link href="https://lossingdawn.top/p/cn/20555.html"/>
    <id>https://lossingdawn.top/p/cn/20555.html</id>
    <published>2018-04-20T07:44:00.000Z</published>
    <updated>2019-05-24T15:23:02.822Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 最近在做一个转发功能，zuul + ribbon + resttemplate 进行路由、负载、转发的功能 基本准备就绪，在微信自动登陆那遇到了一个坑，ribbon 系统用resttemplate 转发A系统的资源，在微信自动登陆的地方，A系统重定向到微信的地址，类似下面的代码 结果resttemp阅读全文</p><a id="more"></a><p>最近在做一个转发功能，zuul + ribbon + resttemplate 进行路由、负载、转发的功能</p><p>基本准备就绪，在微信自动登陆那遇到了一个坑，ribbon 系统用resttemplate 转发A系统的资源，在微信自动登陆的地方，A系统重定向到微信的地址，类似下面的代码</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redirect: https:<span class="regexp">//open</span>.weixin.qq.com/<span class="keyword">connect</span>/oauth2/authorize?appid=wx3290f3d5****&amp;redirect_uri=http:<span class="regexp">//</span>***.com/weixin/wxAuthRedirect?redirectUrl=http%3A%2F%2F192.<span class="number">168.10</span>.<span class="number">116</span>%3A8081%2Finternal%2Fpage%2Fuser%2Flogin_wx&amp;response_type=code&amp;scope=snsapi_userinfo&amp;<span class="keyword">state</span>=<span class="keyword">state</span><span class="comment">#wechat_redirect</span></span><br></pre></td></tr></table></figure><p>结果resttemplate 自动重定向到本地的地址，如下所示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">10.116</span>:**<span class="regexp">/connect/</span>oauth2<span class="regexp">/authorize**</span></span><br></pre></td></tr></table></figure><p>仔细思考了下，大概就是resttemplate 的重定向问题，查了查资料，找到一个类HttpComponentsClientHttpRequestFactory，RestTemplate初始化提供了这个类的参数</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new instance of the &#123;<span class="doctag">@link</span> RestTemplate&#125; based on the given &#123;<span class="doctag">@link</span> ClientHttpRequestFactory&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestFactory HTTP request factory to use</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> org.springframework.http.client.SimpleClientHttpRequestFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> org.springframework.http.client.HttpComponentsClientHttpRequestFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RestTemplate</span><span class="params">(ClientHttpRequestFactory requestFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        setRequestFactory(requestFactory);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>HttpComponentsClientHttpRequestFactory继承自ClientHttpRequestFactory，这个类的子类有HttpComponentsClientHttpRequestFactory和SimpleClientHttpRequestFactory</p><p>找到SimpleClientHttpRequestFactory，有如下方法：</p><p>第一种方式：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Template method for preparing the given &#123;@link HttpURLConnection&#125;.</span><br><span class="line">     * &lt;p&gt;The default implementation prepares the connection for input and output, and sets the HTTP method.</span><br><span class="line">     * @param connection the connection to prepare</span><br><span class="line">     * @param httpMethod the HTTP request method (&#123;@code GET&#125;, &#123;@code POST&#125;, etc.)</span><br><span class="line">     * @throws IOException in case of I/O errors</span><br><span class="line">     */</span><br><span class="line">    protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException &#123;</span><br><span class="line">        if (this.connectTimeout &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            connection.setConnectTimeout(this.connectTimeout);</span><br><span class="line">        &#125;</span><br><span class="line">        if (this.readTimeout &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            connection.setReadTimeout(this.readTimeout);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        connection.setDoInput(true);</span><br><span class="line"></span><br><span class="line">        if (<span class="string">"<span class="keyword">GET</span>"</span>.equals(httpMethod)) &#123;</span><br><span class="line">            connection.setInstanceFollowRedirects(true);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            connection.setInstanceFollowRedirects(false);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (<span class="string">"<span class="keyword">POST</span>"</span>.equals(httpMethod) || <span class="string">"<span class="keyword">PUT</span>"</span>.equals(httpMethod) ||</span><br><span class="line">                <span class="string">"<span class="keyword">PATCH</span>"</span>.equals(httpMethod) || <span class="string">"<span class="keyword">DELETE</span>"</span>.equals(httpMethod)) &#123;</span><br><span class="line">            connection.setDoOutput(true);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            connection.setDoOutput(false);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        connection.setRequestMethod(httpMethod);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到setInstanceFollowRedirects，get请求是可以重定向的，其他方法禁止了重定向，于是建个SimpleClientHttpRequestFactory的子类，禁用重定向。</p><p>于是乎 NoRedirectClientHttpRequestFactory.java</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">HttpURLConnection</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.<span class="type">SimpleClientHttpRequestFactory</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">NoRedirectClientHttpRequestFactory</span> <span class="keyword">extends</span> <span class="title">SimpleClientHttpRequestFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void prepareConnection(<span class="type">HttpURLConnection</span> connection, <span class="type">String</span> httpMethod) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">super</span>.prepareConnection(connection, httpMethod);</span><br><span class="line">        <span class="comment">// 禁止自动重定向</span></span><br><span class="line">        connection.setFollowRedirects(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NoRedirectClientHttpRequestFactory httpRequestFactory</span> = new NoRedirectClientHttpRequestFactory();</span><br><span class="line"><span class="attribute">RestTemplate restTemplate</span> = new RestTemplate(httpRequestFactory);</span><br></pre></td></tr></table></figure><p>接着，似乎更换ClientHttpRequestFactory并不合心意，还是要使用HttpComponentsClientHttpRequestFactory来实现，HttpComponentsClientHttpRequestFactory是可以自定义HttpClient的，于是查到了HttpClient头上，HttpClient是可以设置Redirect的，</p><p>第二种方式：</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpClient</span> httpClient = <span class="type">HttpClientBuilder</span>.create()</span><br><span class="line">                .setRedirectStrategy(<span class="function"><span class="keyword">new</span> <span class="title">LaxRedirectStrategy</span>())</span></span><br><span class="line"><span class="function">                .<span class="title">build</span>();</span></span><br><span class="line"><span class="function"><span class="title">httpRequestFactory</span>.<span class="title">setHttpClient</span>(httpClient);</span></span><br><span class="line"><span class="function"><span class="title">RestTemplate</span> <span class="title">restTemplate</span> = <span class="title">new</span> <span class="title">RestTemplate</span>(httpRequestFactory);</span></span><br></pre></td></tr></table></figure><p>默认提供了两个类，DefaultRedirectStrategy和LaxRedirectStrategy，LaxRedirectStrategy继承自DefaultRedirectStrategy</p><p>DefaultRedirectStrategy.java</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Redirectable methods.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span>[] REDIRECT_METHODS = <span class="keyword">new</span> <span class="keyword">String</span>[] &#123;</span><br><span class="line">        HttpGet.METHOD_NAME,</span><br><span class="line">        HttpHead.METHOD_NAME</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>LaxRedirectStrategy.java</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ====================================================================</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * "License"); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment"> * software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment"> * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment"> * KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment"> * specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment"> * under the License.</span></span><br><span class="line"><span class="comment"> * ====================================================================</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This software consists of voluntary contributions made by many</span></span><br><span class="line"><span class="comment"> * individuals on behalf of the Apache Software Foundation.  For more</span></span><br><span class="line"><span class="comment"> * information on the Apache Software Foundation, please see</span></span><br><span class="line"><span class="comment"> * &lt;http://www.apache.org/&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.http.impl.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.annotation.<span class="type">Contract</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.annotation.<span class="type">ThreadingBehavior</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.<span class="type">HttpDelete</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.<span class="type">HttpGet</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.<span class="type">HttpHead</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.<span class="type">HttpPost</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Lax &#123;@link org.apache.http.client.RedirectStrategy&#125; implementation</span></span><br><span class="line"><span class="comment"> * that automatically redirects all HEAD, GET, POST, and DELETE requests.</span></span><br><span class="line"><span class="comment"> * This strategy relaxes restrictions on automatic redirection of</span></span><br><span class="line"><span class="comment"> * POST methods imposed by the HTTP specification.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @since 4.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Contract</span>(threading = <span class="type">ThreadingBehavior</span>.<span class="type">IMMUTABLE</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LaxRedirectStrategy</span> <span class="keyword">extends</span> <span class="title">DefaultRedirectStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public static <span class="keyword">final</span> <span class="type">LaxRedirectStrategy</span> <span class="type">INSTANCE</span> = <span class="keyword">new</span> <span class="type">LaxRedirectStrategy</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Redirectable methods.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> <span class="type">String</span>[] <span class="type">REDIRECT_METHODS</span> = <span class="keyword">new</span> <span class="type">String</span>[] &#123;</span><br><span class="line">        <span class="type">HttpGet</span>.<span class="type">METHOD_NAME</span>,</span><br><span class="line">        <span class="type">HttpPost</span>.<span class="type">METHOD_NAME</span>,</span><br><span class="line">        <span class="type">HttpHead</span>.<span class="type">METHOD_NAME</span>,</span><br><span class="line">        <span class="type">HttpDelete</span>.<span class="type">METHOD_NAME</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> boolean isRedirectable(<span class="keyword">final</span> <span class="type">String</span> method) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> <span class="type">String</span> m: <span class="type">REDIRECT_METHODS</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.equalsIgnoreCase(method)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就很清晰了，copy一份LaxRedirectStrategy的代码，改写掉REDIRECT_METHODS中的定义方法，如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.http.annotation.Contract;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.annotation.ThreadingBehavior;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.DefaultRedirectStrategy;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@ClassName: MyRedirectStrategy </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@Description: TODO</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@author thinklight</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@date 2018年4月20日 下午2:47:29 </span></span></span><br><span class="line"><span class="comment"><span class="markdown">*</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"><span class="meta">@Contract</span>(threading = ThreadingBehavior.IMMUTABLE)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyRedirectStrategy</span>  <span class="keyword">extends</span> <span class="title">DefaultRedirectStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">final</span> MyRedirectStrategy INSTANCE = <span class="keyword">new</span> MyRedirectStrategy();</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * Redirectable methods.</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    private <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">String</span>[] REDIRECT_METHODS = <span class="keyword">new</span> <span class="built_in">String</span>[] &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    protected boolean isRedirectable(<span class="keyword">final</span> <span class="built_in">String</span> method) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> <span class="built_in">String</span> m: REDIRECT_METHODS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.equalsIgnoreCase(method)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ribbon+微信各种重定向问题，解决了。</p><p>第三种方式：</p><p>自己蠢了，今天因为cookie的问题发现了简单的方式</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpClient httpClient = HttpClientBuilder.create<span class="params">()</span><span class="string">.disableCookieManagement</span><span class="params">()</span><span class="string">.disableRedirectHandling</span><span class="params">()</span><span class="string">.build</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">Autowired</span></span><br><span class="line">    <span class="type">RestTemplate</span> restTemplate;</span><br><span class="line">    </span><br><span class="line">    @<span class="type">Bean</span></span><br><span class="line">    @<span class="type">LoadBalanced</span></span><br><span class="line">    <span class="type">RestTemplate</span> restTemplate() &#123;</span><br><span class="line">        <span class="type">HttpComponentsClientHttpRequestFactory</span> httpRequestFactory = <span class="function"><span class="keyword">new</span> <span class="title">HttpComponentsClientHttpRequestFactory</span>();</span></span><br><span class="line"><span class="function"><span class="comment">//        NoRedirectClientHttpRequestFactory httpRequestFactory = new NoRedirectClientHttpRequestFactory();// 此类型不能使用httpClient</span></span></span><br><span class="line"><span class="function">        <span class="title">httpRequestFactory</span>.<span class="title">setConnectionRequestTimeout</span>(<span class="number">2000</span>);</span></span><br><span class="line"><span class="function">        <span class="title">httpRequestFactory</span>.<span class="title">setConnectTimeout</span>(<span class="number">10000</span>);</span></span><br><span class="line"><span class="function">        <span class="title">httpRequestFactory</span>.<span class="title">setReadTimeout</span>(<span class="number">7200000</span>);</span></span><br><span class="line"><span class="function">        <span class="comment">// HttpClient httpClient = HttpClientBuilder.create()</span></span></span><br><span class="line"><span class="function">        <span class="comment">//        .setRedirectStrategy(new MyRedirectStrategy())</span></span></span><br><span class="line"><span class="function">        <span class="comment">//        .build(); 　　　　 HttpClient httpClient = HttpClientBuilder.create().disableCookieManagement().disableRedirectHandling().build();</span></span></span><br><span class="line"><span class="function">        <span class="title">httpRequestFactory</span>.<span class="title">setHttpClient</span>(httpClient);</span></span><br><span class="line"><span class="function">        <span class="title">RestTemplate</span> <span class="title">restTemplate</span> = <span class="title">new</span> <span class="title">RestTemplate</span>(httpRequestFactory);</span></span><br><span class="line"><span class="function">        <span class="title">logger</span>.<span class="title">debug</span>("指定字符编码为<span class="type">UTF</span><span class="number">-8</span>,原编码为<span class="type">ISO</span><span class="number">-8859</span><span class="number">-1</span>");</span></span><br><span class="line"><span class="function">        <span class="title">restTemplate</span>.<span class="title">getMessageConverters</span>().<span class="title">set</span>(<span class="number">1</span>, new <span class="type">StringHttpMessageConverter</span>(<span class="type">StandardCharsets</span>.<span class="type">UTF_8</span>));</span></span><br><span class="line"><span class="function">        <span class="title">logger</span>.<span class="title">debug</span>("<span class="type">RestTemple</span>默认能转换为application/json，转换追加text/plain类型");</span></span><br><span class="line"><span class="function">        <span class="title">restTemplate</span>.<span class="title">getMessageConverters</span>().<span class="title">add</span>(new <span class="type">WxMappingJackson2HttpMessageConverter</span>());</span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">restTemplate</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br></pre></td></tr></table></figure><p></p><p>重定向参考：<a href="https://www.dozer.cc/2014/05/disable-resttemplate-redirect.html" target="_blank" rel="noopener">https://www.dozer.cc/2014/05/disable-resttemplate-redirect.html</a></p><p>cookie参考：<a href="https://stackoverflow.com/questions/10175649/resttemplate-and-cookie" target="_blank" rel="noopener">https://stackoverflow.com/questions/10175649/resttemplate-and-cookie</a></p><p><a href="https://stackoverflow.com/questions/22853321/resttemplate-client-with-cookies" target="_blank" rel="noopener">https://stackoverflow.com/questions/22853321/resttemplate-client-with-cookies</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 最近在做一个转发功能，zuul + ribbon + resttemplate 进行路由、负载、转发的功能 基本准备就绪，在微信自动登陆那遇到了一个坑，ribbon 系统用resttemplate 转发A系统的资源，在微信自动登陆的地方，A系统重定向到微信的地址，类似下面的代码 结果resttemp阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="spring boot" scheme="https://lossingdawn.top/categories/spring-boot/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
      <category term="spring boot" scheme="https://lossingdawn.top/tags/spring-boot/"/>
    
      <category term="restTemplate" scheme="https://lossingdawn.top/tags/restTemplate/"/>
    
  </entry>
  
  <entry>
    <title>Java ServletContextListener 实现UDP监听</title>
    <link href="https://lossingdawn.top/p/cn/10697.html"/>
    <id>https://lossingdawn.top/p/cn/10697.html</id>
    <published>2018-03-20T07:24:00.000Z</published>
    <updated>2019-05-24T15:23:02.813Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 使用spring boot实现项目启动时的监听， UDPListener import java.io.IOException;import java.io.UnsupportedEncodingException;import java.net.DatagramPacket;import java阅读全文</p><a id="more"></a><p>使用spring boot实现项目启动时的监听，</p><p>UDPListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_UDP_DATA_SIZE = <span class="number">4096</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UDP_PORT = <span class="number">26666</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"========UDPListener Initialized========="</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">             <span class="comment">// 启动一个线程，监听UDP数据报</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> UDPProcess(UDP_PORT)).start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UDPProcess</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UDPProcess</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> SocketException </span>&#123;</span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket(port);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            System.out.println(<span class="string">"=======UDPProcess======"</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[MAX_UDP_DATA_SIZE];</span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, buffer.length);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.receive(packet);</span><br><span class="line">                    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Process(packet)).start();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Process</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Process</span><span class="params">(DatagramPacket packet)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = packet.getData();<span class="comment">// 接收到的UDP信息，然后解码</span></span><br><span class="line">            String srt1 = <span class="keyword">new</span> String(buffer,<span class="string">"GBK"</span>).trim();</span><br><span class="line">            String srt2 = <span class="keyword">new</span> String(buffer, <span class="string">"UTF-8"</span>).trim();</span><br><span class="line">            String srt3 = <span class="keyword">new</span> String(buffer,<span class="string">"ISO-8859-1"</span>).trim();</span><br><span class="line">            System.out.println(<span class="string">"=======Process srt1 GBK======"</span> + srt1);</span><br><span class="line">            System.out.println(<span class="string">"=======Process srt2 UTF-8======"</span> + srt2);</span><br><span class="line">            System.out.println(<span class="string">"=======Process srt3 ISO-8859-1======"</span> + srt3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            System.out.println(<span class="string">"====Process run====="</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"========UDPListener Destroyed========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DemoApplication</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@ServletComponentScan</span> </span><br><span class="line">public class DemoApplication &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ServletComponentScan Servlet扫描，启动时把servlet、filter、listener自动扫描注入 UDP测试客户端（也可以用测试工具发送UDP包测试）：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.IOException;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.net.DatagramPacket;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.net.DatagramSocket;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.net.InetAddress;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPClientTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_HOSTNAME = <span class="string">"localhost"</span>;</span><br><span class="line">    <span class="comment">// 服务器端口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> int SERVER_PORT = <span class="number">26666</span>;</span><br><span class="line">    <span class="comment">// 本地发送端口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> int LOCAL_PORT = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1，创建udp服务。通过DatagramSocket对象。</span></span><br><span class="line">            DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(LOCAL_PORT);</span><br><span class="line">            <span class="comment">// 2，确定数据，并封装成数据包。DatagramPacket(byte[] buf, int length, InetAddress</span></span><br><span class="line">            <span class="comment">// address, int port)</span></span><br><span class="line">            byte[] buf = <span class="string">"你好，世界"</span>.getBytes();</span><br><span class="line">            DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length, InetAddress.getByName(SERVER_HOSTNAME),</span><br><span class="line">                    SERVER_PORT);</span><br><span class="line">            <span class="comment">// 3，通过socket服务，将已有的数据包发送出去。通过send方法。</span></span><br><span class="line">            socket.send(dp);</span><br><span class="line">            <span class="comment">// 4，关闭资源。</span></span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2018.cnblogs.com/blog/670989/201803/670989-20180320154922517-812686880.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 使用spring boot实现项目启动时的监听， UDPListener import java.io.IOException;import java.io.UnsupportedEncodingException;import java.net.DatagramPacket;import java阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lossingdawn.top/categories/java/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
      <category term="udp" scheme="https://lossingdawn.top/tags/udp/"/>
    
  </entry>
  
  <entry>
    <title>Weex起步</title>
    <link href="https://lossingdawn.top/p/cn/33787.html"/>
    <id>https://lossingdawn.top/p/cn/33787.html</id>
    <published>2018-03-01T06:56:00.000Z</published>
    <updated>2019-05-24T15:23:02.825Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: weex文档地址： <a href="http://weex" target="_blank" rel="noopener">http://weex</a> <a href="http://project.io/cn/guide/index.html" target="_blank" rel="noopener">project.io/cn/guide/index.html</a> weex的文档过于简单，加上js语法 &amp; android &amp; ios本身也有很多的问题，导致新接触weex，几乎步步是坑 在此记录一下weex的一些探索 一、初始化 按照官方的步骤走， 接着就遇阅读全文</p><a id="more"></a><p>weex文档地址：<br><a href="http://weex-project.io/cn/guide/index.html" target="_blank" rel="noopener">http://weex-project.io/cn/guide/index.html</a></p><p>weex的文档过于简单，加上js语法 &amp; android &amp; ios本身也有很多的问题，导致新接触weex，几乎步步是坑</p><p>在此记录一下weex的一些探索</p><h2 id="一-初始化"><a class="markdownIt-Anchor" href="#一-初始化"></a> 一、初始化</h2><p>按照官方的步骤走，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装node</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装weex-toolkit</span></span><br><span class="line">npm install weex-toolkit -g</span><br><span class="line"><span class="meta">#</span><span class="bash">创建项目</span></span><br><span class="line">weex create awesome-app</span><br><span class="line"><span class="meta">#</span><span class="bash">开发</span></span><br><span class="line">cd awesome-app</span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>接着就遇到了语法问题，具体如下所示<br><a href="https://segmentfault.com/q/1010000013417243?_ea=3379756" target="_blank" rel="noopener">https://segmentfault.com/q/1010000013417243?_ea=3379756</a></p><p>待续。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: weex文档地址： &lt;a href=&quot;http://weex&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://weex&lt;/a&gt; &lt;a href=&quot;http://project.io/cn/guide/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;project.io/cn/guide/index.html&lt;/a&gt; weex的文档过于简单，加上js语法 &amp;amp; android &amp;amp; ios本身也有很多的问题，导致新接触weex，几乎步步是坑 在此记录一下weex的一些探索 一、初始化 按照官方的步骤走， 接着就遇阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="https://lossingdawn.top/categories/android/"/>
    
    
      <category term="android" scheme="https://lossingdawn.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Mongo去重统计</title>
    <link href="https://lossingdawn.top/p/cn/48103.html"/>
    <id>https://lossingdawn.top/p/cn/48103.html</id>
    <published>2017-11-10T02:50:00.000Z</published>
    <updated>2019-05-24T15:23:02.819Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 表名：parkUserCost id: patkId: userId: phone: costVal: 适合特定条件下，对某些字段进行去重筛选。（比如限定抢购） 第一种，使用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mi mathvariant="normal">操</mi><mi mathvariant="normal">作</mi><mi mathvariant="normal">符</mi><mi mathvariant="normal">。</mi></mrow><annotation encoding="application/x-tex">first操作符。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">操</span><span class="mord cjk_fallback">作</span><span class="mord cjk_fallback">符</span><span class="mord cjk_fallback">。</span></span></span></span>first 会把数组的第一个元素取出，作为一个对象。 第二种，使用$slice操作符。从数组的第几个开始阅读全文</p><a id="more"></a><p>表名：parkUserCost<br>id:<br>patkId:<br>userId:<br>phone:<br>costVal:<br>适合特定条件下，对某些字段进行去重筛选。（比如限定抢购）</p><p>第一种，使用(first操作符。)first 会把数组的第一个元素取出，作为一个对象。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 第一种（可转java版本）</span><br><span class="line">db.getCollection(<span class="string">'parkUserCost'</span>).aggregate([</span><br><span class="line">   &#123;<span class="string">"$match"</span> : &#123;</span><br><span class="line">      <span class="string">"$and"</span> : [</span><br><span class="line">          // &#123;<span class="string">"name"</span> : <span class="string">"1640"</span>&#125; // 筛选条件</span><br><span class="line">           ]</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#123;<span class="string">"$group"</span> : &#123;</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"$phone"</span>,</span><br><span class="line">        <span class="string">"val"</span> : &#123;<span class="string">"$first"</span> :  <span class="string">"$costVal"</span> &#125;,</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">    &#123;<span class="string">"$group"</span> : &#123;</span><br><span class="line">         <span class="string">"_id"</span> : &#123;&#125;,</span><br><span class="line">        <span class="string">"totalVal"</span> :&#123;<span class="string">"$sum"</span> : <span class="string">"$val"</span>&#125;</span><br><span class="line">         &#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>第二种，使用$slice操作符。从数组的第几个开始，截取几个，保存到数组</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 第二种</span><br><span class="line">db.getCollection(<span class="string">'parkUserCost'</span>).aggregate([</span><br><span class="line">   &#123;<span class="string">"$match"</span> : &#123;</span><br><span class="line">      <span class="string">"$and"</span> : [</span><br><span class="line">          // &#123;<span class="string">"name"</span> : <span class="string">"1640"</span>&#125; // 筛选条件</span><br><span class="line">           ]</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#123;<span class="string">"$group"</span> : &#123;</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"$phone"</span>,</span><br><span class="line">        <span class="string">"val"</span> : &#123;<span class="string">"$push"</span> :  <span class="string">"$costVal"</span> &#125;,</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">    &#123;<span class="string">"$project"</span> : &#123;</span><br><span class="line">         <span class="string">"val"</span> :&#123;<span class="string">"$sum"</span> :&#123;<span class="string">"$slice"</span> : [<span class="string">"$val"</span>, <span class="number">0</span>, <span class="number">1</span> ] &#125;&#125;</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">    &#123;<span class="string">"$group"</span> : &#123;</span><br><span class="line">         <span class="string">"_id"</span> : &#123;&#125;,</span><br><span class="line">        <span class="string">"totalVal"</span> :&#123;<span class="string">"$sum"</span> : <span class="string">"$val"</span>&#125;</span><br><span class="line">         &#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>第三种，使用$arrayElemAt，返回数组的第几个元素。序号的循环的，最后一个使用-1</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 第三种</span><br><span class="line">db.getCollection(<span class="string">'parkUserCost'</span>).aggregate([</span><br><span class="line">   &#123;<span class="string">"$match"</span> : &#123;</span><br><span class="line">      <span class="string">"$and"</span> : [</span><br><span class="line">          // &#123;<span class="string">"name"</span> : <span class="string">"1640"</span>&#125; // 筛选条件</span><br><span class="line">           ]</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#123;<span class="string">"$group"</span> : &#123;</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"$phone"</span>,</span><br><span class="line">        <span class="string">"val"</span> : &#123;<span class="string">"$push"</span> :  <span class="string">"$costVal"</span> &#125;,</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">    &#123;<span class="string">"$project"</span> : &#123;</span><br><span class="line">        <span class="string">"val"</span> :  &#123; <span class="string">"$arrayElemAt"</span> :[ <span class="string">"$val"</span> , <span class="number">0</span>] &#125;</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">    &#123;<span class="string">"$group"</span> : &#123;</span><br><span class="line">         <span class="string">"_id"</span> : &#123;&#125;,</span><br><span class="line">        <span class="string">"totalVal"</span> :&#123;<span class="string">"$sum"</span> : <span class="string">"$val"</span>&#125;</span><br><span class="line">         &#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>若要表中的全部字段，可使用$$ROOT获取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">'parkUserCost'</span>).aggregate([</span><br><span class="line">   &#123;<span class="string">"<span class="variable">$match</span>"</span> : &#123;</span><br><span class="line">      <span class="string">"<span class="variable">$and</span>"</span> : [</span><br><span class="line">          // &#123;<span class="string">"name"</span> : <span class="string">"1640"</span>&#125; // 筛选条件</span><br><span class="line">           ]</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#123;<span class="string">"<span class="variable">$group</span>"</span> : &#123;</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"<span class="variable">$phone</span>"</span>,</span><br><span class="line">        <span class="string">"item"</span>: &#123;<span class="string">"<span class="variable">$first</span>"</span>: <span class="string">"$<span class="variable">$ROOT</span>"</span>&#125;,</span><br><span class="line">        <span class="string">"val"</span> : &#123;<span class="string">"<span class="variable">$first</span>"</span> :  <span class="string">"<span class="variable">$costVal</span>"</span> &#125;,</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p><a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-tutorial.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 表名：parkUserCost id: patkId: userId: phone: costVal: 适合特定条件下，对某些字段进行去重筛选。（比如限定抢购） 第一种，使用&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;操&lt;/mi&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;作&lt;/mi&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;符&lt;/mi&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;。&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;first操作符。&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:.8888799999999999em;vertical-align:-.19444em&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:.10764em&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:.02778em&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mord cjk_fallback&quot;&gt;操&lt;/span&gt;&lt;span class=&quot;mord cjk_fallback&quot;&gt;作&lt;/span&gt;&lt;span class=&quot;mord cjk_fallback&quot;&gt;符&lt;/span&gt;&lt;span class=&quot;mord cjk_fallback&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;first 会把数组的第一个元素取出，作为一个对象。 第二种，使用$slice操作符。从数组的第几个开始阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="db" scheme="https://lossingdawn.top/categories/db/"/>
    
      <category term="mongo" scheme="https://lossingdawn.top/categories/db/mongo/"/>
    
    
      <category term="mongo" scheme="https://lossingdawn.top/tags/mongo/"/>
    
  </entry>
  
  <entry>
    <title>Backbone之路由锚点的替换</title>
    <link href="https://lossingdawn.top/p/cn/7347.html"/>
    <id>https://lossingdawn.top/p/cn/7347.html</id>
    <published>2017-09-26T02:10:00.000Z</published>
    <updated>2019-05-24T15:23:02.795Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 1、需求 由于项目一开始做的时候不甚完善，所有的网页没有路由功能，导致一些搜索结果在页面跳转之后，没有被记录下来，在页面跳转之后回退，得到的是页面最原始的结果，没有指定的搜索条件。最近项目的在完善这些小的细节，所以在此记录一下。 2、操作 由于项目的所有传参都是使用 ‘?’ 来标识的，而Backbo阅读全文</p><a id="more"></a><h3 id="1-需求"><a class="markdownIt-Anchor" href="#1-需求"></a> 1、需求</h3><p>由于项目一开始做的时候不甚完善，所有的网页没有路由功能，导致一些搜索结果在页面跳转之后，没有被记录下来，在页面跳转之后回退，得到的是页面最原始的结果，没有指定的搜索条件。最近项目的在完善这些小的细节，所以在此记录一下。</p><h3 id="2-操作"><a class="markdownIt-Anchor" href="#2-操作"></a> 2、操作</h3><p>由于项目的所有传参都是使用 ‘?’ 来标识的，而Backbone的路由是使用锚点 ‘/#’ 来的，为了兼容以前的做法，不得不去修改Backbone的源码，还好路由部分的源码不多</p><h3 id="21-修改backbone的源码版本133"><a class="markdownIt-Anchor" href="#21-修改backbone的源码版本133"></a> 2.1 修改Backbone的源码，版本1.3.3</h3><p>1）修改标识 ‘/#’ -&gt; ‘?’</p><p>把源代码中的字符串中的’/#‘修改为’?’，把单个的’/#‘修改为’?’</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pathStripper = /#.*$/;</span><br><span class="line"></span><br><span class="line">修改为：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pathStripper = /\?.*$/;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.location.replace(rootPath + <span class="string">'#'</span> + <span class="keyword">this</span>.getPath());</span><br><span class="line"></span><br><span class="line">修改为：</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.location.replace(rootPath + <span class="string">'?'</span> + <span class="keyword">this</span>.getPath());</span><br></pre></td></tr></table></figure><p>注：字符串中的?需要\来转义，字符不需要<br>2)修改锚点的路由设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">_updateHash: <span class="function"><span class="keyword">function</span>(<span class="params">location, fragment, replace</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (replace) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> href = location.href.replace(<span class="regexp">/(javascript:|\?).*$/</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">location.replace(href + <span class="string">'?'</span> + fragment);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Some browsers require that `hash` contains a leading #.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        location.hash = '?' + fragment;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> href = location.href.replace(<span class="regexp">/(javascript:|\?).*$/</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//          window.history.pushState(&#123;&#125;, 0, href + '?' + fragment);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.history.replaceState(&#123;&#125;, <span class="number">0</span>, href + <span class="string">'?'</span> + fragment);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：</p><p>location.hash是原始的修改参数方法，会替换url中’/#'以及后的所有内容</p><p>window.history.pushState可选目标方法，会增加一次历史记录，刷新页面</p><p>window.history.replaceState可选目标方法，会替换掉当前的页面记录，不刷新页面（目前选用方案）</p><h3 id="22-写一个util"><a class="markdownIt-Anchor" href="#22-写一个util"></a> 2.2 写一个Util</h3><p>写一个工具类用于Router的快速使用，和统一修改</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* RouterUtil.js</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> RouterUtil = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Backbone Router with a custom parameter extractor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Router = Backbone.Router.extend(&#123;</span><br><span class="line"></span><br><span class="line">params : <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">routes : &#123;</span><br><span class="line"></span><br><span class="line"><span class="string">"*actions"</span>: <span class="string">"defaultRoute"</span> <span class="comment">// 匹配 http://example.com/#anything-here</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">defaultRoute : <span class="function"><span class="keyword">function</span><span class="params">(params)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Router.params = params;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> routerUtil = &#123;</span><br><span class="line"></span><br><span class="line">web_router : <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">init()&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!routerUtil.web_router)&#123;</span><br><span class="line"></span><br><span class="line">routerUtil.web_router = <span class="keyword">new</span> Router;</span><br><span class="line"></span><br><span class="line">Backbone.history.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">getParam(cbFn)&#123;</span><br><span class="line"></span><br><span class="line">routerUtil.init();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取#之后的参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cbFn)&#123;</span><br><span class="line"></span><br><span class="line">cbFn(Router.params);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">route(returnUrl, cbFn)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态的调整 路由规则 例：topic/:pageno/:pagesize</span></span><br><span class="line"></span><br><span class="line">routerUtil.web_router.route(returnUrl,<span class="string">"page"</span>, cbFn)</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">start()&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用路由</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!Backbone.History.started)&#123;</span><br><span class="line"></span><br><span class="line">Backbone.history.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">stop()&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭路由</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Backbone.History.started)&#123;</span><br><span class="line"></span><br><span class="line">Backbone.history.stop();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">navigate(returnUrl)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 重构 ，路由导向</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此处根据自己的需求去构建参数拼接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//returnUrl为'?'之后的内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(returnUrl)&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">returnUrl = <span class="string">"searchType="</span> + SearchBoxUtil.searchType + <span class="string">"&amp;"</span> + SearchBoxUtil.formData;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">routerUtil.web_router.navigate(returnUrl, &#123;</span><br><span class="line"></span><br><span class="line">trigger: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> routerUtil;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="23-使用"><a class="markdownIt-Anchor" href="#23-使用"></a> 2.3 使用</h3><p>在js中引用的一些方法</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面的初始化</span></span><br><span class="line"></span><br><span class="line">initPagi : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">RouterUtil.getParam(<span class="function"><span class="keyword">function</span><span class="params">(params)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!params)&#123;</span><br><span class="line"></span><br><span class="line">params = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理参数</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询函数</span></span><br><span class="line"></span><br><span class="line">queryData : <span class="function"><span class="keyword">function</span><span class="params">(returnUrl,isInitSearchBox)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!returnUrl)&#123;</span><br><span class="line"></span><br><span class="line">returnUrl = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isInitSearchBox)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一次初始化查询</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非第一次初始化查询</span></span><br><span class="line"></span><br><span class="line">RouterUtil.navigate(returnUrl);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>菜鸟一枚，随便弄弄的一点代码，有更好的方案请赐教</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 1、需求 由于项目一开始做的时候不甚完善，所有的网页没有路由功能，导致一些搜索结果在页面跳转之后，没有被记录下来，在页面跳转之后回退，得到的是页面最原始的结果，没有指定的搜索条件。最近项目的在完善这些小的细节，所以在此记录一下。 2、操作 由于项目的所有传参都是使用 ‘?’ 来标识的，而Backbo阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://lossingdawn.top/categories/web/"/>
    
      <category term="jq" scheme="https://lossingdawn.top/categories/web/jq/"/>
    
    
      <category term="jq" scheme="https://lossingdawn.top/tags/jq/"/>
    
  </entry>
  
  <entry>
    <title>Ctrl Shift O失效</title>
    <link href="https://lossingdawn.top/p/cn/64985.html"/>
    <id>https://lossingdawn.top/p/cn/64985.html</id>
    <published>2017-08-25T02:24:00.000Z</published>
    <updated>2019-05-24T15:23:02.800Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 是这样的。preference -&gt; general -&gt; keys ,找到Organize Imports ,然后 在 “WHEN”里面 要选择 Editing JAVA SOURCE。 这个是最重要的阅读全文</p><a id="more"></a><p>是这样的。preference -&gt; general -&gt; keys ,找到Organize Imports ,然后 在 “WHEN”里面 要选择 Editing JAVA SOURCE。  <br>这个是最重要的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 是这样的。preference -&amp;gt; general -&amp;gt; keys ,找到Organize Imports ,然后 在 “WHEN”里面 要选择 Editing JAVA SOURCE。 这个是最重要的阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="ide" scheme="https://lossingdawn.top/categories/ide/"/>
    
      <category term="eclipse" scheme="https://lossingdawn.top/categories/ide/eclipse/"/>
    
    
      <category term="ide" scheme="https://lossingdawn.top/tags/ide/"/>
    
      <category term="eclipse" scheme="https://lossingdawn.top/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>findBugs英文代号的对照表</title>
    <link href="https://lossingdawn.top/p/cn/45196.html"/>
    <id>https://lossingdawn.top/p/cn/45196.html</id>
    <published>2017-04-28T03:09:00.000Z</published>
    <updated>2019-05-24T15:23:02.808Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: findBugs错误英文翻译rule.findbugs.IMSE_DONT_CATCH_IMSE.name=不良实践 - 捕获可疑IllegalMonitorStateException rule.findbugs.BX_BOXING_IMMEDIATELY_UNBOXED.name=性能 - 基本类型包装之后立刻解包 rule.findbugs.IJU_SETUP_NO_SUPER.name=…阅读全文</p><a id="more"></a><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br></pre></td><td class="code"><pre><span class="line">findBugs错误英文翻译 rule.findbugs.IMSE_DONT_CATCH_IMSE.<span class="attribute">name</span>=不良实践 - 捕获可疑IllegalMonitorStateException</span><br><span class="line">rule.findbugs.BX_BOXING_IMMEDIATELY_UNBOXED.<span class="attribute">name</span>=性能 - 基本类型包装之后立刻解包</span><br><span class="line">rule.findbugs.IJU_SETUP_NO_SUPER.<span class="attribute">name</span>=使用错误 - TestCase定义的setUp没有调用super.setUp()</span><br><span class="line">rule.findbugs.TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED.<span class="attribute">name</span>=使用错误 - 某个值使用了注解限制类型，但是这个限制永远不会发生</span><br><span class="line">rule.findbugs.TLW_TWO_LOCK_WAIT.<span class="attribute">name</span>=多线程错误 - 等待两个被持有的锁</span><br><span class="line">rule.findbugs.RV_01_TO_INT.<span class="attribute">name</span>=使用错误 - 0至1的随机数被当做整数0</span><br><span class="line">rule.findbugs.NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE.<span class="attribute">name</span>=高危 - 参数必须非<span class="literal">null</span>但是标记为可为<span class="literal">null</span></span><br><span class="line">rule.findbugs.RV_ABSOLUTE_VALUE_OF_RANDOM_INT.<span class="attribute">name</span>=使用错误 - 尝试计算32位随机整数的绝对值</span><br><span class="line">rule.findbugs.EC_INCOMPATIBLE_ARRAY_COMPARE.<span class="attribute">name</span>=使用错误 - 使用equals()比较不兼容的数组</span><br><span class="line">rule.findbugs.UL_UNRELEASED_LOCK_EXCEPTION_PATH.<span class="attribute">name</span>=多线程错误 - 方法没有在所有异常路径释放锁</span><br><span class="line">rule.findbugs.SE_NONSTATIC_SERIALVERSIONID.<span class="attribute">name</span>=不良实践 - serialVersionUID不是static的</span><br><span class="line">rule.findbugs.UCF_USELESS_CONTROL_FLOW.<span class="attribute">name</span>=高危 - 无用控制流</span><br><span class="line">rule.findbugs.BC_IMPOSSIBLE_CAST.<span class="attribute">name</span>=使用错误 - 不可能的转换</span><br><span class="line">rule.findbugs.XSS_REQUEST_PARAMETER_TO_SEND_ERROR.<span class="attribute">name</span>=安全风险 - servlet的反射导致跨站脚本漏洞</span><br><span class="line">rule.findbugs.DM_NEW_FOR_GETCLASS.<span class="attribute">name</span>=性能 - 仅为了获得一个方法就创建了一个对象</span><br><span class="line">rule.findbugs.OBL_UNSATISFIED_OBLIGATION.<span class="attribute">name</span>=试验 - 方法可能在清理流或资源时失败</span><br><span class="line">rule.findbugs.UW_UNCOND_WAIT.<span class="attribute">name</span>=多线程错误 - 无条件等待</span><br><span class="line">rule.findbugs.DLS_DEAD_LOCAL_STORE_OF_NULL.<span class="attribute">name</span>=高危 - 把<span class="literal">null</span>设置给不会用到的局部变量</span><br><span class="line">rule.findbugs.NM_CLASS_NAMING_CONVENTION.<span class="attribute">name</span>=类名应该以大写字母开头</span><br><span class="line">rule.findbugs.RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN.<span class="attribute">name</span>=使用错误 - 怀疑对两个布尔值的引用进行比较</span><br><span class="line">rule.findbugs.MWN_MISMATCHED_NOTIFY.<span class="attribute">name</span>=多线程错误- 不匹配的notify()</span><br><span class="line">rule.findbugs.NM_VERY_CONFUSING.<span class="attribute">name</span>=错误 - 非常容易迷惑的方法名</span><br><span class="line">rule.findbugs.FI_NULLIFY_SUPER.<span class="attribute">name</span>=不良实践 - 空Finalizer禁用了超类的finalizer</span><br><span class="line">rule.findbugs.MTIA_SUSPECT_STRUTS_INSTANCE_FIELD.<span class="attribute">name</span>=高危 - 继承了struts Action的类使用了实例变量</span><br><span class="line">rule.findbugs.DM_STRING_CTOR.<span class="attribute">name</span>=性能 - 方法调用了效率很低的new String(String)构造方法</span><br><span class="line">rule.findbugs.STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE.<span class="attribute">name</span>=多线程错误 - 调用静态DateFormat</span><br><span class="line">rule.findbugs.NP_NULL_PARAM_DEREF_NONVIRTUAL.<span class="attribute">name</span>=使用错误 - 非虚拟方法调用向非空参数传入了<span class="literal">null</span></span><br><span class="line">rule.findbugs.FI_EMPTY.<span class="attribute">name</span>=不良实践 - 应该删除空的finalizer</span><br><span class="line">rule.findbugs.CD_CIRCULAR_DEPENDENCY.<span class="attribute">name</span>=试验 - 类间存在循环引用</span><br><span class="line">rule.findbugs.EC_UNRELATED_TYPES.<span class="attribute">name</span>=使用错误 - 使用equals()比较不同类型</span><br><span class="line">rule.findbugs.EI_EXPOSE_STATIC_REP2.<span class="attribute">name</span>=恶意代码漏洞 - 把可变对象保存到静态字段中可能会暴露内部静态状态</span><br><span class="line">rule.findbugs.DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY.<span class="attribute">name</span>=错误 - 对数组执行toString</span><br><span class="line">rule.findbugs.SIC_INNER_SHOULD_BE_STATIC_ANON.<span class="attribute">name</span>=性能 - 可以重构成一个静态内部类</span><br><span class="line">rule.findbugs.STI_INTERRUPTED_ON_UNKNOWNTHREAD.<span class="attribute">name</span>=错误 - 在thread实例上调用了静态Thread.interrupted()方法</span><br><span class="line">rule.findbugs.CN_IDIOM_NO_SUPER_CALL.<span class="attribute">name</span>=不良实践 - clone方法没有调用super.clone()</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_BAD_ARGUMENT.<span class="attribute">name</span>=错误用法 - 格式化字符串占位符与传入的参数不匹配</span><br><span class="line">rule.findbugs.EQ_DOESNT_OVERRIDE_EQUALS.<span class="attribute">name</span>=高危 - 类没有覆盖父类的equals方法</span><br><span class="line">rule.findbugs.BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY.<span class="attribute">name</span>=错误用法 - 集合转换为数组元素时发生的类型转换错误</span><br><span class="line">rule.findbugs.SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION.<span class="attribute">name</span>=不良实践 - 类是可扩展的，但是没有提供无参数的构造方法</span><br><span class="line">rule.findbugs.TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK.<span class="attribute">name</span>=错误用法 - 数值需要类型标示，但是却标记为未知</span><br><span class="line">rule.findbugs.SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS.<span class="attribute">name</span>=性能 - 可以筹够成一个静态内部类</span><br><span class="line">rule.findbugs.EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS.<span class="attribute">name</span>=不良实践 - equals检测不兼容的参数操作</span><br><span class="line">rule.findbugs.RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED.<span class="attribute">name</span>=错误用法 - 忽略了putIfAbsent的返回值，传递给putIfAbsent的值被重用</span><br><span class="line">rule.findbugs.STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE.<span class="attribute">name</span>=多线程错误 - 调用静态Calendar</span><br><span class="line">rule.findbugs.MS_CANNOT_BE_FINAL.<span class="attribute">name</span>=恶意代码漏洞 - 字段不是final的，不能防止恶意代码的攻击</span><br><span class="line">rule.findbugs.IS_INCONSISTENT_SYNC.<span class="attribute">name</span>=多线程错误 - 不一致的同步</span><br><span class="line">rule.findbugs.SE_NO_SERIALVERSIONID.<span class="attribute">name</span>=不良实践 - 类是可序列化的，但是没有定义serialVersionUID</span><br><span class="line">rule.findbugs.EI_EXPOSE_REP2.<span class="attribute">name</span>=恶意代码漏洞 - 可能暴露内部实现，通过与可变对象引用协作</span><br><span class="line">rule.findbugs.NM_METHOD_CONSTRUCTOR_CONFUSION.<span class="attribute">name</span>=错误用法 - 明显的方法/构造方法混淆</span><br><span class="line">rule.findbugs.ICAST_INTEGER_MULTIPLY_CAST_TO_LONG.<span class="attribute">name</span>=高危 - 整形乘法的结果转换为long型</span><br><span class="line">rule.findbugs.QF_QUESTIONABLE_FOR_LOOP.<span class="attribute">name</span>=高危 - <span class="keyword">for</span>循环中存在复杂，微妙或者错误的自增</span><br><span class="line">rule.findbugs.DLS_DEAD_STORE_OF_CLASS_LITERAL.<span class="attribute">name</span>=错误用法 - 类中保存了无用字符</span><br><span class="line">rule.findbugs.NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER.<span class="attribute">name</span>=不良实践 - 使用了未来java版本中成为关键字的标识</span><br><span class="line">rule.findbugs.BC_VACUOUS_INSTANCEOF.<span class="attribute">name</span>=高危 - instanceof会一直返回<span class="literal">true</span></span><br><span class="line">rule.findbugs.INT_VACUOUS_BIT_OPERATION.<span class="attribute">name</span>=高危 - 在整形上进行位操作时有一些位上出现空洞</span><br><span class="line">rule.findbugs.NP_NULL_INSTANCEOF.<span class="attribute">name</span>=错误用法 - 一个已知的<span class="literal">null</span>值被检测它是否是一个类型的实例</span><br><span class="line">rule.findbugs.SIC_THREADLOCAL_DEADLY_EMBRACE.<span class="attribute">name</span>=错误用法 - 非静态内部类和ThreadLocal的致命结合</span><br><span class="line">rule.findbugs.EQ_UNUSUAL.<span class="attribute">name</span>=高危 - 罕见的equals方法</span><br><span class="line">rule.findbugs.IJU_NO_TESTS.<span class="attribute">name</span>=错误用法 - TestCase没有任何测试</span><br><span class="line">rule.findbugs.EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC.<span class="attribute">name</span>=错误用法 - equals方法覆盖了父类的equals可能功能不符</span><br><span class="line">rule.findbugs.XFB_XML_FACTORY_BYPASS.<span class="attribute">name</span>=高危 - 方法直接调用了xml接口的一个具体实现</span><br><span class="line">rule.findbugs.SWL_SLEEP_WITH_LOCK_HELD.<span class="attribute">name</span>=多线程错误 - 方法在获得锁时调用了Thread.sleep()</span><br><span class="line">rule.findbugs.CN_IDIOM.<span class="attribute">name</span>=不良实践 - 类实现了Cloneable ，但是没有定义或使用clone方法</span><br><span class="line">rule.findbugs.WA_AWAIT_NOT_IN_LOOP.<span class="attribute">name</span>=多线程错误 - 未在循环中使用的Condition.await()</span><br><span class="line">rule.findbugs.DM_FP_NUMBER_CTOR.<span class="attribute">name</span>=性能 - 方法调用了低效的浮点书构造方法；应该使用静态的valueOf代替</span><br><span class="line">rule.findbugs.SF_SWITCH_NO_DEFAULT.<span class="attribute">name</span>=Switch语句中没有包含default</span><br><span class="line">rule.findbugs.NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE.<span class="attribute">name</span>=高危 - 调用返回返回值可能出现<span class="literal">null</span>值</span><br><span class="line">rule.findbugs.NP_CLONE_COULD_RETURN_NULL.<span class="attribute">name</span>=不良实践 - Clone方法可能返回<span class="literal">null</span></span><br><span class="line">rule.findbugs.MS_OOI_PKGPROTECT.<span class="attribute">name</span>=恶意代码漏洞 - 属性应该从接口中移除并将访问权限设置为包保护</span><br><span class="line">rule.findbugs.DM_BOXED_PRIMITIVE_TOSTRING.<span class="attribute">name</span>=性能 - 方法使用了装箱的基本类型只为了调用toString</span><br><span class="line">rule.findbugs.EQ_ABSTRACT_SELF.<span class="attribute">name</span>=不良实践 - 抽象类定义了协变的equals方法</span><br><span class="line">rule.findbugs.DM_STRING_TOSTRING.<span class="attribute">name</span>=性能 - 方法调用了String的toString()方法</span><br><span class="line">rule.findbugs.SE_METHOD_MUST_BE_PRIVATE.<span class="attribute">name</span>=错误用法 - 方法必须是private的为了让序列化正常工作</span><br><span class="line">rule.findbugs.DL_SYNCHRONIZATION_ON_BOOLEAN.<span class="attribute">name</span>=多线程错误 - 在Boolean上使用同步可能导致死锁</span><br><span class="line">rule.findbugs.UWF_UNWRITTEN_FIELD.<span class="attribute">name</span>=错误用法 - 未赋值属性</span><br><span class="line">rule.findbugs.IS2_INCONSISTENT_SYNC.<span class="attribute">name</span>=多线程错误 - 不一致的同步</span><br><span class="line">rule.findbugs.IM_AVERAGE_COMPUTATION_COULD_OVERFLOW.<span class="attribute">name</span>=高危 - 计算平均值可能溢出</span><br><span class="line">rule.findbugs.BIT_SIGNED_CHECK_HIGH_BIT.<span class="attribute">name</span>=错误用法 - 检查位运算的符号</span><br><span class="line">rule.findbugs.FL_MATH_USING_FLOAT_PRECISION.<span class="attribute">name</span>=错误用法 - 方法进行数学运算时使用了浮点数的精度</span><br><span class="line">rule.findbugs.WS_WRITEOBJECT_SYNC.<span class="attribute">name</span>=多线程错误 - 类的writeObject()方法是同步的，但是没有做其他事情</span><br><span class="line">rule.findbugs.RV_RETURN_VALUE_IGNORED.<span class="attribute">name</span>=错误用法 - 方法忽略了返回值</span><br><span class="line">rule.findbugs.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE.<span class="attribute">name</span>=安全风险 - 非常量的字符串传递给方法执行SQL语句</span><br><span class="line">rule.findbugs.JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS.<span class="attribute">name</span>=不良实践 - 不可变的类的属性应该是final</span><br><span class="line">rule.findbugs.AM_CREATES_EMPTY_ZIP_FILE_ENTRY.<span class="attribute">name</span>=不良实践 - 创建了一个空的zip文件的入口</span><br><span class="line">rule.findbugs.DM_NEXTINT_VIA_NEXTDOUBLE.<span class="attribute">name</span>=性能 - 使用Random的nextInt方法来获得一个随机整数，而不是nextDouble</span><br><span class="line">rule.findbugs.UI_INHERITANCE_UNSAFE_GETRESOURCE.<span class="attribute">name</span>=不良实践 - 如果类被扩展，GetResource的使用可能就是不安全的</span><br><span class="line">rule.findbugs.SIO_SUPERFLUOUS_INSTANCEOF.<span class="attribute">name</span>=错误用法 - 不必要的类型检测使用instanceof操作符</span><br><span class="line">rule.findbugs.EQ_OTHER_NO_OBJECT.<span class="attribute">name</span>=错误用法 - equals()方法定义，但是没有覆盖equals(Object)</span><br><span class="line">rule.findbugs.USM_USELESS_ABSTRACT_METHOD.<span class="attribute">name</span>=试验 - 抽象方法已经在实现的接口中定义了</span><br><span class="line">rule.findbugs.MTIA_SUSPECT_SERVLET_INSTANCE_FIELD.<span class="attribute">name</span>=高危 - 扩展Servlet的类使用了实例变量</span><br><span class="line">rule.findbugs.DM_USELESS_THREAD.<span class="attribute">name</span>=多线程错误 - 使用默认的空run方法创建了一个线程</span><br><span class="line">rule.findbugs.ML_SYNC_ON_UPDATED_FIELD.<span class="attribute">name</span>=多线程错误 - 方法在一个修改了的属性上进行了同步</span><br><span class="line">rule.findbugs.CO_SELF_NO_OBJECT.<span class="attribute">name</span>=不良实践 - 协变的compareTo()定义</span><br><span class="line">rule.findbugs.BC_UNCONFIRMED_CAST.<span class="attribute">name</span>=高危 - 未检查/未证实的类型转换</span><br><span class="line">rule.findbugs.FI_FINALIZER_NULLS_FIELDS.<span class="attribute">name</span>=不良实践 - Finalizer空属性</span><br><span class="line">rule.findbugs.BIT_AND.<span class="attribute">name</span>=错误用法 - 不兼容的位掩码(BIT_AND)</span><br><span class="line">rule.findbugs.FE_FLOATING_POINT_EQUALITY.<span class="attribute">name</span>=高危 - 测试浮点数相等</span><br><span class="line">rule.findbugs.TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK.<span class="attribute">name</span>=错误用法 - 值不要求有类型标示，但是标记为未知</span><br><span class="line">rule.findbugs.NP_NULL_PARAM_DEREF.<span class="attribute">name</span>=错误用法 - 方法调用把<span class="literal">null</span>传递给一个非<span class="literal">null</span>参数</span><br><span class="line">rule.findbugs.FB_MISSING_EXPECTED_WARNING.<span class="attribute">name</span>=试验 - findbugs丢失了期待或需要的警告</span><br><span class="line">rule.findbugs.DMI_INVOKING_HASHCODE_ON_ARRAY.<span class="attribute">name</span>=错误用法 - 在数组上调用了hashCode</span><br><span class="line">rule.findbugs.QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT.<span class="attribute">name</span>=错误用法 - 方法在布尔表达式中分配了boolean文字</span><br><span class="line">rule.findbugs.SA_FIELD_SELF_COMPARISON.<span class="attribute">name</span>=错误用法 - 属性自己与自己进行了比较</span><br><span class="line">rule.findbugs.UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR.<span class="attribute">name</span>=错误用法 - 父类的构造方法调用未初始化属性的方法</span><br><span class="line">rule.findbugs.ES_COMPARING_PARAMETER_STRING_WITH_EQ.<span class="attribute">name</span>=不良实践 - 比较字符串参数使用了 == 或 !=</span><br><span class="line">rule.findbugs.INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE.<span class="attribute">name</span>=错误用法 - 错误比较非负值与负数</span><br><span class="line">rule.findbugs.INT_BAD_COMPARISON_WITH_SIGNED_BYTE.<span class="attribute">name</span>=错误用法 - 错误比较带符号的byte</span><br><span class="line">rule.findbugs.IO_APPENDING_TO_OBJECT_OUTPUT_STREAM.<span class="attribute">name</span>=错误用法 - 尝试向一个对象输出流添加信息</span><br><span class="line">rule.findbugs.FI_MISSING_SUPER_CALL.<span class="attribute">name</span>=不良实践 - Finalizer没有调用父类的finalizer</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED.<span class="attribute">name</span>=错误用法 - 传递了多余实际使用的格式化字符串的参数</span><br><span class="line">rule.findbugs.HE_EQUALS_USE_HASHCODE.<span class="attribute">name</span>=不良实践 - 类定义了equals()，但使用了Object.hashCode()</span><br><span class="line">rule.findbugs.IJU_BAD_SUITE_METHOD.<span class="attribute">name</span>=错误用法 - TestCase声明了一个错误的suite方法</span><br><span class="line">rule.findbugs.DMI_CONSTANT_DB_PASSWORD.<span class="attribute">name</span>=安全风险 - 硬编码了数据库密码</span><br><span class="line">rule.findbugs.REC_CATCH_EXCEPTION.<span class="attribute">name</span>=高危 - 捕获了没有抛出的异常</span><br><span class="line">rule.findbugs.PS_PUBLIC_SEMAPHORES.<span class="attribute">name</span>=高危 - 类在公用接口中暴露了同步和信号</span><br><span class="line">rule.findbugs.EC_UNRELATED_INTERFACES.<span class="attribute">name</span>=错误用法 - 调用equals()比较不同的接口类型</span><br><span class="line">rule.findbugs.UCF_USELESS_CONTROL_FLOW_NEXT_LINE.<span class="attribute">name</span>=错误用法 - 执行到下一行的无用流程控制</span><br><span class="line">rule.findbugs.LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE.<span class="attribute">name</span>=试验 - OpenJDK中存在潜在的丢失logger的风险，因为弱引用</span><br><span class="line">rule.findbugs.NP_UNWRITTEN_FIELD.<span class="attribute">name</span>=错误用法 - 读取未初始化的属性</span><br><span class="line">rule.findbugs.DMI_UNSUPPORTED_METHOD.<span class="attribute">name</span>=高危 - 调用不支持的方法</span><br><span class="line">rule.findbugs.RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE.<span class="attribute">name</span>=高危 - 重复比较非空值和<span class="literal">null</span></span><br><span class="line">rule.findbugs.EC_BAD_ARRAY_COMPARE.<span class="attribute">name</span>=错误用法 - 调用equals()，与==效果一样</span><br><span class="line">rule.findbugs.EI_EXPOSE_REP.<span class="attribute">name</span>=恶意代码漏洞 - 可能通过返回一个可变对象的引用暴露了内部实现</span><br><span class="line">rule.findbugs.NP_DEREFERENCE_OF_READLINE_VALUE.<span class="attribute">name</span>=高危 - 没有判断readLine()的结果是否为空</span><br><span class="line">rule.findbugs.UPM_UNCALLED_PRIVATE_METHOD.<span class="attribute">name</span>=性能 - 从未用到的私有方法</span><br><span class="line">rule.findbugs.NP_NULL_ON_SOME_PATH.<span class="attribute">name</span>=错误用法 - 可能出现空指针引用</span><br><span class="line">rule.findbugs.NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT.<span class="attribute">name</span>=不良实践 - equals()方法没有检测<span class="literal">null</span>参数</span><br><span class="line">rule.findbugs.EC_NULL_ARG.<span class="attribute">name</span>=错误用法 - 使用空参数调用equals()</span><br><span class="line">rule.findbugs.SE_BAD_FIELD_STORE.<span class="attribute">name</span>=不良实践 - 非序列化值保存在序列化类的实例变量中</span><br><span class="line">rule.findbugs.VO_VOLATILE_REFERENCE_TO_ARRAY.<span class="attribute">name</span>=多线程错误 - 数组的volatile引用不会把数组元素也当做volatile来引用</span><br><span class="line">rule.findbugs.NP_SYNC_AND_NULL_CHECK_FIELD.<span class="attribute">name</span>=多线程错误 - 同步和空值检测发生在同一个属性上</span><br><span class="line">rule.findbugs.DM_EXIT.<span class="attribute">name</span>=不良实践 - 方法调用了System.exit(<span class="built_in">..</span>.)</span><br><span class="line">rule.findbugs.RC_REF_COMPARISON.<span class="attribute">name</span>=不良实践 - 怀疑进行了引用比较</span><br><span class="line">rule.findbugs.SE_NO_SUITABLE_CONSTRUCTOR.<span class="attribute">name</span>=不良实践 - 类是可序列化的，但是父类没有定义无参数构造方法</span><br><span class="line">rule.findbugs.DC_DOUBLECHECK.<span class="attribute">name</span>=多线程错误 - 可能对属性进行了双重检测</span><br><span class="line">rule.findbugs.DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT.<span class="attribute">name</span>=错误用法 - 在int上调用了Double.longBitsToDouble</span><br><span class="line">rule.findbugs.RpC_REPEATED_CONDITIONAL_TEST.<span class="attribute">name</span>=错误用法 - 重复判断条件</span><br><span class="line">rule.findbugs.WMI_WRONG_MAP_ITERATOR.<span class="attribute">name</span>=性能 - keySet迭代是低效的，使用entrySet代替</span><br><span class="line">rule.findbugs.DLS_DEAD_LOCAL_STORE.<span class="attribute">name</span>=高危 - 未用的局部变量</span><br><span class="line">rule.findbugs.INT_BAD_REM_BY_1.<span class="attribute">name</span>=错误用法 - 整数剩余模1</span><br><span class="line">rule.findbugs.RV_RETURN_VALUE_IGNORED_BAD_PRACTICE.<span class="attribute">name</span>=不良实践 - 方法忽略异常返回值</span><br><span class="line">rule.findbugs.SA_LOCAL_SELF_ASSIGNMENT.<span class="attribute">name</span>=高危 - 局部变量的自我赋值</span><br><span class="line">rule.findbugs.MS_SHOULD_BE_FINAL.<span class="attribute">name</span>=恶意代码漏洞 - 属性不是final，但是应该设置成final</span><br><span class="line">rule.findbugs.SIC_INNER_SHOULD_BE_STATIC.<span class="attribute">name</span>=性能 - 应该是一个静态内部类</span><br><span class="line">rule.findbugs.NP_GUARANTEED_DEREF.<span class="attribute">name</span>=错误用法 - <span class="literal">null</span>值一定会被调用</span><br><span class="line">rule.findbugs.SE_READ_RESOLVE_MUST_RETURN_OBJECT.<span class="attribute">name</span>=不良实践 - readResolve方法必须返回Object</span><br><span class="line">rule.findbugs.NP_LOAD_OF_KNOWN_NULL_VALUE.<span class="attribute">name</span>=高危 - 加载了已知的<span class="literal">null</span>值</span><br><span class="line">rule.findbugs.BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION.<span class="attribute">name</span>=性能 - 基本数据被装箱又被拆箱</span><br><span class="line">rule.findbugs.CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE.<span class="attribute">name</span>=不良实践 - 类定义了clone()但没有实现Cloneable</span><br><span class="line">rule.findbugs.CO_ABSTRACT_SELF.<span class="attribute">name</span>=不良实践 - 抽象类定义了协变的compareTo()方法</span><br><span class="line">rule.findbugs.BAC_BAD_APPLET_CONSTRUCTOR.<span class="attribute">name</span>=试验 - 错误的Applet构造方法依赖未初始化的AppletStub</span><br><span class="line">rule.findbugs.EQ_GETCLASS_AND_CLASS_CONSTANT.<span class="attribute">name</span>=不良实践 - equals方法因为子类失败</span><br><span class="line">rule.findbugs.DB_DUPLICATE_SWITCH_CLAUSES.<span class="attribute">name</span>=高危 - 在两个switch语句中使用了相同的代码</span><br><span class="line">rule.findbugs.DB_DUPLICATE_BRANCHES.<span class="attribute">name</span>=高危 - 在两个分支中使用了相同的代码</span><br><span class="line">rule.findbugs.UOE_USE_OBJECT_EQUALS.<span class="attribute">name</span>=试验 - 在final类上调用了equals，但是没有覆盖Object的equals方法</span><br><span class="line">rule.findbugs.FI_USELESS.<span class="attribute">name</span>=不良实践 - Finalizer除了调用父类的finalizer以外什么也没做</span><br><span class="line">rule.findbugs.NP_ALWAYS_NULL.<span class="attribute">name</span>=错误用法 - 调用了<span class="literal">null</span>指针</span><br><span class="line">rule.findbugs.DMI_VACUOUS_SELF_COLLECTION_CALL.<span class="attribute">name</span>=错误用法 - 集合的调用不能被感知</span><br><span class="line">rule.findbugs.DLS_DEAD_LOCAL_STORE_IN_RETURN.<span class="attribute">name</span>=错误用法 - 返回语句中的无用的赋值</span><br><span class="line">rule.findbugs.IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD.<span class="attribute">name</span>=错误用法 - 在run方法中的JUnit检验不能报告给JUnit</span><br><span class="line">rule.findbugs.DMI_EMPTY_DB_PASSWORD.<span class="attribute">name</span>=安全风险 - 空的数据库密码</span><br><span class="line">rule.findbugs.DM_BOOLEAN_CTOR.<span class="attribute">name</span>=性能 - 方法调用了低效的Boolean构造方法；使用Boolean.valueOf(<span class="built_in">..</span>.)代替</span><br><span class="line">rule.findbugs.BC_IMPOSSIBLE_DOWNCAST.<span class="attribute">name</span>=错误用法 - 不可能转型</span><br><span class="line">rule.findbugs.BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS.<span class="attribute">name</span>=不良实践 - Equals方法不应该假设任何有关参数类型的事宜</span><br><span class="line">rule.findbugs.RV_EXCEPTION_NOT_THROWN.<span class="attribute">name</span>=错误用法 - 异常创建后就丢弃了，没有抛出</span><br><span class="line">rule.findbugs.VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG.<span class="attribute">name</span>=错误用法 - 基本类型数组传递给一个期待可变对象类型参数的方法</span><br><span class="line">rule.findbugs.LI_LAZY_INIT_UPDATE_STATIC.<span class="attribute">name</span>=多线程错误 - 错误的延迟初始化和更新静态属性</span><br><span class="line">rule.findbugs.SA_FIELD_SELF_ASSIGNMENT.<span class="attribute">name</span>=错误用法 - 属性自身赋值</span><br><span class="line">rule.findbugs.EQ_ALWAYS_FALSE.<span class="attribute">name</span>=错误用法 - equals方法一直返回<span class="literal">false</span></span><br><span class="line">rule.findbugs.DMI_RANDOM_USED_ONLY_ONCE.<span class="attribute">name</span>=不良实践 - Random对象创建后只用了一次</span><br><span class="line">rule.findbugs.NM_CLASS_NOT_EXCEPTION.<span class="attribute">name</span>=不良实践 - Class没有继承Exception，虽然名字像一个异常</span><br><span class="line">rule.findbugs.SA_LOCAL_DOUBLE_ASSIGNMENT.<span class="attribute">name</span>=高危 - 给局部变量双重赋值</span><br><span class="line">rule.findbugs.NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS.<span class="attribute">name</span>=错误用法 - 方法调用传递<span class="literal">null</span>给非空参数 (ALL_TARGETS_DANGEROUS)</span><br><span class="line">rule.findbugs.NP_TOSTRING_COULD_RETURN_NULL.<span class="attribute">name</span>=不良实践 - toString方法可能返回<span class="literal">null</span></span><br><span class="line">rule.findbugs.BC_BAD_CAST_TO_ABSTRACT_COLLECTION.<span class="attribute">name</span>=高危 - 转换成抽象集合值得怀疑</span><br><span class="line">rule.findbugs.NM_LCASE_HASHCODE.<span class="attribute">name</span>=类定义了hashcode(); 应该是hashCode()吧？</span><br><span class="line">rule.findbugs.RU_INVOKE_RUN.<span class="attribute">name</span>=多线程错误 - 在线程中调用了run（你的意思是再启动一次么？）</span><br><span class="line">rule.findbugs.DMI_INVOKING_TOSTRING_ON_ARRAY.<span class="attribute">name</span>=错误用法 - 调用了数组的toString</span><br><span class="line">rule.findbugs.NM_METHOD_NAMING_CONVENTION.<span class="attribute">name</span>=方法名应该以小写字母开头</span><br><span class="line">rule.findbugs.RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES.<span class="attribute">name</span>=高危 - 重复比较两个<span class="literal">null</span>值</span><br><span class="line">rule.findbugs.SA_LOCAL_SELF_COMPUTATION.<span class="attribute">name</span>=错误用法 - 对一个变量进行无意义的自我计算 (比如 x &amp; x)</span><br><span class="line">rule.findbugs.MS_MUTABLE_HASHTABLE.<span class="attribute">name</span>=恶意代码漏洞 - 属性是可变的Hashtable</span><br><span class="line">rule.findbugs.RV_DONT_JUST_NULL_CHECK_READLINE.<span class="attribute">name</span>=高危 - 方法丢掉了readLine的结果，在检测它是非空之后。</span><br><span class="line">rule.findbugs.ES_COMPARING_STRINGS_WITH_EQ.<span class="attribute">name</span>=不良实践 - 使用== 或 !=比较String</span><br><span class="line">rule.findbugs.DL_SYNCHRONIZATION_ON_SHARED_CONSTANT.<span class="attribute">name</span>=多线程错误 - 同步内部String可能导致死锁</span><br><span class="line">rule.findbugs.MF_METHOD_MASKS_FIELD.<span class="attribute">name</span>=错误用法 - 方法定义了一个变量，与实例变量同名。</span><br><span class="line">rule.findbugs.EQ_SELF_USE_OBJECT.<span class="attribute">name</span>=错误用法 - 协变equals()方法定义，继承了Object.equals(Object)</span><br><span class="line">rule.findbugs.ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND.<span class="attribute">name</span>=错误用法 - int值转换成float，然后传递给Math.round</span><br><span class="line">rule.findbugs.GC_UNRELATED_TYPES.<span class="attribute">name</span>=错误用法 - 泛型参数与方法参数没有相互关系</span><br><span class="line">rule.findbugs.BC_IMPOSSIBLE_INSTANCEOF.<span class="attribute">name</span>=错误用法 - instanceof一直返回<span class="literal">false</span></span><br><span class="line">rule.findbugs.SBSC_USE_STRINGBUFFER_CONCATENATION.<span class="attribute">name</span>=性能 - 方法在循环中使用+进行字符串拼接</span><br><span class="line">rule.findbugs.ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL.<span class="attribute">name</span>=错误用法 - int转换成double，然后传递给Math.ceil</span><br><span class="line">rule.findbugs.UG_SYNC_SET_UNSYNC_GET.<span class="attribute">name</span>=多线程错误 - 未同步的getter方法，同步的setter方法</span><br><span class="line">rule.findbugs.RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION.<span class="attribute">name</span>=错误用法 - 非法的正则表达式</span><br><span class="line">rule.findbugs.SA_FIELD_SELF_COMPUTATION.<span class="attribute">name</span>=错误用法 - 无意义的自我计算 (比如 x &amp; x)</span><br><span class="line">rule.findbugs.DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS.<span class="attribute">name</span>=错误用法 - 创建了没有任何线程的ScheduledThreadPoolExecutor</span><br><span class="line">rule.findbugs.DMI_USELESS_SUBSTRING.<span class="attribute">name</span>=高危 - 调用substring(0)会返回原值</span><br><span class="line">rule.findbugs.IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD.<span class="attribute">name</span>=高危 - 被继承的或外部的方法的模棱两可的调用</span><br><span class="line">rule.findbugs.OS_OPEN_STREAM.<span class="attribute">name</span>=不良实践 - 方法可能在关闭流时失败</span><br><span class="line">rule.findbugs.HE_INHERITS_EQUALS_USE_HASHCODE.<span class="attribute">name</span>=不良实践 - 类继承了equals()，但使用了Object.hashCode()</span><br><span class="line">rule.findbugs.SE_NONFINAL_SERIALVERSIONID.<span class="attribute">name</span>=不良实践 - serialVersionUID不是final的</span><br><span class="line">rule.findbugs.EQ_SELF_NO_OBJECT.<span class="attribute">name</span>=不良实践 - 协变equals()方法定义</span><br><span class="line">rule.findbugs.SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH.<span class="attribute">name</span>=由于switch语句导致的无用存储</span><br><span class="line">rule.findbugs.SW_SWING_METHODS_INVOKED_IN_SWING_THREAD.<span class="attribute">name</span>=不良实践 - 某些swing方法需要在swing线程中调用</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_ILLEGAL.<span class="attribute">name</span>=错误用法 - 非法的格式化字符串</span><br><span class="line">rule.findbugs.DM_NUMBER_CTOR.<span class="attribute">name</span>=性能 - 方法调用低效的数字构造方法;使用静态valueOf代替</span><br><span class="line">rule.findbugs.RV_REM_OF_RANDOM_INT.<span class="attribute">name</span>=高危 - 其余32位带符号随机整数</span><br><span class="line">rule.findbugs.EQ_COMPARING_CLASS_NAMES.<span class="attribute">name</span>=错误用法 - equals方法比较类名而不是比较类</span><br><span class="line">rule.findbugs.ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD.<span class="attribute">name</span>=高危 - 通过一个实例方法更新静态属性</span><br><span class="line">rule.findbugs.TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED.<span class="attribute">name</span>=错误用法 - 某个值使用了注解标记不会限制类型，但是这个限制是必须的</span><br><span class="line">rule.findbugs.NS_NON_SHORT_CIRCUIT.<span class="attribute">name</span>=高危 - 可疑的非短路逻辑</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT.<span class="attribute">name</span>=错误用法 - 格式化字符串没有前面的参数</span><br><span class="line">rule.findbugs.SE_PRIVATE_READ_RESOLVE_NOT_INHERITED.<span class="attribute">name</span>=高危 - 私有readResolve方法不是继承自父类</span><br><span class="line">rule.findbugs.RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE.<span class="attribute">name</span>=高危 - 对一个已知不是<span class="literal">null</span>的值重复进行空值判断</span><br><span class="line">rule.findbugs.NM_LCASE_TOSTRING.<span class="attribute">name</span>=类定义了tostring(); 应该是toString()吧？</span><br><span class="line">rule.findbugs.HSC_HUGE_SHARED_STRING_CONSTANT.<span class="attribute">name</span>=性能 - 巨大的字符串常量在多个类文件中间重复了</span><br><span class="line">rule.findbugs.SE_TRANSIENT_FIELD_NOT_RESTORED.<span class="attribute">name</span>=不良实践 - Transient属性没有再反序列化时被设置</span><br><span class="line">rule.findbugs.JLM_JSR166_LOCK_MONITORENTER.<span class="attribute">name</span>=多线程错误 - 在java.util.concurrent Lock上进行了同步</span><br><span class="line">rule.findbugs.EQ_ALWAYS_TRUE.<span class="attribute">name</span>=错误用法 - equals方法总是返回<span class="literal">true</span></span><br><span class="line">rule.findbugs.ISC_INSTANTIATE_STATIC_CLASS.<span class="attribute">name</span>=不良实践 - 只提供静态方法的类不需要实例化</span><br><span class="line">rule.findbugs.ICAST_IDIV_CAST_TO_DOUBLE.<span class="attribute">name</span>=高危 - int相除的结果转换成double或float</span><br><span class="line">rule.findbugs.RC_REF_COMPARISON_BAD_PRACTICE.<span class="attribute">name</span>=错误用法 - 可疑的引用与常量的比较</span><br><span class="line">rule.findbugs.FI_EXPLICIT_INVOCATION.<span class="attribute">name</span>=不良实践 - 直接调用finalizer</span><br><span class="line">rule.findbugs.ESync_EMPTY_SYNC.<span class="attribute">name</span>=多线程错误 - 空的同步块</span><br><span class="line">rule.findbugs.DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION.<span class="attribute">name</span>=错误用法 - 不要使用removeAll清空集合</span><br><span class="line">rule.findbugs.SE_BAD_FIELD.<span class="attribute">name</span>=在序列化类中出现了非transient也非serializable的实例属性</span><br><span class="line">rule.findbugs.NP_STORE_INTO_NONNULL_FIELD.<span class="attribute">name</span>=错误用法 - 属性已经标记为NonNull，但是设置了一个<span class="literal">null</span>值</span><br><span class="line">rule.findbugs.IT_NO_SUCH_ELEMENT.<span class="attribute">name</span>=不良实践 - 迭代器的next()方法不能抛出NoSuchElementException</span><br><span class="line">rule.findbugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER.<span class="attribute">name</span>=安全风险 - HTTP响应拆分漏洞</span><br><span class="line">rule.findbugs.DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED.<span class="attribute">name</span>=高危 - 希望传入Runnable的地方传入了一个Thread</span><br><span class="line">rule.findbugs.NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH.<span class="attribute">name</span>=错误用法 - <span class="literal">null</span>值会在exception处理中被用到</span><br><span class="line">rule.findbugs.RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE.<span class="attribute">name</span>=高危 - 已知的<span class="literal">null</span>值被重复的检测</span><br><span class="line">rule.findbugs.DMI_CALLING_NEXT_FROM_HASNEXT.<span class="attribute">name</span>=错误用法 - hasNext方法调用了next方法</span><br><span class="line">rule.findbugs.HE_HASHCODE_USE_OBJECT_EQUALS.<span class="attribute">name</span>=不良实践 - 定义了hashCode()的类使用了Object.equals()</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED.<span class="attribute">name</span>=错误用法 - 需要使用printf样式时使用了MessageFormat</span><br><span class="line">rule.findbugs.NP_BOOLEAN_RETURN_NULL.<span class="attribute">name</span>=不良实践 - 方法返回boolean类型返回了<span class="literal">null</span></span><br><span class="line">rule.findbugs.RI_REDUNDANT_INTERFACES.<span class="attribute">name</span>=高危 - 类实现了父类一样的接口</span><br><span class="line">rule.findbugs.DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE.<span class="attribute">name</span>=多线程错误 - 在装箱的基本属性上使用了同步</span><br><span class="line">rule.findbugs.STCAL_STATIC_CALENDAR_INSTANCE.<span class="attribute">name</span>=多线程错误 - 静态Calendar</span><br><span class="line">rule.findbugs.RR_NOT_CHECKED.<span class="attribute">name</span>=不良实践 - 方法忽略InputStream.read()的返回值</span><br><span class="line">rule.findbugs.IL_INFINITE_RECURSIVE_LOOP.<span class="attribute">name</span>=错误用法 - 明显的无限递归循环</span><br><span class="line">rule.findbugs.DMI_NONSERIALIZABLE_OBJECT_WRITTEN.<span class="attribute">name</span>=高危 - 非持久化的对象写入了ObjectOutput</span><br><span class="line">rule.findbugs.GC_UNCHECKED_TYPE_IN_GENERIC_CALL.<span class="attribute">name</span>=不良实践 - 泛型调用中使用了未检查的类型</span><br><span class="line">rule.findbugs.IMA_INEFFICIENT_MEMBER_ACCESS.<span class="attribute">name</span>=试验 - 方法访问了一个拥有的类的私有成员</span><br><span class="line">rule.findbugs.FI_PUBLIC_SHOULD_BE_PROTECTED.<span class="attribute">name</span>=恶意代码漏洞 - Finalizer应该是protected，不能是public</span><br><span class="line">rule.findbugs.RV_CHECK_FOR_POSITIVE_INDEXOF.<span class="attribute">name</span>=高危 - 方法检查检查String.indexOf的结果是否为正数</span><br><span class="line">rule.findbugs.ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT.<span class="attribute">name</span>=高危 - 无符号右移转换为short/byte</span><br><span class="line">rule.findbugs.DM_STRING_VOID_CTOR.<span class="attribute">name</span>=性能 - 方法调用了低效的new String()构造方法</span><br><span class="line">rule.findbugs.RE_POSSIBLE_UNINTENDED_PATTERN.<span class="attribute">name</span>=错误用法 - <span class="string">"."</span>用作正则表达式</span><br><span class="line">rule.findbugs.WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL.<span class="attribute">name</span>=多线程错误 - 在getClass上使用同步而不是在class文字上</span><br><span class="line">rule.findbugs.ICAST_BAD_SHIFT_AMOUNT.<span class="attribute">name</span>=错误用法 - 右移的数值不在0<span class="built_in">..</span>31范围内</span><br><span class="line">rule.findbugs.SF_SWITCH_FALLTHROUGH.<span class="attribute">name</span>=Switch语句中一个case失败以后进入了下一个case</span><br><span class="line">rule.findbugs.DP_DO_INSIDE_DO_PRIVILEGED.<span class="attribute">name</span>=不良实践 - 方法调用应该在doPrivileged块中</span><br><span class="line">rule.findbugs.NO_NOTIFY_NOT_NOTIFYALL.<span class="attribute">name</span>=多线程错误 - 使用notify()而不是notifyAll()</span><br><span class="line">rule.findbugs.SS_SHOULD_BE_STATIC.<span class="attribute">name</span>=性能 - 未读取的属性：这个属性是否应该是static的？</span><br><span class="line">rule.findbugs.DM_RUN_FINALIZERS_ON_EXIT.<span class="attribute">name</span>=不良实践 - 方法调用了危险的runFinalizersOnExit方法</span><br><span class="line">rule.findbugs.MS_FINAL_PKGPROTECT.<span class="attribute">name</span>=恶意代码漏洞 - 属性应该同时是final 和 package protected的</span><br><span class="line">rule.findbugs.BC_BAD_CAST_TO_CONCRETE_COLLECTION.<span class="attribute">name</span>=高危 - 转换成具体集合可能有问题</span><br><span class="line">rule.findbugs.BIT_IOR_OF_SIGNED_BYTE.<span class="attribute">name</span>=错误用法 - 在带符号的byte值上进行位<span class="keyword">OR</span>运算</span><br><span class="line">rule.findbugs.MSF_MUTABLE_SERVLET_FIELD.<span class="attribute">name</span>=多线程错误 - 可变的servlet属性</span><br><span class="line">rule.findbugs.SE_BAD_FIELD_INNER_CLASS.<span class="attribute">name</span>=不良实践 - 非serializable类有一个可序列化的内部类</span><br><span class="line">rule.findbugs.BIT_ADD_OF_SIGNED_BYTE.<span class="attribute">name</span>=错误用法 - 在带符号的byte值上进行位add运算</span><br><span class="line">rule.findbugs.FI_FINALIZER_ONLY_NULLS_FIELDS.<span class="attribute">name</span>=不良实践 - Finalizer中子还有<span class="literal">null</span>属性</span><br><span class="line">rule.findbugs.DE_MIGHT_IGNORE.<span class="attribute">name</span>=不良实践 - 方法可能忽略异常</span><br><span class="line">rule.findbugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER.<span class="attribute">name</span>=安全风险 - Servlet反射跨域脚本漏洞</span><br><span class="line">rule.findbugs.ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD.<span class="attribute">name</span>=多线程错误 - 使用同步的属性可能发生改变</span><br><span class="line">rule.findbugs.SQL_BAD_PREPARED_STATEMENT_ACCESS.<span class="attribute">name</span>=错误用法 - 方法尝试访问PreparedStatement参数的索引是0</span><br><span class="line">rule.findbugs.DM_CONVERT_CASE.<span class="attribute">name</span>=国际化 - 考虑使用国际化参数型的调用方法版本</span><br><span class="line">rule.findbugs.SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS.<span class="attribute">name</span>=高危 - 类的transient属性不能序列化</span><br><span class="line">rule.findbugs.NN_NAKED_NOTIFY.<span class="attribute">name</span>=多线程错误 - 未使用同步包裹的notify</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_MISSING_ARGUMENT.<span class="attribute">name</span>=错误用法 - 格式化字符串引用的参数丢失</span><br><span class="line">rule.findbugs.IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION.<span class="attribute">name</span>=不良实践 - 父类初始化时使用了子类</span><br><span class="line">rule.findbugs.SA_LOCAL_SELF_COMPARISON.<span class="attribute">name</span>=错误用法 - 自己和自己的值比较</span><br><span class="line">rule.findbugs.IM_BAD_CHECK_FOR_ODD.<span class="attribute">name</span>=高危 - 对奇偶判断不能用于负数</span><br><span class="line">rule.findbugs.NP_CLOSING_NULL.<span class="attribute">name</span>=错误用法 - close()调用了一个永远是<span class="literal">null</span>的值</span><br><span class="line">rule.findbugs.XSS_REQUEST_PARAMETER_TO_JSP_WRITER.<span class="attribute">name</span>=安全风险 - JSP反射调用跨域脚本漏洞</span><br><span class="line">rule.findbugs.IS_FIELD_NOT_GUARDED.<span class="attribute">name</span>=多线程错误 - 属性不能保证同步访问</span><br><span class="line">rule.findbugs.DM_GC.<span class="attribute">name</span>=性能 - 直接调用垃圾回收，特别是在性能测试中的可疑代码</span><br><span class="line">rule.findbugs.IM_MULTIPLYING_RESULT_OF_IREM.<span class="attribute">name</span>=错误用法 - 整数乘法的结果是整数</span><br><span class="line">rule.findbugs.SE_COMPARATOR_SHOULD_BE_SERIALIZABLE.<span class="attribute">name</span>=不良实践 - Comparator没有实现Serializable</span><br><span class="line">rule.findbugs.HE_HASHCODE_NO_EQUALS.<span class="attribute">name</span>=不良实践 - 类定义了hashCode()但是没定义equals()</span><br><span class="line">rule.findbugs.MF_CLASS_MASKS_FIELD.<span class="attribute">name</span>=错误用法 - 类定义了属性覆盖了父类的属性</span><br><span class="line">rule.findbugs.NM_VERY_CONFUSING_INTENTIONAL.<span class="attribute">name</span>=不良实践 - 非常迷惑的方法名称（可能是内部方法）</span><br><span class="line">rule.findbugs.SR_NOT_CHECKED.<span class="attribute">name</span>=不良实践 - 方法忽略了InputStream.skip()的结果</span><br><span class="line">rule.findbugs.LI_LAZY_INIT_STATIC.<span class="attribute">name</span>=多线程错误 - 错误的对static属性进行了延迟初始化</span><br><span class="line">rule.findbugs.DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION.<span class="attribute">name</span>=错误用法 - 不能使用反射检测没有标记为runtime rentention的注解的存在</span><br><span class="line">rule.findbugs.ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH.<span class="attribute">name</span>=不良实践 - 方法可能在关闭database资源时因为异常失败</span><br><span class="line">rule.findbugs.BIT_IOR.<span class="attribute">name</span>=错误用法 - 不兼容的位掩码（BIT_IOR）</span><br><span class="line">rule.findbugs.ODR_OPEN_DATABASE_RESOURCE.<span class="attribute">name</span>=不良实践 - 方法可能在关闭database资源时失败</span><br><span class="line">rule.findbugs.IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN.<span class="attribute">name</span>=错误用法 - 参数没有被使用，但是被重新赋值了</span><br><span class="line">rule.findbugs.SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING.<span class="attribute">name</span>=安全风险 - 使用非常量字符串创建了一个PreparedStatement</span><br><span class="line">rule.findbugs.UUF_UNUSED_FIELD.<span class="attribute">name</span>=性能 - 无用的属性</span><br><span class="line">rule.findbugs.RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE.<span class="attribute">name</span>=错误用法 - 对一个已经使用的值进行了<span class="literal">null</span>检测</span><br><span class="line">rule.findbugs.EQ_OTHER_USE_OBJECT.<span class="attribute">name</span>=错误用法 - equals()方法定义没有覆盖Object.equals(Object)</span><br><span class="line">rule.findbugs.SP_SPIN_ON_FIELD.<span class="attribute">name</span>=多线程错误 - 方法对一个属性循环复制</span><br><span class="line">rule.findbugs.SI_INSTANCE_BEFORE_FINALS_ASSIGNED.<span class="attribute">name</span>=不良实践 - 在所有静态final属性赋值之前static初始化块创建了一个实例</span><br><span class="line">rule.findbugs.NP_ALWAYS_NULL_EXCEPTION.<span class="attribute">name</span>=错误用法 - 方法的异常路径中引用了空指针</span><br><span class="line">rule.findbugs.MS_EXPOSE_REP.<span class="attribute">name</span>=恶意代码漏洞 - Public static方法可能因为返回了一个数组而暴露内部实现</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN.<span class="attribute">name</span>=高危 - 非布尔参数使用%b进行了格式化</span><br><span class="line">rule.findbugs.MS_PKGPROTECT.<span class="attribute">name</span>=恶意代码漏洞 - 属性应该是package protected</span><br><span class="line">rule.findbugs.NP_NONNULL_RETURN_VIOLATION.<span class="attribute">name</span>=错误用法 - 方法可能返回<span class="literal">null</span>，但是声明了 @NonNull</span><br><span class="line">rule.findbugs.J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION.<span class="attribute">name</span>=不良实践 - 在HttpSession中保存了不可序列化的对象</span><br><span class="line">rule.findbugs.NM_SAME_SIMPLE_NAME_AS_SUPERCLASS.<span class="attribute">name</span>=不良实践 - 类名不应该和父类的名称相同</span><br><span class="line">rule.findbugs.DMI_BLOCKING_METHODS_ON_URL.<span class="attribute">name</span>=性能 - URL的equals 和 hashCode 方法会被堵塞</span><br><span class="line">rule.findbugs.HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS.<span class="attribute">name</span>=错误用法 - 在哈希构造中声明了不能哈希的类</span><br><span class="line">rule.findbugs.UR_UNINIT_READ.<span class="attribute">name</span>=错误用法 - 构造方法中对未初始化的类进行了读取</span><br><span class="line">rule.findbugs.WA_NOT_IN_LOOP.<span class="attribute">name</span>=多线程错误 - Wait不在循环中</span><br><span class="line">rule.findbugs.DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR.<span class="attribute">name</span>=错误用法 - 尝试修改ScheduledThreadPoolExecutor的最大数</span><br><span class="line">rule.findbugs.RV_RETURN_VALUE_IGNORED2.<span class="attribute">name</span>=错误用法 - 方法忽略了返回值</span><br><span class="line">rule.findbugs.NM_FIELD_NAMING_CONVENTION.<span class="attribute">name</span>=属性名应该以小写字母开头</span><br><span class="line">rule.findbugs.FB_UNEXPECTED_WARNING.<span class="attribute">name</span>=试验 - 未期待/未期望的findbugs警告</span><br><span class="line">rule.findbugs.BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR.<span class="attribute">name</span>=错误用法 - 基础类型拆箱后用于三元表达式</span><br><span class="line">rule.findbugs.DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED.<span class="attribute">name</span>=不良实践 - Classloaders应该只在doPrivileged块中被创建</span><br><span class="line">rule.findbugs.NM_WRONG_PACKAGE.<span class="attribute">name</span>=错误用法 - 方法没有覆盖父类的方法，因为参数的包不正确</span><br><span class="line">rule.findbugs.IL_CONTAINER_ADDED_TO_ITSELF.<span class="attribute">name</span>=错误用法 - 一个集合被添加到自身</span><br><span class="line">rule.findbugs.CI_CONFUSED_INHERITANCE.<span class="attribute">name</span>=高危 - 类是final的，但是定义了protected属性</span><br><span class="line">rule.findbugs.HE_USE_OF_UNHASHABLE_CLASS.<span class="attribute">name</span>=错误用法 - 在哈希数据结构中使用的类没有定义hashCode()方法</span><br><span class="line">rule.findbugs.IJU_SUITE_NOT_STATIC.<span class="attribute">name</span>=错误用法 - TestCase实现了非static suite方法</span><br><span class="line">rule.findbugs.RS_READOBJECT_SYNC.<span class="attribute">name</span>=多线程错误 - 类的readObject()方法不是同步的</span><br><span class="line">rule.findbugs.AM_CREATES_EMPTY_JAR_FILE_ENTRY.<span class="attribute">name</span>=不良实践 - 创建了一个空的jar方法入口</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY.<span class="attribute">name</span>=错误用法 - 使用格式化字符串对数组进行了无用的格式化</span><br><span class="line">rule.findbugs.SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW.<span class="attribute">name</span>=switch语句失败抛出异常导致无用的存储</span><br><span class="line">rule.findbugs.RV_ABSOLUTE_VALUE_OF_HASHCODE.<span class="attribute">name</span>=错误用法 - 错误的尝试计算带符号的32位hashcodde的绝对值</span><br><span class="line">rule.findbugs.EQ_DONT_DEFINE_EQUALS_FOR_ENUM.<span class="attribute">name</span>=错误用法 - 枚举定义了协变equals()方法定义</span><br><span class="line">rule.findbugs.SA_FIELD_DOUBLE_ASSIGNMENT.<span class="attribute">name</span>=错误用法 - 对属性进行双重赋值</span><br><span class="line">rule.findbugs.DMI_COLLECTION_OF_URLS.<span class="attribute">name</span>=性能 - URL的Maps 和 sets可能是性能大问题</span><br><span class="line">rule.findbugs.NM_SAME_SIMPLE_NAME_AS_INTERFACE.<span class="attribute">name</span>=不良实践 - 类名不应该和实现的接口名相同</span><br><span class="line">rule.findbugs.UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR.<span class="attribute">name</span>=错误用法 - 构造方法没有初始化属性</span><br><span class="line">rule.findbugs.TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK.<span class="attribute">name</span>=错误用法 - 值可能带着一个类型修饰符，一直使用的方式是与这个类型修饰符相悖的</span><br><span class="line">rule.findbugs.SE_NONLONG_SERIALVERSIONID.<span class="attribute">name</span>=不良实践 - serialVersionUID不是long型</span><br><span class="line">rule.findbugs.RV_REM_OF_HASHCODE.<span class="attribute">name</span>=高危 - hashCode的结果可能是负数negative</span><br><span class="line">rule.findbugs.NS_DANGEROUS_NON_SHORT_CIRCUIT.<span class="attribute">name</span>=高危 - 潜在危险使用非短跳出逻辑</span><br><span class="line">rule.findbugs.USM_USELESS_SUBCLASS_METHOD.<span class="attribute">name</span>=试验 - 方法代理到父类方法</span><br><span class="line">rule.findbugs.ITA_INEFFICIENT_TO_ARRAY.<span class="attribute">name</span>=性能 - 方法使用了toArray()对空数组参数</span><br><span class="line">rule.findbugs.DM_MONITOR_WAIT_ON_CONDITION.<span class="attribute">name</span>=多线程错误 - 根据条件监控wait()的调用</span><br><span class="line">rule.findbugs.BOA_BADLY_OVERRIDDEN_ADAPTER.<span class="attribute">name</span>=错误用法 - 类覆盖了父类中实现的方法适配器错误</span><br><span class="line">rule.findbugs.IC_INIT_CIRCULARITY.<span class="attribute">name</span>=高危 - 初始化死循环</span><br><span class="line">rule.findbugs.NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER.<span class="attribute">name</span>=不良实践 - 使用的标记是未来java版本中的关键字</span><br><span class="line">rule.findbugs.EC_UNRELATED_CLASS_AND_INTERFACE.<span class="attribute">name</span>=错误用法 - equals()比较无关的类和接口</span><br><span class="line">rule.findbugs.TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK.<span class="attribute">name</span>=错误用法 - 值可能没有携带一个类修饰符，但是使用中会一直需要这个类修饰符</span><br><span class="line">rule.findbugs.FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER.<span class="attribute">name</span>=错误用法 - 测试是否与NaN相等</span><br><span class="line">rule.findbugs.NM_CONFUSING.<span class="attribute">name</span>=不良实践 - 迷惑的方法名</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_ARG_MISMATCH.<span class="attribute">name</span>=错误用法 - 格式化字符串参数的数目与占位符不相等</span><br><span class="line">rule.findbugs.NP_NULL_ON_SOME_PATH_EXCEPTION.<span class="attribute">name</span>=错误用法 - 方法的异常路径中可能引用空指针</span><br><span class="line">rule.findbugs.DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE.<span class="attribute">name</span>=多线程错误 - 同步装箱基本类型可能导致死锁</span><br><span class="line">rule.findbugs.IJU_TEARDOWN_NO_SUPER.<span class="attribute">name</span>=错误用法 - TestCase定义的tearDown没有调用super.tearDown()</span><br><span class="line">rule.findbugs.SE_READ_RESOLVE_IS_STATIC.<span class="attribute">name</span>=错误用法 - readResolve方法没有生命为static方法</span><br><span class="line">rule.findbugs.NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE.<span class="attribute">name</span>=高危 - 这个路径上空指针引用是不可实现的</span><br><span class="line">rule.findbugs.UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS.<span class="attribute">name</span>=错误用法 - 匿名内部类中定义的不可调用的方法</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_BAD_CONVERSION.<span class="attribute">name</span>=错误用法 - 提供的参数类型与格式化标记不符</span><br><span class="line">rule.findbugs.EC_ARRAY_AND_NONARRAY.<span class="attribute">name</span>=错误用法 - equals()用来比较数组和非数组</span><br><span class="line">rule.findbugs.NM_BAD_EQUAL.<span class="attribute">name</span>=类定义了equal(Object)，应该是equals(Object)吧？</span><br><span class="line">rule.findbugs.EC_UNRELATED_TYPES_USING_POINTER_EQUALITY.<span class="attribute">name</span>=错误用法 - 使用指针比较不同的类型</span><br><span class="line">rule.findbugs.STI_INTERRUPTED_ON_CURRENTTHREAD.<span class="attribute">name</span>=错误用法 - currentThread()调用的不必要用法，调用了interrupted()</span><br><span class="line">rule.findbugs.RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION.<span class="attribute">name</span>=错误用法 - File.separator用做正则表达式</span><br><span class="line">rule.findbugs.MWN_MISMATCHED_WAIT.<span class="attribute">name</span>=多线程错误 - 不匹配的wait()</span><br><span class="line">rule.findbugs.IL_INFINITE_LOOP.<span class="attribute">name</span>=错误用法 - 明显的无限循环</span><br><span class="line">rule.findbugs.NP_IMMEDIATE_DEREFERENCE_OF_READLINE.<span class="attribute">name</span>=高危 - 立刻使用了readLine()的结果</span><br><span class="line">rule.findbugs.SC_START_IN_CTOR.<span class="attribute">name</span>=多线程错误 - 构造方法调用了Thread.start()</span><br><span class="line">rule.findbugs.STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE.<span class="attribute">name</span>=多线程错误 - 静态DateFormat</span><br><span class="line">rule.findbugs.HE_EQUALS_NO_HASHCODE.<span class="attribute">name</span>=不良实践 - 类定义了equals()，但是没有hashCode()</span><br><span class="line">rule.findbugs.UL_UNRELEASED_LOCK.<span class="attribute">name</span>=多线程错误 - 方法没有在任何路径中释放锁</span><br><span class="line">rule.findbugs.PZLA_PREFER_ZERO_LENGTH_ARRAYS.<span class="attribute">name</span>=高危 - 考虑返回空数组而不是<span class="literal">null</span></span><br><span class="line">rule.findbugs.SKIPPED_CLASS_TOO_BIG.<span class="attribute">name</span>=高危 - 类太大不能分析</span><br><span class="line">rule.findbugs.NP_ARGUMENT_MIGHT_BE_NULL.<span class="attribute">name</span>=错误用法 - 方法没有检查空参数</span><br><span class="line">rule.findbugs.UM_UNNECESSARY_MATH.<span class="attribute">name</span>=性能 - 方法常量调用了静态Math类方法</span><br><span class="line">rule.findbugs.NM_WRONG_PACKAGE_INTENTIONAL.<span class="attribute">name</span>=不良实践 - 方法没有覆盖父类的方法因为参数包名错误</span><br><span class="line">rule.findbugs.NP_NONNULL_PARAM_VIOLATION.<span class="attribute">name</span>=错误用法 - 方法传递<span class="literal">null</span>给一个非空参数</span><br><span class="line">rule.findbugs.BIT_AND_ZZ.<span class="attribute">name</span>=错误用法 - 检查 ((<span class="built_in">..</span>.) &amp; 0) == 0 是否成立</span><br><span class="line">rule.findbugs.HRS_REQUEST_PARAMETER_TO_COOKIE.<span class="attribute">name</span>=安全风险 - HTTP cookie可能来自不被信任的输入</span><br><span class="line">rule.findbugs.SQL_BAD_RESULTSET_ACCESS.<span class="attribute">name</span>=错误用法 - 方法尝试访问一个ResultSet，但是使用的index是0</span><br><span class="line">rule.findbugs.INT_VACUOUS_COMPARISON.<span class="attribute">name</span>=高危 - 整形的空比较</span><br><span class="line">rule.findbugs.EQ_COMPARETO_USE_OBJECT_EQUALS.<span class="attribute">name</span>=不良实践 - 类定义了compareTo(<span class="built_in">..</span>.)，但使用了Object.equals()</span><br><span class="line">rule.findbugs.DMI_HARDCODED_ABSOLUTE_FILENAME.<span class="attribute">name</span>=高危 - 类包含一个硬编码的绝对路径</span><br><span class="line">rule.findbugs.DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES.<span class="attribute">name</span>=错误用法 - 集合不应该包含自身</span><br><span class="line">rule.findbugs.URF_UNREAD_FIELD.<span class="attribute">name</span>=性能 - 读不到的属性</span><br><span class="line">rule.findbugs.DLS_OVERWRITTEN_INCREMENT.<span class="attribute">name</span>=错误用法 - 重写了自增</span><br><span class="line">rule.findbugs.BIT_SIGNED_CHECK.<span class="attribute">name</span>=不良实践 - 检测带符号的位运算</span><br><span class="line">rule.findbugs.UWF_NULL_FIELD.<span class="attribute">name</span>=错误用法 - 属性曾经设置为<span class="literal">null</span></span><br><span class="line">rule.findbugs.DE_MIGHT_DROP.<span class="attribute">name</span>=不良实践 - 方法可能抛出异常</span><br><span class="line">rule.findbugs.DMI_BAD_MONTH.<span class="attribute">name</span>=错误用法 - 对于month错误的常量值</span><br><span class="line">rule.findbugs.MS_MUTABLE_ARRAY.<span class="attribute">name</span>=恶意代码漏洞 - 属性是可变数组</span><br><span class="line">rule.findbugs.SE_INNER_CLASS.<span class="attribute">name</span>=不良实践 - 可序列化的内部类</span><br><span class="line">rule.findbugs.OS_OPEN_STREAM_EXCEPTION_PATH.<span class="attribute">name</span>=不良实践 - 方法可能在关闭流时因为异常而失败</span><br><span class="line">rule.findbugs.AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION.<span class="attribute">name</span>=并发抽象的顺序调用可能不是原子的</span><br><span class="line">rule.findbugs.BX_UNBOXING_IMMEDIATELY_REBOXED.<span class="attribute">name</span>=装箱的值被拆箱，然后立刻重新装箱了</span><br><span class="line">rule.findbugs.CO_COMPARETO_RESULTS_MIN_VALUE.<span class="attribute">name</span>=compareTo()或compare()返回Integer.MIN_VALUE</span><br><span class="line">rule.findbugs.DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD.<span class="attribute">name</span>=无用的局部变量可能与实例属性同名</span><br><span class="line">rule.findbugs.DMI_ARGUMENTS_WRONG_ORDER.<span class="attribute">name</span>=方法参数顺序翻转</span><br><span class="line">rule.findbugs.DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE.<span class="attribute">name</span>=由double构造BigDecimal时没有指定精确度</span><br><span class="line">rule.findbugs.DMI_DOH.<span class="attribute">name</span>=一个明显不合理的方法调用</span><br><span class="line">rule.findbugs.DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS.<span class="attribute">name</span>=一个入口的添加可能因为重用Entry对象导致失败</span><br><span class="line">rule.findbugs.DM_DEFAULT_ENCODING.<span class="attribute">name</span>=信任默认字符编码</span><br><span class="line">rule.findbugs.ICAST_INT_2_LONG_AS_INSTANT.<span class="attribute">name</span>=int转换成long，用来当做绝对时间</span><br><span class="line">rule.findbugs.INT_BAD_COMPARISON_WITH_INT_VALUE.<span class="attribute">name</span>=错误比较int值和long常量</span><br><span class="line">rule.findbugs.JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT.<span class="attribute">name</span>=在util.concurrent抽象中使用监控样式的wait方法</span><br><span class="line">rule.findbugs.NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD.<span class="attribute">name</span>=读取了未初始化的public或protected属性</span><br><span class="line">rule.findbugs.OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE.<span class="attribute">name</span>=方法可能因为checked exception导致清理流或资源失败</span><br><span class="line">rule.findbugs.PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS.<span class="attribute">name</span>=不用在iterator里重用entry对象</span><br><span class="line">rule.findbugs.RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE.<span class="attribute">name</span>=compareTo返回的值与指定的值进行检测</span><br><span class="line">rule.findbugs.RV_NEGATING_RESULT_OF_COMPARETO.<span class="attribute">name</span>=调换了compareTo()/compare()结果的正负</span><br><span class="line">rule.findbugs.RV_RETURN_VALUE_IGNORED_INFERRED.<span class="attribute">name</span>=方法忽略了返回值，这是正常的吗？</span><br><span class="line">rule.findbugs.SA_LOCAL_SELF_ASSIGNMENT_INSTEAD_OF_FIELD.<span class="attribute">name</span>=局部变量给自己赋值而不是赋值到实例变量中</span><br><span class="line">rule.findbugs.URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD.<span class="attribute">name</span>=未被读取的public/protected属性</span><br><span class="line">rule.findbugs.UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD.<span class="attribute">name</span>=未被使用的public 或 protected 属性</span><br><span class="line">rule.findbugs.UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD.<span class="attribute">name</span>=未初始化的public 或 protected 属性</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_USES_NEWLINE.<span class="attribute">name</span>=格式化代码应该使用%n代替\n</span><br><span class="line">rule.findbugs.VO_VOLATILE_INCREMENT.<span class="attribute">name</span>=volatile的自增操作不是原子的</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: findBugs错误英文翻译rule.findbugs.IMSE_DONT_CATCH_IMSE.name=不良实践 - 捕获可疑IllegalMonitorStateException rule.findbugs.BX_BOXING_IMMEDIATELY_UNBOXED.name=性能 - 基本类型包装之后立刻解包 rule.findbugs.IJU_SETUP_NO_SUPER.name=…阅读全文&lt;/p&gt;
    
    </summary>
    
      <category term="findbugs" scheme="https://lossingdawn.top/categories/findbugs/"/>
    
    
      <category term="findbugs" scheme="https://lossingdawn.top/tags/findbugs/"/>
    
  </entry>
  
</feed>
