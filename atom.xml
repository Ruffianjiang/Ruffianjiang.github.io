<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lossingdawn.top/"/>
  <updated>2018-06-13T15:31:22.668Z</updated>
  <id>https://lossingdawn.top/</id>
  
  <author>
    <name>Ruffianjiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github访问不到，登陆不上</title>
    <link href="https://lossingdawn.top/2018/06/10/github%E8%AE%BF%E9%97%AE%E4%B8%8D%E5%88%B0%EF%BC%8C%E7%99%BB%E9%99%86%E4%B8%8D%E4%B8%8A/"/>
    <id>https://lossingdawn.top/2018/06/10/github访问不到，登陆不上/</id>
    <published>2018-06-10T05:50:00.000Z</published>
    <updated>2018-06-13T15:31:22.668Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 为github添加host 在host文件添加如下两行 再次 ping <a href="http://github.com" target="_blank" rel="noopener">github.com</a> 解析后的ip就会强制指向host中的ip 注1： host文件修改需要权限，建议使用 nodepad++ ，保存后会自动要求管理员权限，再次保存即可 注2： 关于IP的选择，可以去 站长工具 去查 参考： 阅读全文</p><a id="more"></a><p>为github添加host</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\W</span>INDOWS<span class="symbol">\S</span>ystem32<span class="symbol">\d</span>rivers<span class="symbol">\e</span>tc</span><br></pre></td></tr></table></figure><p>在host文件添加如下两行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192<span class="selector-class">.30</span><span class="selector-class">.253</span><span class="selector-class">.112</span> <span class="selector-tag">github</span><span class="selector-class">.com</span></span><br><span class="line">   151<span class="selector-class">.101</span><span class="selector-class">.113</span><span class="selector-class">.194</span> <span class="selector-tag">github</span><span class="selector-class">.global</span><span class="selector-class">.SSL</span><span class="selector-class">.fastly</span><span class="selector-class">.net</span></span><br></pre></td></tr></table></figure><p>再次 ping <a href="http://github.com" target="_blank" rel="noopener">github.com</a> 解析后的ip就会强制指向host中的ip</p><p><img src="https://images2018.cnblogs.com/blog/670989/201806/670989-20180610134332071-1047669790.png" alt=""></p><p></p><p>注1：</p><p>host文件修改需要权限，建议使用 <a href="https://notepad-plus.en.softonic.com/" target="_blank" rel="noopener">nodepad++</a> ，保存后会自动要求管理员权限，再次保存即可</p><p>注2：</p><p>关于IP的选择，可以去 <a href="http://tool.chinaz.com/dns/" target="_blank" rel="noopener">站长工具</a> 去查</p><p>参考：</p><p><a href="https://blog.csdn.net/wl_521/article/details/80154063" target="_blank" rel="noopener">https://blog.csdn.net/wl_521/article/details/80154063</a></p><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 为github添加host 在host文件添加如下两行 再次 ping &lt;a href=&quot;http://github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github.com&lt;/a&gt; 解析后的ip就会强制指向host中的ip 注1： host文件修改需要权限，建议使用 nodepad++ ，保存后会自动要求管理员权限，再次保存即可 注2： 关于IP的选择，可以去 站长工具 去查 参考： 阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lossingdawn.top/2018/05/30/hello-world/"/>
    <id>https://lossingdawn.top/2018/05/30/hello-world/</id>
    <published>2018-05-30T15:38:42.914Z</published>
    <updated>2018-06-06T16:05:49.965Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Jdk安装错误1316，jdk-10.0.1</title>
    <link href="https://lossingdawn.top/2018/05/25/jdk%E5%AE%89%E8%A3%85%E9%94%99%E8%AF%AF1316%EF%BC%8Cjdk-10.0.1/"/>
    <id>https://lossingdawn.top/2018/05/25/jdk安装错误1316，jdk-10.0.1/</id>
    <published>2018-05-24T16:50:00.000Z</published>
    <updated>2018-06-13T15:31:22.668Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 打开注册表regedit ，定个位到 计算机\HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\ 把jdk，jre下面的目录删掉。即10.0.1 ，问题解决 参考： <a href="https://blog.csdn.net/lesorb/article/details/4389626%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87" target="_blank" rel="noopener">https://blog.csdn.net/lesorb/article/details/4389626阅读全文</a></p><a id="more"></a><p>打开注册表regedit ，定个位到</p><p>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\</p><p>把jdk，jre下面的目录删掉。即10.0.1 ，问题解决</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180525004720215-2037377963.png" alt=""></p><p>参考：</p><p><a href="https://blog.csdn.net/lesorb/article/details/4389626" target="_blank" rel="noopener">https://blog.csdn.net/lesorb/article/details/4389626</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 打开注册表regedit ，定个位到 计算机\HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\ 把jdk，jre下面的目录删掉。即10.0.1 ，问题解决 参考： &lt;a href=&quot;https://blog.csdn.net/lesorb/article/details/4389626%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/lesorb/article/details/4389626阅读全文&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Windows安装mongodb</title>
    <link href="https://lossingdawn.top/2018/05/23/windows%E5%AE%89%E8%A3%85mongodb/"/>
    <id>https://lossingdawn.top/2018/05/23/windows安装mongodb/</id>
    <published>2018-05-23T15:44:00.000Z</published>
    <updated>2018-06-13T15:31:21.408Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 一、资源 mongo下载地址： <a href="https://www.mongodb.com/download-center#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center#community</a> romongo下载： <a href="https://robomongo.org/" target="_blank" rel="noopener">https://robomongo.org/</a> 如下三个文件，（mongodb-compass可以不用下在，这是管理mongo用的图形化界面，习惯用阅读全文</p><a id="more"></a><h1 id="一-资源"><a class="markdownIt-Anchor" href="#一-资源"></a> 一、资源</h1><p>mongo下载地址：</p><p><a href="https://www.mongodb.com/download-center/#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/#community</a></p><p>romongo下载：</p><p><a href="https://robomongo.org/" target="_blank" rel="noopener">https://robomongo.org/</a></p><p>如下三个文件，（mongodb-compass可以不用下在，这是管理mongo用的图形化界面，习惯用romongo查询，studio3t可以自己学习使用）</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523230609258-1965975496.png" alt=""></p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523230624498-2048375172.png" alt=""></p><p>安装好以上软件，我本地的mongo安装到了d:tools\mongo 目录下，新建两个目录用于存储数据和日志</p><p>d:\tools\data\db  和  d:\tools\data\log</p><h1 id="二-初始化工作"><a class="markdownIt-Anchor" href="#二-初始化工作"></a> 二、初始化工作</h1><p>在命令行使用命令：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">启动脚本</span><br><span class="line">D:<span class="symbol">\t</span>ools<span class="symbol">\m</span>ongo<span class="symbol">\b</span>in<span class="symbol">\m</span>ongod --dbpath D:<span class="symbol">\t</span>ools<span class="symbol">\d</span>ata<span class="symbol">\d</span>b</span><br><span class="line"></span><br><span class="line">连接脚本</span><br><span class="line">D:<span class="symbol">\t</span>ools<span class="symbol">\m</span>ongo<span class="symbol">\b</span>in<span class="symbol">\m</span>ongo.exe</span><br></pre></td></tr></table></figure><p>出现  waiting for connetions on port 27017 ，则表示启动成功，ctrl+c可以关闭</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523231214127-696762503.png" alt=""></p><p>使用连接脚本连接数据库（新开一个命令行）</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523231314507-1741726332.png" alt=""></p><p>启动数据库命令行出现如下连接者的信息，连接成功</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523231548680-1994178827.png" alt=""></p><p>使用mongodb compass连接</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523231912505-440335011.png" alt=""></p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523231932604-1994370193.png" alt=""></p><p>romongo连接</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523232009239-2102787447.png" alt=""></p><p>后面主要使用romongo进行数据的查询，其中三种视图的切换</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523232601167-1448570459.png" alt=""></p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523232628501-270467638.png" alt=""></p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523232638818-290755981.png" alt=""></p><h1 id="三-mongo的配置"><a class="markdownIt-Anchor" href="#三-mongo的配置"></a> 三、mongo的配置</h1><p>配置 MongoDB 服务</p><p><em>创建一个配置文件位于 D:\tools\mongo\mongod.cfg<br>具体内容如下：</em></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemLog</span>:</span><br><span class="line">　　<span class="attribute">destination</span>: file</span><br><span class="line">　　<span class="attribute">path</span>: <span class="attribute">D</span>:\tools\data\log\mongod.log</span><br><span class="line"><span class="attribute">storage</span>:</span><br><span class="line">　　<span class="attribute">dbPath</span>: <span class="attribute">D</span>:\tools\data\db</span><br></pre></td></tr></table></figure><p></p><p>安装 MongoDB服务</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:<span class="symbol">\t</span>ools<span class="symbol">\m</span>ongo<span class="symbol">\b</span>in<span class="symbol">\m</span>ongod.exe --config "D:<span class="symbol">\t</span>ools<span class="symbol">\m</span>ongo<span class="symbol">\m</span>ongod.cfg" --install</span><br></pre></td></tr></table></figure><p></p><p>命令行需要管理员权限，没使用管理员权限的出现如下log信息</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523233935268-1055788732.png" alt=""></p><p>安装完成log信息如下：</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523234018623-1110298683.png" alt=""></p><p>在服务里可以找到MongoBD的服务</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523233703415-677450017.png" alt=""></p><p></p><p>启动MongoDB服务</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> MongoDB</span><br></pre></td></tr></table></figure><p>关闭MongoDB服务</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net <span class="built_in">stop</span> MongoDB</span><br></pre></td></tr></table></figure><p>移除 MongoDB 服务</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\m</span>ongodb<span class="symbol">\b</span>in<span class="symbol">\m</span>ongod.exe --remove</span><br></pre></td></tr></table></figure><p>其他的信息自行摸索吧，现在可以愉快的使用mongo了</p><p>参考：</p><p><a href="http://www.runoob.com/mongodb/mongodb-window-install.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-window-install.html</a></p><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 一、资源 mongo下载地址： &lt;a href=&quot;https://www.mongodb.com/download-center#community&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.mongodb.com/download-center#community&lt;/a&gt; romongo下载： &lt;a href=&quot;https://robomongo.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://robomongo.org/&lt;/a&gt; 如下三个文件，（mongodb-compass可以不用下在，这是管理mongo用的图形化界面，习惯用阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Eclipse中Cannot Nest Src Folder解决方法</title>
    <link href="https://lossingdawn.top/2018/04/25/Eclipse%E4%B8%ADCannot%20nest%20src%20folder%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://lossingdawn.top/2018/04/25/Eclipse中Cannot nest src folder解决方法/</id>
    <published>2018-04-25T01:04:00.000Z</published>
    <updated>2018-06-13T15:31:22.668Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 错误示例： 解决方法： 右击项目 -&gt; properties -&gt; java build path -&gt; source 一般是上图的红框的问题，这个已经改过的，报错的时候，是一个还未新建的文件夹目录/bin/main，解决方案如下图所示： 第一种就是把allow output folders xxx阅读全文</p><a id="more"></a><p>错误示例：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: Java Model Status [Cannot nest output <span class="built_in">folder</span> <span class="string">'xxx/bin/main'</span> inside output <span class="built_in">folder</span> <span class="string">'xxx/bin'</span>]</span><br></pre></td></tr></table></figure><p>解决方法：</p><p>右击项目 -&gt; properties -&gt; java build path -&gt; source</p><p><img src="https://images2018.cnblogs.com/blog/670989/201804/670989-20180425085906920-111690844.png" alt=""></p><p>一般是上图的红框的问题，这个已经改过的，报错的时候，是一个还未新建的文件夹目录/bin/main，解决方案如下图所示：</p><p><img src="https://images2018.cnblogs.com/blog/670989/201804/670989-20180425090102781-1418976264.png" alt=""></p><p>第一种就是把allow output folders xxx 的勾选去掉</p><p>第二种不去勾选，把default output folder目录改到bin目录</p><p></p><p>另外一种参考方法：</p><p><a href="https://blog.csdn.net/sinat_30397435/article/details/78522566" target="_blank" rel="noopener">https://blog.csdn.net/sinat_30397435/article/details/78522566</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 错误示例： 解决方法： 右击项目 -&amp;gt; properties -&amp;gt; java build path -&amp;gt; source 一般是上图的红框的问题，这个已经改过的，报错的时候，是一个还未新建的文件夹目录/bin/main，解决方案如下图所示： 第一种就是把allow output folders xxx阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>restTemplate重定向问题 &amp;Cookie问题</title>
    <link href="https://lossingdawn.top/2018/04/20/restTemplate%E9%87%8D%E5%AE%9A%E5%90%91%E9%97%AE%E9%A2%98%20&amp;cookie%E9%97%AE%E9%A2%98/"/>
    <id>https://lossingdawn.top/2018/04/20/restTemplate重定向问题 &amp;cookie问题/</id>
    <published>2018-04-20T07:44:00.000Z</published>
    <updated>2018-06-13T15:31:21.408Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 最近在做一个转发功能，zuul + ribbon + resttemplate 进行路由、负载、转发的功能 基本准备就绪，在微信自动登陆那遇到了一个坑，ribbon 系统用resttemplate 转发A系统的资源，在微信自动登陆的地方，A系统重定向到微信的地址，类似下面的代码 结果resttemp阅读全文</p><a id="more"></a><p>最近在做一个转发功能，zuul + ribbon + resttemplate 进行路由、负载、转发的功能</p><p>基本准备就绪，在微信自动登陆那遇到了一个坑，ribbon 系统用resttemplate 转发A系统的资源，在微信自动登陆的地方，A系统重定向到微信的地址，类似下面的代码</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redirect: https:<span class="regexp">//open</span>.weixin.qq.com/<span class="keyword">connect</span>/oauth2/authorize?appid=wx3290f3d5****&amp;redirect_uri=http:<span class="regexp">//</span>***.com/weixin/wxAuthRedirect?redirectUrl=http%3A%2F%2F192.<span class="number">168.10</span>.<span class="number">116</span>%3A8081%2Finternal%2Fpage%2Fuser%2Flogin_wx&amp;response_type=code&amp;scope=snsapi_userinfo&amp;<span class="keyword">state</span>=<span class="keyword">state</span><span class="comment">#wechat_redirect</span></span><br></pre></td></tr></table></figure><p>结果resttemplate 自动重定向到本地的地址，如下所示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">10.116</span>:**<span class="regexp">/connect/</span>oauth2<span class="regexp">/authorize**</span></span><br></pre></td></tr></table></figure><p>仔细思考了下，大概就是resttemplate 的重定向问题，查了查资料，找到一个类HttpComponentsClientHttpRequestFactory，RestTemplate初始化提供了这个类的参数</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Create a new instance of the &#123;<span class="doctag">@link</span> RestTemplate&#125; based on the given &#123;<span class="doctag">@link</span> ClientHttpRequestFactory&#125;.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> requestFactory HTTP request factory to use</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> org.springframework.http.client.SimpleClientHttpRequestFactory</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> org.springframework.http.client.HttpComponentsClientHttpRequestFactory</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RestTemplate</span><span class="params">(ClientHttpRequestFactory requestFactory)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>();</span><br><span class="line">       setRequestFactory(requestFactory);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>HttpComponentsClientHttpRequestFactory继承自ClientHttpRequestFactory，这个类的子类有HttpComponentsClientHttpRequestFactory和SimpleClientHttpRequestFactory</p><p>找到SimpleClientHttpRequestFactory，有如下方法：</p><p>第一种方式：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * Template method for preparing the given &#123;@link HttpURLConnection&#125;.</span><br><span class="line">    * &lt;p&gt;The default implementation prepares the connection for input and output, and sets the HTTP method.</span><br><span class="line">    * @param connection the connection to prepare</span><br><span class="line">    * @param httpMethod the HTTP request method (&#123;@code GET&#125;, &#123;@code POST&#125;, etc.)</span><br><span class="line">    * @throws IOException in case of I/O errors</span><br><span class="line">    */</span><br><span class="line">   protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException &#123;</span><br><span class="line">       if (this.connectTimeout &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">           connection.setConnectTimeout(this.connectTimeout);</span><br><span class="line">       &#125;</span><br><span class="line">       if (this.readTimeout &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">           connection.setReadTimeout(this.readTimeout);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       connection.setDoInput(true);</span><br><span class="line"></span><br><span class="line">       if (<span class="string">"<span class="keyword">GET</span>"</span>.equals(httpMethod)) &#123;</span><br><span class="line">           connection.setInstanceFollowRedirects(true);</span><br><span class="line">       &#125;</span><br><span class="line">       else &#123;</span><br><span class="line">           connection.setInstanceFollowRedirects(false);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       if (<span class="string">"<span class="keyword">POST</span>"</span>.equals(httpMethod) || <span class="string">"<span class="keyword">PUT</span>"</span>.equals(httpMethod) ||</span><br><span class="line">               <span class="string">"<span class="keyword">PATCH</span>"</span>.equals(httpMethod) || <span class="string">"<span class="keyword">DELETE</span>"</span>.equals(httpMethod)) &#123;</span><br><span class="line">           connection.setDoOutput(true);</span><br><span class="line">       &#125;</span><br><span class="line">       else &#123;</span><br><span class="line">           connection.setDoOutput(false);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       connection.setRequestMethod(httpMethod);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以看到setInstanceFollowRedirects，get请求是可以重定向的，其他方法禁止了重定向，于是建个SimpleClientHttpRequestFactory的子类，禁用重定向。</p><p>于是乎 NoRedirectClientHttpRequestFactory.java</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">HttpURLConnection</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.<span class="type">SimpleClientHttpRequestFactory</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">NoRedirectClientHttpRequestFactory</span> <span class="keyword">extends</span> <span class="title">SimpleClientHttpRequestFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void prepareConnection(<span class="type">HttpURLConnection</span> connection, <span class="type">String</span> httpMethod) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">super</span>.prepareConnection(connection, httpMethod);</span><br><span class="line">        <span class="comment">// 禁止自动重定向</span></span><br><span class="line">        connection.setFollowRedirects(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">N</span><span class="attribute">o</span><span class="attribute">R</span><span class="attribute">e</span><span class="attribute">d</span><span class="attribute">i</span><span class="attribute">r</span><span class="attribute">e</span><span class="attribute">c</span><span class="attribute">t</span><span class="attribute">C</span><span class="attribute">l</span><span class="attribute">i</span><span class="attribute">e</span><span class="attribute">n</span><span class="attribute">t</span><span class="attribute">H</span><span class="attribute">t</span><span class="attribute">t</span><span class="attribute">p</span><span class="attribute">R</span><span class="attribute">e</span><span class="attribute">q</span><span class="attribute">u</span><span class="attribute">e</span><span class="attribute">s</span><span class="attribute">t</span><span class="attribute">F</span><span class="attribute">a</span><span class="attribute">c</span><span class="attribute">t</span><span class="attribute">o</span><span class="attribute">r</span><span class="attribute">y</span> <span class="attribute">h</span><span class="attribute">t</span><span class="attribute">t</span><span class="attribute">p</span><span class="attribute">R</span><span class="attribute">e</span><span class="attribute">q</span><span class="attribute">u</span><span class="attribute">e</span><span class="attribute">s</span><span class="attribute">t</span><span class="attribute">F</span><span class="attribute">a</span><span class="attribute">c</span><span class="attribute">t</span><span class="attribute">o</span><span class="attribute">r</span><span class="attribute">y</span> = new NoRedirectClientHttpRequestFactory();</span><br><span class="line"><span class="attribute">RestTemplate restTemplate</span> = new RestTemplate(httpRequestFactory);</span><br></pre></td></tr></table></figure><p>接着，似乎更换ClientHttpRequestFactory并不合心意，还是要使用HttpComponentsClientHttpRequestFactory来实现，HttpComponentsClientHttpRequestFactory是可以自定义HttpClient的，于是查到了HttpClient头上，HttpClient是可以设置Redirect的，</p><p>第二种方式：</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpClient</span> httpClient = <span class="type">HttpClientBuilder</span>.create()</span><br><span class="line">                .setRedirectStrategy(<span class="function"><span class="keyword">new</span> <span class="title">LaxRedirectStrategy</span>())</span></span><br><span class="line"><span class="function">                .<span class="title">build</span>();</span></span><br><span class="line"><span class="function"><span class="title">httpRequestFactory</span>.<span class="title">setHttpClient</span>(httpClient);</span></span><br><span class="line"><span class="function"><span class="title">RestTemplate</span> <span class="title">restTemplate</span> = <span class="title">new</span> <span class="title">RestTemplate</span>(httpRequestFactory);</span></span><br></pre></td></tr></table></figure><p>默认提供了两个类，DefaultRedirectStrategy和LaxRedirectStrategy，LaxRedirectStrategy继承自DefaultRedirectStrategy</p><p>DefaultRedirectStrategy.java</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Redirectable methods.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span>[] REDIRECT_METHODS = <span class="keyword">new</span> <span class="keyword">String</span>[] &#123;</span><br><span class="line">       HttpGet.METHOD_NAME,</span><br><span class="line">       HttpHead.METHOD_NAME</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>LaxRedirectStrategy.java</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ====================================================================</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * "License"); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment"> * software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment"> * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment"> * KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment"> * specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment"> * under the License.</span></span><br><span class="line"><span class="comment"> * ====================================================================</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This software consists of voluntary contributions made by many</span></span><br><span class="line"><span class="comment"> * individuals on behalf of the Apache Software Foundation.  For more</span></span><br><span class="line"><span class="comment"> * information on the Apache Software Foundation, please see</span></span><br><span class="line"><span class="comment"> * &lt;http://www.apache.org/&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.http.impl.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.annotation.<span class="type">Contract</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.annotation.<span class="type">ThreadingBehavior</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.<span class="type">HttpDelete</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.<span class="type">HttpGet</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.<span class="type">HttpHead</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.<span class="type">HttpPost</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Lax &#123;@link org.apache.http.client.RedirectStrategy&#125; implementation</span></span><br><span class="line"><span class="comment"> * that automatically redirects all HEAD, GET, POST, and DELETE requests.</span></span><br><span class="line"><span class="comment"> * This strategy relaxes restrictions on automatic redirection of</span></span><br><span class="line"><span class="comment"> * POST methods imposed by the HTTP specification.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @since 4.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Contract</span>(threading = <span class="type">ThreadingBehavior</span>.<span class="type">IMMUTABLE</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LaxRedirectStrategy</span> <span class="keyword">extends</span> <span class="title">DefaultRedirectStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public static <span class="keyword">final</span> <span class="type">LaxRedirectStrategy</span> <span class="type">INSTANCE</span> = <span class="keyword">new</span> <span class="type">LaxRedirectStrategy</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Redirectable methods.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> <span class="type">String</span>[] <span class="type">REDIRECT_METHODS</span> = <span class="keyword">new</span> <span class="type">String</span>[] &#123;</span><br><span class="line">        <span class="type">HttpGet</span>.<span class="type">METHOD_NAME</span>,</span><br><span class="line">        <span class="type">HttpPost</span>.<span class="type">METHOD_NAME</span>,</span><br><span class="line">        <span class="type">HttpHead</span>.<span class="type">METHOD_NAME</span>,</span><br><span class="line">        <span class="type">HttpDelete</span>.<span class="type">METHOD_NAME</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> boolean isRedirectable(<span class="keyword">final</span> <span class="type">String</span> method) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> <span class="type">String</span> m: <span class="type">REDIRECT_METHODS</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.equalsIgnoreCase(method)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就很清晰了，copy一份LaxRedirectStrategy的代码，改写掉REDIRECT_METHODS中的定义方法，如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.http.annotation.Contract;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.annotation.ThreadingBehavior;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.DefaultRedirectStrategy;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@ClassName: MyRedirectStrategy </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@Description: TODO</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@author thinklight</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@date 2018年4月20日 下午2:47:29 </span></span></span><br><span class="line"><span class="comment"><span class="markdown">*</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"><span class="meta">@Contract</span>(threading = ThreadingBehavior.IMMUTABLE)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyRedirectStrategy</span>  <span class="keyword">extends</span> <span class="title">DefaultRedirectStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">final</span> MyRedirectStrategy INSTANCE = <span class="keyword">new</span> MyRedirectStrategy();</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * Redirectable methods.</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    private <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">String</span>[] REDIRECT_METHODS = <span class="keyword">new</span> <span class="built_in">String</span>[] &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    protected boolean isRedirectable(<span class="keyword">final</span> <span class="built_in">String</span> method) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> <span class="built_in">String</span> m: REDIRECT_METHODS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.equalsIgnoreCase(method)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ribbon+微信各种重定向问题，解决了。</p><p>第三种方式：</p><p>自己蠢了，今天因为cookie的问题发现了简单的方式</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpClient httpClient = HttpClientBuilder.create<span class="params">()</span><span class="string">.disableCookieManagement</span><span class="params">()</span><span class="string">.disableRedirectHandling</span><span class="params">()</span><span class="string">.build</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">Autowired</span></span><br><span class="line">    <span class="type">RestTemplate</span> restTemplate;</span><br><span class="line">    </span><br><span class="line">    @<span class="type">Bean</span></span><br><span class="line">    @<span class="type">LoadBalanced</span></span><br><span class="line">    <span class="type">RestTemplate</span> restTemplate() &#123;</span><br><span class="line">        <span class="type">HttpComponentsClientHttpRequestFactory</span> httpRequestFactory = <span class="function"><span class="keyword">new</span> <span class="title">HttpComponentsClientHttpRequestFactory</span>();</span></span><br><span class="line"><span class="function"><span class="comment">//        NoRedirectClientHttpRequestFactory httpRequestFactory = new NoRedirectClientHttpRequestFactory();// 此类型不能使用httpClient</span></span></span><br><span class="line"><span class="function">        <span class="title">httpRequestFactory</span>.<span class="title">setConnectionRequestTimeout</span>(<span class="number">2000</span>);</span></span><br><span class="line"><span class="function">        <span class="title">httpRequestFactory</span>.<span class="title">setConnectTimeout</span>(<span class="number">10000</span>);</span></span><br><span class="line"><span class="function">        <span class="title">httpRequestFactory</span>.<span class="title">setReadTimeout</span>(<span class="number">7200000</span>);</span></span><br><span class="line"><span class="function">        <span class="comment">// HttpClient httpClient = HttpClientBuilder.create()</span></span></span><br><span class="line"><span class="function">        <span class="comment">//        .setRedirectStrategy(new MyRedirectStrategy())</span></span></span><br><span class="line"><span class="function">        <span class="comment">//        .build(); 　　　　 HttpClient httpClient = HttpClientBuilder.create().disableCookieManagement().disableRedirectHandling().build();</span></span></span><br><span class="line"><span class="function">        <span class="title">httpRequestFactory</span>.<span class="title">setHttpClient</span>(httpClient);</span></span><br><span class="line"><span class="function">        <span class="title">RestTemplate</span> <span class="title">restTemplate</span> = <span class="title">new</span> <span class="title">RestTemplate</span>(httpRequestFactory);</span></span><br><span class="line"><span class="function">        <span class="title">logger</span>.<span class="title">debug</span>("指定字符编码为<span class="type">UTF</span><span class="number">-8</span>,原编码为<span class="type">ISO</span><span class="number">-8859</span><span class="number">-1</span>");</span></span><br><span class="line"><span class="function">        <span class="title">restTemplate</span>.<span class="title">getMessageConverters</span>().<span class="title">set</span>(<span class="number">1</span>, new <span class="type">StringHttpMessageConverter</span>(<span class="type">StandardCharsets</span>.<span class="type">UTF_8</span>));</span></span><br><span class="line"><span class="function">        <span class="title">logger</span>.<span class="title">debug</span>("<span class="type">RestTemple</span>默认能转换为application/json，转换追加text/plain类型");</span></span><br><span class="line"><span class="function">        <span class="title">restTemplate</span>.<span class="title">getMessageConverters</span>().<span class="title">add</span>(new <span class="type">WxMappingJackson2HttpMessageConverter</span>());</span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">restTemplate</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br></pre></td></tr></table></figure><p></p><p>重定向参考：<a href="https://www.dozer.cc/2014/05/disable-resttemplate-redirect.html" target="_blank" rel="noopener">https://www.dozer.cc/2014/05/disable-resttemplate-redirect.html</a></p><p>cookie参考：<a href="https://stackoverflow.com/questions/10175649/resttemplate-and-cookie" target="_blank" rel="noopener">https://stackoverflow.com/questions/10175649/resttemplate-and-cookie</a></p><p><a href="https://stackoverflow.com/questions/22853321/resttemplate-client-with-cookies" target="_blank" rel="noopener">https://stackoverflow.com/questions/22853321/resttemplate-client-with-cookies</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 最近在做一个转发功能，zuul + ribbon + resttemplate 进行路由、负载、转发的功能 基本准备就绪，在微信自动登陆那遇到了一个坑，ribbon 系统用resttemplate 转发A系统的资源，在微信自动登陆的地方，A系统重定向到微信的地址，类似下面的代码 结果resttemp阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java ServletContextListener 实现UDP监听</title>
    <link href="https://lossingdawn.top/2018/03/20/java%20ServletContextListener%20%E5%AE%9E%E7%8E%B0UDP%E7%9B%91%E5%90%AC/"/>
    <id>https://lossingdawn.top/2018/03/20/java ServletContextListener 实现UDP监听/</id>
    <published>2018-03-20T07:24:00.000Z</published>
    <updated>2018-06-13T15:31:21.408Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 使用spring boot实现项目启动时的监听， UDPListener import java.io.IOException;import java.io.UnsupportedEncodingException;import java.net.DatagramPacket;import java阅读全文</p><a id="more"></a><p>使用spring boot实现项目启动时的监听，</p><p>UDPListener</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>import java.io.IOException;<br>import java.io.UnsupportedEncodingException;<br>import java.net.DatagramPacket;<br>import java.net.DatagramSocket;<br>import java.net.SocketException;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>import javax.servlet.ServletContextEvent;<br>import javax.servlet.ServletContextListener;<br>import javax.servlet.annotation.WebListener;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_UDP_DATA_SIZE = <span class="number">4096</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UDP_PORT = <span class="number">26666</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"========UDPListener Initialized========="</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123; 　　　　　　　<span class="comment">// 启动一个线程，监听UDP数据报</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> UDPProcess(UDP_PORT)).start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UDPProcess</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UDPProcess</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> SocketException </span>&#123;</span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket(port);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            System.out.println(<span class="string">"=======UDPProcess======"</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[MAX_UDP_DATA_SIZE];</span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, buffer.length);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.receive(packet);</span><br><span class="line">                    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Process(packet)).start();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Process</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Process</span><span class="params">(DatagramPacket packet)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = packet.getData();<span class="comment">// 接收到的UDP信息，然后解码</span></span><br><span class="line">            String srt1 = <span class="keyword">new</span> String(buffer,<span class="string">"GBK"</span>).trim();</span><br><span class="line">            String srt2 = <span class="keyword">new</span> String(buffer, <span class="string">"UTF-8"</span>).trim();</span><br><span class="line">            String srt3 = <span class="keyword">new</span> String(buffer,<span class="string">"ISO-8859-1"</span>).trim();</span><br><span class="line">            System.out.println(<span class="string">"=======Process srt1 GBK======"</span> + srt1);</span><br><span class="line">            System.out.println(<span class="string">"=======Process srt2 UTF-8======"</span> + srt2);</span><br><span class="line">            System.out.println(<span class="string">"=======Process srt3 ISO-8859-1======"</span> + srt3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            System.out.println(<span class="string">"====Process run====="</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"========UDPListener Destroyed========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DemoApplication</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@ServletComponentScan</span> </span><br><span class="line">public class DemoApplication &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ServletComponentScan</span> Servlet扫描，启动时把servlet、<span class="keyword">filter</span>、listener自动扫描注入 UDP测试客户端（也可以用测试工具发送UDP包测试）：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>import java.io.IOException;<br>import java.net.DatagramPacket;<br>import java.net.DatagramSocket;<br>import java.net.InetAddress;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPClientTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_HOSTNAME = <span class="string">"localhost"</span>;</span><br><span class="line">    <span class="comment">// 服务器端口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">26666</span>;</span><br><span class="line">    <span class="comment">// 本地发送端口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOCAL_PORT = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1，创建udp服务。通过DatagramSocket对象。</span></span><br><span class="line">            DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(LOCAL_PORT);</span><br><span class="line">            <span class="comment">// 2，确定数据，并封装成数据包。DatagramPacket(byte[] buf, int length, InetAddress</span></span><br><span class="line">            <span class="comment">// address, int port)</span></span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="string">"你好，世界"</span>.getBytes();</span><br><span class="line">            DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length, InetAddress.getByName(SERVER_HOSTNAME),</span><br><span class="line">                    SERVER_PORT);</span><br><span class="line">            <span class="comment">// 3，通过socket服务，将已有的数据包发送出去。通过send方法。</span></span><br><span class="line">            socket.send(dp);</span><br><span class="line">            <span class="comment">// 4，关闭资源。</span></span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br></pre></td></tr></table></figure><p><img src="https://images2018.cnblogs.com/blog/670989/201803/670989-20180320154922517-812686880.png" alt=""></p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 使用spring boot实现项目启动时的监听， UDPListener import java.io.IOException;import java.io.UnsupportedEncodingException;import java.net.DatagramPacket;import java阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Weex起步</title>
    <link href="https://lossingdawn.top/2018/03/01/weex%E8%B5%B7%E6%AD%A5/"/>
    <id>https://lossingdawn.top/2018/03/01/weex起步/</id>
    <published>2018-03-01T06:56:00.000Z</published>
    <updated>2018-06-13T15:31:21.408Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: weex文档地址： <a href="http://weex" target="_blank" rel="noopener">http://weex</a> <a href="http://project.io/cn/guide/index.html" target="_blank" rel="noopener">project.io/cn/guide/index.html</a> weex的文档过于简单，加上js语法 &amp; android &amp; ios本身也有很多的问题，导致新接触weex，几乎步步是坑 在此记录一下weex的一些探索 一、初始化 按照官方的步骤走， 接着就遇阅读全文</p><a id="more"></a><p>weex文档地址：<br><a href="http://weex-project.io/cn/guide/index.html" target="_blank" rel="noopener">http://weex-project.io/cn/guide/index.html</a></p><p>weex的文档过于简单，加上js语法 &amp; android &amp; ios本身也有很多的问题，导致新接触weex，几乎步步是坑</p><p>在此记录一下weex的一些探索</p><h2 id="一-初始化"><a class="markdownIt-Anchor" href="#一-初始化"></a> 一、初始化</h2><p>按照官方的步骤走，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装node</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装weex-toolkit</span></span><br><span class="line">npm install weex-toolkit -g</span><br><span class="line"><span class="meta">#</span><span class="bash">创建项目</span></span><br><span class="line">weex create awesome-app</span><br><span class="line"><span class="meta">#</span><span class="bash">开发</span></span><br><span class="line">cd awesome-app</span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>接着就遇到了语法问题，具体如下所示<br><a href="https://segmentfault.com/q/1010000013417243?_ea=3379756" target="_blank" rel="noopener">https://segmentfault.com/q/1010000013417243?_ea=3379756</a></p><p>待续。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: weex文档地址： &lt;a href=&quot;http://weex&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://weex&lt;/a&gt; &lt;a href=&quot;http://project.io/cn/guide/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;project.io/cn/guide/index.html&lt;/a&gt; weex的文档过于简单，加上js语法 &amp;amp; android &amp;amp; ios本身也有很多的问题，导致新接触weex，几乎步步是坑 在此记录一下weex的一些探索 一、初始化 按照官方的步骤走， 接着就遇阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mongo去重统计</title>
    <link href="https://lossingdawn.top/2017/11/10/mongo%E5%8E%BB%E9%87%8D%E7%BB%9F%E8%AE%A1/"/>
    <id>https://lossingdawn.top/2017/11/10/mongo去重统计/</id>
    <published>2017-11-10T02:50:00.000Z</published>
    <updated>2018-06-13T15:31:22.668Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 表名：parkUserCost id: patkId: userId: phone: costVal: 适合特定条件下，对某些字段进行去重筛选。（比如限定抢购） 第一种，使用first操作符。first 会把数组的第一个元素取出，作为一个对象。 第二种，使用$slice操作符。从数组的第几个开始阅读全文</p><a id="more"></a><p>表名：parkUserCost<br>id:<br>patkId:<br>userId:<br>phone:<br>costVal:<br>适合特定条件下，对某些字段进行去重筛选。（比如限定抢购）</p><p>第一种，使用(first操作符。)first 会把数组的第一个元素取出，作为一个对象。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 第一种（可转java版本）</span><br><span class="line">db.getCollection(<span class="string">'parkUserCost'</span>).aggregate([</span><br><span class="line">   &#123;<span class="string">"$match"</span> : &#123;</span><br><span class="line">      <span class="string">"$and"</span> : [</span><br><span class="line">          // &#123;<span class="string">"name"</span> : <span class="string">"1640"</span>&#125; // 筛选条件</span><br><span class="line">           ]</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#123;<span class="string">"$group"</span> : &#123;</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"$phone"</span>,</span><br><span class="line">        <span class="string">"val"</span> : &#123;<span class="string">"$first"</span> :  <span class="string">"$costVal"</span> &#125;,</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">    &#123;<span class="string">"$group"</span> : &#123;</span><br><span class="line">         <span class="string">"_id"</span> : &#123;&#125;,</span><br><span class="line">        <span class="string">"totalVal"</span> :&#123;<span class="string">"$sum"</span> : <span class="string">"$val"</span>&#125;</span><br><span class="line">         &#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>第二种，使用$slice操作符。从数组的第几个开始，截取几个，保存到数组</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 第二种</span><br><span class="line">db.getCollection(<span class="string">'parkUserCost'</span>).aggregate([</span><br><span class="line">   &#123;<span class="string">"$match"</span> : &#123;</span><br><span class="line">      <span class="string">"$and"</span> : [</span><br><span class="line">          // &#123;<span class="string">"name"</span> : <span class="string">"1640"</span>&#125; // 筛选条件</span><br><span class="line">           ]</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#123;<span class="string">"$group"</span> : &#123;</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"$phone"</span>,</span><br><span class="line">        <span class="string">"val"</span> : &#123;<span class="string">"$push"</span> :  <span class="string">"$costVal"</span> &#125;,</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">    &#123;<span class="string">"$project"</span> : &#123;</span><br><span class="line">         <span class="string">"val"</span> :&#123;<span class="string">"$sum"</span> :&#123;<span class="string">"$slice"</span> : [<span class="string">"$val"</span>, <span class="number">0</span>, <span class="number">1</span> ] &#125;&#125;</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">    &#123;<span class="string">"$group"</span> : &#123;</span><br><span class="line">         <span class="string">"_id"</span> : &#123;&#125;,</span><br><span class="line">        <span class="string">"totalVal"</span> :&#123;<span class="string">"$sum"</span> : <span class="string">"$val"</span>&#125;</span><br><span class="line">         &#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>第三种，使用$arrayElemAt，返回数组的第几个元素。序号的循环的，最后一个使用-1</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 第三种</span><br><span class="line">db.getCollection(<span class="string">'parkUserCost'</span>).aggregate([</span><br><span class="line">   &#123;<span class="string">"$match"</span> : &#123;</span><br><span class="line">      <span class="string">"$and"</span> : [</span><br><span class="line">          // &#123;<span class="string">"name"</span> : <span class="string">"1640"</span>&#125; // 筛选条件</span><br><span class="line">           ]</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#123;<span class="string">"$group"</span> : &#123;</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"$phone"</span>,</span><br><span class="line">        <span class="string">"val"</span> : &#123;<span class="string">"$push"</span> :  <span class="string">"$costVal"</span> &#125;,</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">    &#123;<span class="string">"$project"</span> : &#123;</span><br><span class="line">        <span class="string">"val"</span> :  &#123; <span class="string">"$arrayElemAt"</span> :[ <span class="string">"$val"</span> , <span class="number">0</span>] &#125;</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">    &#123;<span class="string">"$group"</span> : &#123;</span><br><span class="line">         <span class="string">"_id"</span> : &#123;&#125;,</span><br><span class="line">        <span class="string">"totalVal"</span> :&#123;<span class="string">"$sum"</span> : <span class="string">"$val"</span>&#125;</span><br><span class="line">         &#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>若要表中的全部字段，可使用$$ROOT获取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">'parkUserCost'</span>).aggregate([</span><br><span class="line">   &#123;<span class="string">"<span class="variable">$match</span>"</span> : &#123;</span><br><span class="line">      <span class="string">"<span class="variable">$and</span>"</span> : [</span><br><span class="line">          // &#123;<span class="string">"name"</span> : <span class="string">"1640"</span>&#125; // 筛选条件</span><br><span class="line">           ]</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#123;<span class="string">"<span class="variable">$group</span>"</span> : &#123;</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"<span class="variable">$phone</span>"</span>,</span><br><span class="line">        <span class="string">"item"</span>: &#123;<span class="string">"<span class="variable">$first</span>"</span>: <span class="string">"$<span class="variable">$ROOT</span>"</span>&#125;,</span><br><span class="line">        <span class="string">"val"</span> : &#123;<span class="string">"<span class="variable">$first</span>"</span> :  <span class="string">"<span class="variable">$costVal</span>"</span> &#125;,</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p><a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-tutorial.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 表名：parkUserCost id: patkId: userId: phone: costVal: 适合特定条件下，对某些字段进行去重筛选。（比如限定抢购） 第一种，使用first操作符。first 会把数组的第一个元素取出，作为一个对象。 第二种，使用$slice操作符。从数组的第几个开始阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Backbone之路由锚点的替换</title>
    <link href="https://lossingdawn.top/2017/09/26/backbone%E4%B9%8B%E8%B7%AF%E7%94%B1%E9%94%9A%E7%82%B9%E7%9A%84%E6%9B%BF%E6%8D%A2/"/>
    <id>https://lossingdawn.top/2017/09/26/backbone之路由锚点的替换/</id>
    <published>2017-09-26T02:10:00.000Z</published>
    <updated>2018-06-13T15:31:21.408Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 1、需求 由于项目一开始做的时候不甚完善，所有的网页没有路由功能，导致一些搜索结果在页面跳转之后，没有被记录下来，在页面跳转之后回退，得到的是页面最原始的结果，没有指定的搜索条件。最近项目的在完善这些小的细节，所以在此记录一下。 2、操作 由于项目的所有传参都是使用 ‘?’ 来标识的，而Backbo阅读全文</p><a id="more"></a><h3 id="1-需求"><a class="markdownIt-Anchor" href="#1-需求"></a> 1、需求</h3><p>由于项目一开始做的时候不甚完善，所有的网页没有路由功能，导致一些搜索结果在页面跳转之后，没有被记录下来，在页面跳转之后回退，得到的是页面最原始的结果，没有指定的搜索条件。最近项目的在完善这些小的细节，所以在此记录一下。</p><h3 id="2-操作"><a class="markdownIt-Anchor" href="#2-操作"></a> 2、操作</h3><p>由于项目的所有传参都是使用 ‘?’ 来标识的，而Backbone的路由是使用锚点 ‘/#’ 来的，为了兼容以前的做法，不得不去修改Backbone的源码，还好路由部分的源码不多</p><h3 id="21-修改backbone的源码版本133"><a class="markdownIt-Anchor" href="#21-修改backbone的源码版本133"></a> 2.1 修改Backbone的源码，版本1.3.3</h3><p>1）修改标识 ‘/#’ -&gt; ‘?’</p><p>把源代码中的字符串中的’/#‘修改为’?’，把单个的’/#‘修改为’?’</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pathStripper = /#.*$/;</span><br><span class="line"></span><br><span class="line">修改为：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pathStripper = /\?.*$/;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.location.replace(rootPath + <span class="string">'#'</span> + <span class="keyword">this</span>.getPath());</span><br><span class="line"></span><br><span class="line">修改为：</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.location.replace(rootPath + <span class="string">'?'</span> + <span class="keyword">this</span>.getPath());</span><br></pre></td></tr></table></figure><p>注：字符串中的?需要\来转义，字符不需要<br>2)修改锚点的路由设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">_updateHash: <span class="function"><span class="keyword">function</span>(<span class="params">location, fragment, replace</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (replace) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> href = location.href.replace(<span class="regexp">/(javascript:|\?).*$/</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">location.replace(href + <span class="string">'?'</span> + fragment);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Some browsers require that `hash` contains a leading #.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        location.hash = '?' + fragment;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> href = location.href.replace(<span class="regexp">/(javascript:|\?).*$/</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//          window.history.pushState(&#123;&#125;, 0, href + '?' + fragment);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.history.replaceState(&#123;&#125;, <span class="number">0</span>, href + <span class="string">'?'</span> + fragment);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：</p><p>location.hash是原始的修改参数方法，会替换url中’/#'以及后的所有内容</p><p>window.history.pushState可选目标方法，会增加一次历史记录，刷新页面</p><p>window.history.replaceState可选目标方法，会替换掉当前的页面记录，不刷新页面（目前选用方案）</p><h3 id="22-写一个util"><a class="markdownIt-Anchor" href="#22-写一个util"></a> 2.2 写一个Util</h3><p>写一个工具类用于Router的快速使用，和统一修改</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* RouterUtil.js</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> RouterUtil = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Backbone Router with a custom parameter extractor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Router = Backbone.Router.extend(&#123;</span><br><span class="line"></span><br><span class="line">params : <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">routes : &#123;</span><br><span class="line"></span><br><span class="line"><span class="string">"*actions"</span>: <span class="string">"defaultRoute"</span> <span class="comment">// 匹配 http://example.com/#anything-here</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">defaultRoute : <span class="function"><span class="keyword">function</span><span class="params">(params)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Router.params = params;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> routerUtil = &#123;</span><br><span class="line"></span><br><span class="line">web_router : <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">init()&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!routerUtil.web_router)&#123;</span><br><span class="line"></span><br><span class="line">routerUtil.web_router = <span class="keyword">new</span> Router;</span><br><span class="line"></span><br><span class="line">Backbone.history.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">getParam(cbFn)&#123;</span><br><span class="line"></span><br><span class="line">routerUtil.init();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取#之后的参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cbFn)&#123;</span><br><span class="line"></span><br><span class="line">cbFn(Router.params);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">route(returnUrl, cbFn)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态的调整 路由规则 例：topic/:pageno/:pagesize</span></span><br><span class="line"></span><br><span class="line">routerUtil.web_router.route(returnUrl,<span class="string">"page"</span>, cbFn)</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">start()&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用路由</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!Backbone.History.started)&#123;</span><br><span class="line"></span><br><span class="line">Backbone.history.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">stop()&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭路由</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Backbone.History.started)&#123;</span><br><span class="line"></span><br><span class="line">Backbone.history.stop();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">navigate(returnUrl)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 重构 ，路由导向</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此处根据自己的需求去构建参数拼接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//returnUrl为'?'之后的内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(returnUrl)&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">returnUrl = <span class="string">"searchType="</span> + SearchBoxUtil.searchType + <span class="string">"&amp;"</span> + SearchBoxUtil.formData;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">routerUtil.web_router.navigate(returnUrl, &#123;</span><br><span class="line"></span><br><span class="line">trigger: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> routerUtil;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="23-使用"><a class="markdownIt-Anchor" href="#23-使用"></a> 2.3 使用</h3><p>在js中引用的一些方法</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面的初始化</span></span><br><span class="line"></span><br><span class="line">initPagi : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">RouterUtil.getParam(<span class="function"><span class="keyword">function</span><span class="params">(params)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!params)&#123;</span><br><span class="line"></span><br><span class="line">params = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理参数</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询函数</span></span><br><span class="line"></span><br><span class="line">queryData : <span class="function"><span class="keyword">function</span><span class="params">(returnUrl,isInitSearchBox)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!returnUrl)&#123;</span><br><span class="line"></span><br><span class="line">returnUrl = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isInitSearchBox)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一次初始化查询</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非第一次初始化查询</span></span><br><span class="line"></span><br><span class="line">RouterUtil.navigate(returnUrl);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>菜鸟一枚，随便弄弄的一点代码，有更好的方案请赐教</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 1、需求 由于项目一开始做的时候不甚完善，所有的网页没有路由功能，导致一些搜索结果在页面跳转之后，没有被记录下来，在页面跳转之后回退，得到的是页面最原始的结果，没有指定的搜索条件。最近项目的在完善这些小的细节，所以在此记录一下。 2、操作 由于项目的所有传参都是使用 ‘?’ 来标识的，而Backbo阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ctrl Shift O失效</title>
    <link href="https://lossingdawn.top/2017/08/25/ctrl%20shift%20o%E5%A4%B1%E6%95%88/"/>
    <id>https://lossingdawn.top/2017/08/25/ctrl shift o失效/</id>
    <published>2017-08-25T02:24:00.000Z</published>
    <updated>2018-06-13T15:31:22.355Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 是这样的。preference -&gt; general -&gt; keys ,找到Organize Imports ,然后 在 “WHEN”里面 要选择 Editing JAVA SOURCE。 这个是最重要的阅读全文</p><a id="more"></a><p>是这样的。preference -&gt; general -&gt; keys ,找到Organize Imports ,然后 在 “WHEN”里面 要选择 Editing JAVA SOURCE。  <br>这个是最重要的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 是这样的。preference -&amp;gt; general -&amp;gt; keys ,找到Organize Imports ,然后 在 “WHEN”里面 要选择 Editing JAVA SOURCE。 这个是最重要的阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>findBugs英文代号的对照表</title>
    <link href="https://lossingdawn.top/2017/04/28/findBugs%E8%8B%B1%E6%96%87%E4%BB%A3%E5%8F%B7%E7%9A%84%E5%AF%B9%E7%85%A7%E8%A1%A8/"/>
    <id>https://lossingdawn.top/2017/04/28/findBugs英文代号的对照表/</id>
    <published>2017-04-28T03:09:00.000Z</published>
    <updated>2018-06-13T15:31:22.668Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: findBugs错误英文翻译rule.findbugs.IMSE_DONT_CATCH_IMSE.name=不良实践 - 捕获可疑IllegalMonitorStateException rule.findbugs.BX_BOXING_IMMEDIATELY_UNBOXED.name=性能 - 基本类型包装之后立刻解包 rule.findbugs.IJU_SETUP_NO_SUPER.name=…阅读全文</p><a id="more"></a><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br></pre></td><td class="code"><pre><span class="line">findBugs错误英文翻译 rule.findbugs.IMSE_DONT_CATCH_IMSE.<span class="attribute">name</span>=不良实践 - 捕获可疑IllegalMonitorStateException</span><br><span class="line">rule.findbugs.BX_BOXING_IMMEDIATELY_UNBOXED.<span class="attribute">name</span>=性能 - 基本类型包装之后立刻解包</span><br><span class="line">rule.findbugs.IJU_SETUP_NO_SUPER.<span class="attribute">name</span>=使用错误 - TestCase定义的setUp没有调用super.setUp()</span><br><span class="line">rule.findbugs.TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED.<span class="attribute">name</span>=使用错误 - 某个值使用了注解限制类型，但是这个限制永远不会发生</span><br><span class="line">rule.findbugs.TLW_TWO_LOCK_WAIT.<span class="attribute">name</span>=多线程错误 - 等待两个被持有的锁</span><br><span class="line">rule.findbugs.RV_01_TO_INT.<span class="attribute">name</span>=使用错误 - 0至1的随机数被当做整数0</span><br><span class="line">rule.findbugs.NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE.<span class="attribute">name</span>=高危 - 参数必须非<span class="literal">null</span>但是标记为可为<span class="literal">null</span></span><br><span class="line">rule.findbugs.RV_ABSOLUTE_VALUE_OF_RANDOM_INT.<span class="attribute">name</span>=使用错误 - 尝试计算32位随机整数的绝对值</span><br><span class="line">rule.findbugs.EC_INCOMPATIBLE_ARRAY_COMPARE.<span class="attribute">name</span>=使用错误 - 使用equals()比较不兼容的数组</span><br><span class="line">rule.findbugs.UL_UNRELEASED_LOCK_EXCEPTION_PATH.<span class="attribute">name</span>=多线程错误 - 方法没有在所有异常路径释放锁</span><br><span class="line">rule.findbugs.SE_NONSTATIC_SERIALVERSIONID.<span class="attribute">name</span>=不良实践 - serialVersionUID不是static的</span><br><span class="line">rule.findbugs.UCF_USELESS_CONTROL_FLOW.<span class="attribute">name</span>=高危 - 无用控制流</span><br><span class="line">rule.findbugs.BC_IMPOSSIBLE_CAST.<span class="attribute">name</span>=使用错误 - 不可能的转换</span><br><span class="line">rule.findbugs.XSS_REQUEST_PARAMETER_TO_SEND_ERROR.<span class="attribute">name</span>=安全风险 - servlet的反射导致跨站脚本漏洞</span><br><span class="line">rule.findbugs.DM_NEW_FOR_GETCLASS.<span class="attribute">name</span>=性能 - 仅为了获得一个方法就创建了一个对象</span><br><span class="line">rule.findbugs.OBL_UNSATISFIED_OBLIGATION.<span class="attribute">name</span>=试验 - 方法可能在清理流或资源时失败</span><br><span class="line">rule.findbugs.UW_UNCOND_WAIT.<span class="attribute">name</span>=多线程错误 - 无条件等待</span><br><span class="line">rule.findbugs.DLS_DEAD_LOCAL_STORE_OF_NULL.<span class="attribute">name</span>=高危 - 把<span class="literal">null</span>设置给不会用到的局部变量</span><br><span class="line">rule.findbugs.NM_CLASS_NAMING_CONVENTION.<span class="attribute">name</span>=类名应该以大写字母开头</span><br><span class="line">rule.findbugs.RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN.<span class="attribute">name</span>=使用错误 - 怀疑对两个布尔值的引用进行比较</span><br><span class="line">rule.findbugs.MWN_MISMATCHED_NOTIFY.<span class="attribute">name</span>=多线程错误- 不匹配的notify()</span><br><span class="line">rule.findbugs.NM_VERY_CONFUSING.<span class="attribute">name</span>=错误 - 非常容易迷惑的方法名</span><br><span class="line">rule.findbugs.FI_NULLIFY_SUPER.<span class="attribute">name</span>=不良实践 - 空Finalizer禁用了超类的finalizer</span><br><span class="line">rule.findbugs.MTIA_SUSPECT_STRUTS_INSTANCE_FIELD.<span class="attribute">name</span>=高危 - 继承了struts Action的类使用了实例变量</span><br><span class="line">rule.findbugs.DM_STRING_CTOR.<span class="attribute">name</span>=性能 - 方法调用了效率很低的new String(String)构造方法</span><br><span class="line">rule.findbugs.STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE.<span class="attribute">name</span>=多线程错误 - 调用静态DateFormat</span><br><span class="line">rule.findbugs.NP_NULL_PARAM_DEREF_NONVIRTUAL.<span class="attribute">name</span>=使用错误 - 非虚拟方法调用向非空参数传入了<span class="literal">null</span></span><br><span class="line">rule.findbugs.FI_EMPTY.<span class="attribute">name</span>=不良实践 - 应该删除空的finalizer</span><br><span class="line">rule.findbugs.CD_CIRCULAR_DEPENDENCY.<span class="attribute">name</span>=试验 - 类间存在循环引用</span><br><span class="line">rule.findbugs.EC_UNRELATED_TYPES.<span class="attribute">name</span>=使用错误 - 使用equals()比较不同类型</span><br><span class="line">rule.findbugs.EI_EXPOSE_STATIC_REP2.<span class="attribute">name</span>=恶意代码漏洞 - 把可变对象保存到静态字段中可能会暴露内部静态状态</span><br><span class="line">rule.findbugs.DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY.<span class="attribute">name</span>=错误 - 对数组执行toString</span><br><span class="line">rule.findbugs.SIC_INNER_SHOULD_BE_STATIC_ANON.<span class="attribute">name</span>=性能 - 可以重构成一个静态内部类</span><br><span class="line">rule.findbugs.STI_INTERRUPTED_ON_UNKNOWNTHREAD.<span class="attribute">name</span>=错误 - 在thread实例上调用了静态Thread.interrupted()方法</span><br><span class="line">rule.findbugs.CN_IDIOM_NO_SUPER_CALL.<span class="attribute">name</span>=不良实践 - clone方法没有调用super.clone()</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_BAD_ARGUMENT.<span class="attribute">name</span>=错误用法 - 格式化字符串占位符与传入的参数不匹配</span><br><span class="line">rule.findbugs.EQ_DOESNT_OVERRIDE_EQUALS.<span class="attribute">name</span>=高危 - 类没有覆盖父类的equals方法</span><br><span class="line">rule.findbugs.BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY.<span class="attribute">name</span>=错误用法 - 集合转换为数组元素时发生的类型转换错误</span><br><span class="line">rule.findbugs.SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION.<span class="attribute">name</span>=不良实践 - 类是可扩展的，但是没有提供无参数的构造方法</span><br><span class="line">rule.findbugs.TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK.<span class="attribute">name</span>=错误用法 - 数值需要类型标示，但是却标记为未知</span><br><span class="line">rule.findbugs.SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS.<span class="attribute">name</span>=性能 - 可以筹够成一个静态内部类</span><br><span class="line">rule.findbugs.EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS.<span class="attribute">name</span>=不良实践 - equals检测不兼容的参数操作</span><br><span class="line">rule.findbugs.RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED.<span class="attribute">name</span>=错误用法 - 忽略了putIfAbsent的返回值，传递给putIfAbsent的值被重用</span><br><span class="line">rule.findbugs.STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE.<span class="attribute">name</span>=多线程错误 - 调用静态Calendar</span><br><span class="line">rule.findbugs.MS_CANNOT_BE_FINAL.<span class="attribute">name</span>=恶意代码漏洞 - 字段不是final的，不能防止恶意代码的攻击</span><br><span class="line">rule.findbugs.IS_INCONSISTENT_SYNC.<span class="attribute">name</span>=多线程错误 - 不一致的同步</span><br><span class="line">rule.findbugs.SE_NO_SERIALVERSIONID.<span class="attribute">name</span>=不良实践 - 类是可序列化的，但是没有定义serialVersionUID</span><br><span class="line">rule.findbugs.EI_EXPOSE_REP2.<span class="attribute">name</span>=恶意代码漏洞 - 可能暴露内部实现，通过与可变对象引用协作</span><br><span class="line">rule.findbugs.NM_METHOD_CONSTRUCTOR_CONFUSION.<span class="attribute">name</span>=错误用法 - 明显的方法/构造方法混淆</span><br><span class="line">rule.findbugs.ICAST_INTEGER_MULTIPLY_CAST_TO_LONG.<span class="attribute">name</span>=高危 - 整形乘法的结果转换为long型</span><br><span class="line">rule.findbugs.QF_QUESTIONABLE_FOR_LOOP.<span class="attribute">name</span>=高危 - <span class="keyword">for</span>循环中存在复杂，微妙或者错误的自增</span><br><span class="line">rule.findbugs.DLS_DEAD_STORE_OF_CLASS_LITERAL.<span class="attribute">name</span>=错误用法 - 类中保存了无用字符</span><br><span class="line">rule.findbugs.NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER.<span class="attribute">name</span>=不良实践 - 使用了未来java版本中成为关键字的标识</span><br><span class="line">rule.findbugs.BC_VACUOUS_INSTANCEOF.<span class="attribute">name</span>=高危 - instanceof会一直返回<span class="literal">true</span></span><br><span class="line">rule.findbugs.INT_VACUOUS_BIT_OPERATION.<span class="attribute">name</span>=高危 - 在整形上进行位操作时有一些位上出现空洞</span><br><span class="line">rule.findbugs.NP_NULL_INSTANCEOF.<span class="attribute">name</span>=错误用法 - 一个已知的<span class="literal">null</span>值被检测它是否是一个类型的实例</span><br><span class="line">rule.findbugs.SIC_THREADLOCAL_DEADLY_EMBRACE.<span class="attribute">name</span>=错误用法 - 非静态内部类和ThreadLocal的致命结合</span><br><span class="line">rule.findbugs.EQ_UNUSUAL.<span class="attribute">name</span>=高危 - 罕见的equals方法</span><br><span class="line">rule.findbugs.IJU_NO_TESTS.<span class="attribute">name</span>=错误用法 - TestCase没有任何测试</span><br><span class="line">rule.findbugs.EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC.<span class="attribute">name</span>=错误用法 - equals方法覆盖了父类的equals可能功能不符</span><br><span class="line">rule.findbugs.XFB_XML_FACTORY_BYPASS.<span class="attribute">name</span>=高危 - 方法直接调用了xml接口的一个具体实现</span><br><span class="line">rule.findbugs.SWL_SLEEP_WITH_LOCK_HELD.<span class="attribute">name</span>=多线程错误 - 方法在获得锁时调用了Thread.sleep()</span><br><span class="line">rule.findbugs.CN_IDIOM.<span class="attribute">name</span>=不良实践 - 类实现了Cloneable ，但是没有定义或使用clone方法</span><br><span class="line">rule.findbugs.WA_AWAIT_NOT_IN_LOOP.<span class="attribute">name</span>=多线程错误 - 未在循环中使用的Condition.await()</span><br><span class="line">rule.findbugs.DM_FP_NUMBER_CTOR.<span class="attribute">name</span>=性能 - 方法调用了低效的浮点书构造方法；应该使用静态的valueOf代替</span><br><span class="line">rule.findbugs.SF_SWITCH_NO_DEFAULT.<span class="attribute">name</span>=Switch语句中没有包含default</span><br><span class="line">rule.findbugs.NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE.<span class="attribute">name</span>=高危 - 调用返回返回值可能出现<span class="literal">null</span>值</span><br><span class="line">rule.findbugs.NP_CLONE_COULD_RETURN_NULL.<span class="attribute">name</span>=不良实践 - Clone方法可能返回<span class="literal">null</span></span><br><span class="line">rule.findbugs.MS_OOI_PKGPROTECT.<span class="attribute">name</span>=恶意代码漏洞 - 属性应该从接口中移除并将访问权限设置为包保护</span><br><span class="line">rule.findbugs.DM_BOXED_PRIMITIVE_TOSTRING.<span class="attribute">name</span>=性能 - 方法使用了装箱的基本类型只为了调用toString</span><br><span class="line">rule.findbugs.EQ_ABSTRACT_SELF.<span class="attribute">name</span>=不良实践 - 抽象类定义了协变的equals方法</span><br><span class="line">rule.findbugs.DM_STRING_TOSTRING.<span class="attribute">name</span>=性能 - 方法调用了String的toString()方法</span><br><span class="line">rule.findbugs.SE_METHOD_MUST_BE_PRIVATE.<span class="attribute">name</span>=错误用法 - 方法必须是private的为了让序列化正常工作</span><br><span class="line">rule.findbugs.DL_SYNCHRONIZATION_ON_BOOLEAN.<span class="attribute">name</span>=多线程错误 - 在Boolean上使用同步可能导致死锁</span><br><span class="line">rule.findbugs.UWF_UNWRITTEN_FIELD.<span class="attribute">name</span>=错误用法 - 未赋值属性</span><br><span class="line">rule.findbugs.IS2_INCONSISTENT_SYNC.<span class="attribute">name</span>=多线程错误 - 不一致的同步</span><br><span class="line">rule.findbugs.IM_AVERAGE_COMPUTATION_COULD_OVERFLOW.<span class="attribute">name</span>=高危 - 计算平均值可能溢出</span><br><span class="line">rule.findbugs.BIT_SIGNED_CHECK_HIGH_BIT.<span class="attribute">name</span>=错误用法 - 检查位运算的符号</span><br><span class="line">rule.findbugs.FL_MATH_USING_FLOAT_PRECISION.<span class="attribute">name</span>=错误用法 - 方法进行数学运算时使用了浮点数的精度</span><br><span class="line">rule.findbugs.WS_WRITEOBJECT_SYNC.<span class="attribute">name</span>=多线程错误 - 类的writeObject()方法是同步的，但是没有做其他事情</span><br><span class="line">rule.findbugs.RV_RETURN_VALUE_IGNORED.<span class="attribute">name</span>=错误用法 - 方法忽略了返回值</span><br><span class="line">rule.findbugs.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE.<span class="attribute">name</span>=安全风险 - 非常量的字符串传递给方法执行SQL语句</span><br><span class="line">rule.findbugs.JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS.<span class="attribute">name</span>=不良实践 - 不可变的类的属性应该是final</span><br><span class="line">rule.findbugs.AM_CREATES_EMPTY_ZIP_FILE_ENTRY.<span class="attribute">name</span>=不良实践 - 创建了一个空的zip文件的入口</span><br><span class="line">rule.findbugs.DM_NEXTINT_VIA_NEXTDOUBLE.<span class="attribute">name</span>=性能 - 使用Random的nextInt方法来获得一个随机整数，而不是nextDouble</span><br><span class="line">rule.findbugs.UI_INHERITANCE_UNSAFE_GETRESOURCE.<span class="attribute">name</span>=不良实践 - 如果类被扩展，GetResource的使用可能就是不安全的</span><br><span class="line">rule.findbugs.SIO_SUPERFLUOUS_INSTANCEOF.<span class="attribute">name</span>=错误用法 - 不必要的类型检测使用instanceof操作符</span><br><span class="line">rule.findbugs.EQ_OTHER_NO_OBJECT.<span class="attribute">name</span>=错误用法 - equals()方法定义，但是没有覆盖equals(Object)</span><br><span class="line">rule.findbugs.USM_USELESS_ABSTRACT_METHOD.<span class="attribute">name</span>=试验 - 抽象方法已经在实现的接口中定义了</span><br><span class="line">rule.findbugs.MTIA_SUSPECT_SERVLET_INSTANCE_FIELD.<span class="attribute">name</span>=高危 - 扩展Servlet的类使用了实例变量</span><br><span class="line">rule.findbugs.DM_USELESS_THREAD.<span class="attribute">name</span>=多线程错误 - 使用默认的空run方法创建了一个线程</span><br><span class="line">rule.findbugs.ML_SYNC_ON_UPDATED_FIELD.<span class="attribute">name</span>=多线程错误 - 方法在一个修改了的属性上进行了同步</span><br><span class="line">rule.findbugs.CO_SELF_NO_OBJECT.<span class="attribute">name</span>=不良实践 - 协变的compareTo()定义</span><br><span class="line">rule.findbugs.BC_UNCONFIRMED_CAST.<span class="attribute">name</span>=高危 - 未检查/未证实的类型转换</span><br><span class="line">rule.findbugs.FI_FINALIZER_NULLS_FIELDS.<span class="attribute">name</span>=不良实践 - Finalizer空属性</span><br><span class="line">rule.findbugs.BIT_AND.<span class="attribute">name</span>=错误用法 - 不兼容的位掩码(BIT_AND)</span><br><span class="line">rule.findbugs.FE_FLOATING_POINT_EQUALITY.<span class="attribute">name</span>=高危 - 测试浮点数相等</span><br><span class="line">rule.findbugs.TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK.<span class="attribute">name</span>=错误用法 - 值不要求有类型标示，但是标记为未知</span><br><span class="line">rule.findbugs.NP_NULL_PARAM_DEREF.<span class="attribute">name</span>=错误用法 - 方法调用把<span class="literal">null</span>传递给一个非<span class="literal">null</span>参数</span><br><span class="line">rule.findbugs.FB_MISSING_EXPECTED_WARNING.<span class="attribute">name</span>=试验 - findbugs丢失了期待或需要的警告</span><br><span class="line">rule.findbugs.DMI_INVOKING_HASHCODE_ON_ARRAY.<span class="attribute">name</span>=错误用法 - 在数组上调用了hashCode</span><br><span class="line">rule.findbugs.QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT.<span class="attribute">name</span>=错误用法 - 方法在布尔表达式中分配了boolean文字</span><br><span class="line">rule.findbugs.SA_FIELD_SELF_COMPARISON.<span class="attribute">name</span>=错误用法 - 属性自己与自己进行了比较</span><br><span class="line">rule.findbugs.UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR.<span class="attribute">name</span>=错误用法 - 父类的构造方法调用未初始化属性的方法</span><br><span class="line">rule.findbugs.ES_COMPARING_PARAMETER_STRING_WITH_EQ.<span class="attribute">name</span>=不良实践 - 比较字符串参数使用了 == 或 !=</span><br><span class="line">rule.findbugs.INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE.<span class="attribute">name</span>=错误用法 - 错误比较非负值与负数</span><br><span class="line">rule.findbugs.INT_BAD_COMPARISON_WITH_SIGNED_BYTE.<span class="attribute">name</span>=错误用法 - 错误比较带符号的byte</span><br><span class="line">rule.findbugs.IO_APPENDING_TO_OBJECT_OUTPUT_STREAM.<span class="attribute">name</span>=错误用法 - 尝试向一个对象输出流添加信息</span><br><span class="line">rule.findbugs.FI_MISSING_SUPER_CALL.<span class="attribute">name</span>=不良实践 - Finalizer没有调用父类的finalizer</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED.<span class="attribute">name</span>=错误用法 - 传递了多余实际使用的格式化字符串的参数</span><br><span class="line">rule.findbugs.HE_EQUALS_USE_HASHCODE.<span class="attribute">name</span>=不良实践 - 类定义了equals()，但使用了Object.hashCode()</span><br><span class="line">rule.findbugs.IJU_BAD_SUITE_METHOD.<span class="attribute">name</span>=错误用法 - TestCase声明了一个错误的suite方法</span><br><span class="line">rule.findbugs.DMI_CONSTANT_DB_PASSWORD.<span class="attribute">name</span>=安全风险 - 硬编码了数据库密码</span><br><span class="line">rule.findbugs.REC_CATCH_EXCEPTION.<span class="attribute">name</span>=高危 - 捕获了没有抛出的异常</span><br><span class="line">rule.findbugs.PS_PUBLIC_SEMAPHORES.<span class="attribute">name</span>=高危 - 类在公用接口中暴露了同步和信号</span><br><span class="line">rule.findbugs.EC_UNRELATED_INTERFACES.<span class="attribute">name</span>=错误用法 - 调用equals()比较不同的接口类型</span><br><span class="line">rule.findbugs.UCF_USELESS_CONTROL_FLOW_NEXT_LINE.<span class="attribute">name</span>=错误用法 - 执行到下一行的无用流程控制</span><br><span class="line">rule.findbugs.LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE.<span class="attribute">name</span>=试验 - OpenJDK中存在潜在的丢失logger的风险，因为弱引用</span><br><span class="line">rule.findbugs.NP_UNWRITTEN_FIELD.<span class="attribute">name</span>=错误用法 - 读取未初始化的属性</span><br><span class="line">rule.findbugs.DMI_UNSUPPORTED_METHOD.<span class="attribute">name</span>=高危 - 调用不支持的方法</span><br><span class="line">rule.findbugs.RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE.<span class="attribute">name</span>=高危 - 重复比较非空值和<span class="literal">null</span></span><br><span class="line">rule.findbugs.EC_BAD_ARRAY_COMPARE.<span class="attribute">name</span>=错误用法 - 调用equals()，与==效果一样</span><br><span class="line">rule.findbugs.EI_EXPOSE_REP.<span class="attribute">name</span>=恶意代码漏洞 - 可能通过返回一个可变对象的引用暴露了内部实现</span><br><span class="line">rule.findbugs.NP_DEREFERENCE_OF_READLINE_VALUE.<span class="attribute">name</span>=高危 - 没有判断readLine()的结果是否为空</span><br><span class="line">rule.findbugs.UPM_UNCALLED_PRIVATE_METHOD.<span class="attribute">name</span>=性能 - 从未用到的私有方法</span><br><span class="line">rule.findbugs.NP_NULL_ON_SOME_PATH.<span class="attribute">name</span>=错误用法 - 可能出现空指针引用</span><br><span class="line">rule.findbugs.NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT.<span class="attribute">name</span>=不良实践 - equals()方法没有检测<span class="literal">null</span>参数</span><br><span class="line">rule.findbugs.EC_NULL_ARG.<span class="attribute">name</span>=错误用法 - 使用空参数调用equals()</span><br><span class="line">rule.findbugs.SE_BAD_FIELD_STORE.<span class="attribute">name</span>=不良实践 - 非序列化值保存在序列化类的实例变量中</span><br><span class="line">rule.findbugs.VO_VOLATILE_REFERENCE_TO_ARRAY.<span class="attribute">name</span>=多线程错误 - 数组的volatile引用不会把数组元素也当做volatile来引用</span><br><span class="line">rule.findbugs.NP_SYNC_AND_NULL_CHECK_FIELD.<span class="attribute">name</span>=多线程错误 - 同步和空值检测发生在同一个属性上</span><br><span class="line">rule.findbugs.DM_EXIT.<span class="attribute">name</span>=不良实践 - 方法调用了System.exit(<span class="built_in">..</span>.)</span><br><span class="line">rule.findbugs.RC_REF_COMPARISON.<span class="attribute">name</span>=不良实践 - 怀疑进行了引用比较</span><br><span class="line">rule.findbugs.SE_NO_SUITABLE_CONSTRUCTOR.<span class="attribute">name</span>=不良实践 - 类是可序列化的，但是父类没有定义无参数构造方法</span><br><span class="line">rule.findbugs.DC_DOUBLECHECK.<span class="attribute">name</span>=多线程错误 - 可能对属性进行了双重检测</span><br><span class="line">rule.findbugs.DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT.<span class="attribute">name</span>=错误用法 - 在int上调用了Double.longBitsToDouble</span><br><span class="line">rule.findbugs.RpC_REPEATED_CONDITIONAL_TEST.<span class="attribute">name</span>=错误用法 - 重复判断条件</span><br><span class="line">rule.findbugs.WMI_WRONG_MAP_ITERATOR.<span class="attribute">name</span>=性能 - keySet迭代是低效的，使用entrySet代替</span><br><span class="line">rule.findbugs.DLS_DEAD_LOCAL_STORE.<span class="attribute">name</span>=高危 - 未用的局部变量</span><br><span class="line">rule.findbugs.INT_BAD_REM_BY_1.<span class="attribute">name</span>=错误用法 - 整数剩余模1</span><br><span class="line">rule.findbugs.RV_RETURN_VALUE_IGNORED_BAD_PRACTICE.<span class="attribute">name</span>=不良实践 - 方法忽略异常返回值</span><br><span class="line">rule.findbugs.SA_LOCAL_SELF_ASSIGNMENT.<span class="attribute">name</span>=高危 - 局部变量的自我赋值</span><br><span class="line">rule.findbugs.MS_SHOULD_BE_FINAL.<span class="attribute">name</span>=恶意代码漏洞 - 属性不是final，但是应该设置成final</span><br><span class="line">rule.findbugs.SIC_INNER_SHOULD_BE_STATIC.<span class="attribute">name</span>=性能 - 应该是一个静态内部类</span><br><span class="line">rule.findbugs.NP_GUARANTEED_DEREF.<span class="attribute">name</span>=错误用法 - <span class="literal">null</span>值一定会被调用</span><br><span class="line">rule.findbugs.SE_READ_RESOLVE_MUST_RETURN_OBJECT.<span class="attribute">name</span>=不良实践 - readResolve方法必须返回Object</span><br><span class="line">rule.findbugs.NP_LOAD_OF_KNOWN_NULL_VALUE.<span class="attribute">name</span>=高危 - 加载了已知的<span class="literal">null</span>值</span><br><span class="line">rule.findbugs.BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION.<span class="attribute">name</span>=性能 - 基本数据被装箱又被拆箱</span><br><span class="line">rule.findbugs.CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE.<span class="attribute">name</span>=不良实践 - 类定义了clone()但没有实现Cloneable</span><br><span class="line">rule.findbugs.CO_ABSTRACT_SELF.<span class="attribute">name</span>=不良实践 - 抽象类定义了协变的compareTo()方法</span><br><span class="line">rule.findbugs.BAC_BAD_APPLET_CONSTRUCTOR.<span class="attribute">name</span>=试验 - 错误的Applet构造方法依赖未初始化的AppletStub</span><br><span class="line">rule.findbugs.EQ_GETCLASS_AND_CLASS_CONSTANT.<span class="attribute">name</span>=不良实践 - equals方法因为子类失败</span><br><span class="line">rule.findbugs.DB_DUPLICATE_SWITCH_CLAUSES.<span class="attribute">name</span>=高危 - 在两个switch语句中使用了相同的代码</span><br><span class="line">rule.findbugs.DB_DUPLICATE_BRANCHES.<span class="attribute">name</span>=高危 - 在两个分支中使用了相同的代码</span><br><span class="line">rule.findbugs.UOE_USE_OBJECT_EQUALS.<span class="attribute">name</span>=试验 - 在final类上调用了equals，但是没有覆盖Object的equals方法</span><br><span class="line">rule.findbugs.FI_USELESS.<span class="attribute">name</span>=不良实践 - Finalizer除了调用父类的finalizer以外什么也没做</span><br><span class="line">rule.findbugs.NP_ALWAYS_NULL.<span class="attribute">name</span>=错误用法 - 调用了<span class="literal">null</span>指针</span><br><span class="line">rule.findbugs.DMI_VACUOUS_SELF_COLLECTION_CALL.<span class="attribute">name</span>=错误用法 - 集合的调用不能被感知</span><br><span class="line">rule.findbugs.DLS_DEAD_LOCAL_STORE_IN_RETURN.<span class="attribute">name</span>=错误用法 - 返回语句中的无用的赋值</span><br><span class="line">rule.findbugs.IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD.<span class="attribute">name</span>=错误用法 - 在run方法中的JUnit检验不能报告给JUnit</span><br><span class="line">rule.findbugs.DMI_EMPTY_DB_PASSWORD.<span class="attribute">name</span>=安全风险 - 空的数据库密码</span><br><span class="line">rule.findbugs.DM_BOOLEAN_CTOR.<span class="attribute">name</span>=性能 - 方法调用了低效的Boolean构造方法；使用Boolean.valueOf(<span class="built_in">..</span>.)代替</span><br><span class="line">rule.findbugs.BC_IMPOSSIBLE_DOWNCAST.<span class="attribute">name</span>=错误用法 - 不可能转型</span><br><span class="line">rule.findbugs.BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS.<span class="attribute">name</span>=不良实践 - Equals方法不应该假设任何有关参数类型的事宜</span><br><span class="line">rule.findbugs.RV_EXCEPTION_NOT_THROWN.<span class="attribute">name</span>=错误用法 - 异常创建后就丢弃了，没有抛出</span><br><span class="line">rule.findbugs.VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG.<span class="attribute">name</span>=错误用法 - 基本类型数组传递给一个期待可变对象类型参数的方法</span><br><span class="line">rule.findbugs.LI_LAZY_INIT_UPDATE_STATIC.<span class="attribute">name</span>=多线程错误 - 错误的延迟初始化和更新静态属性</span><br><span class="line">rule.findbugs.SA_FIELD_SELF_ASSIGNMENT.<span class="attribute">name</span>=错误用法 - 属性自身赋值</span><br><span class="line">rule.findbugs.EQ_ALWAYS_FALSE.<span class="attribute">name</span>=错误用法 - equals方法一直返回<span class="literal">false</span></span><br><span class="line">rule.findbugs.DMI_RANDOM_USED_ONLY_ONCE.<span class="attribute">name</span>=不良实践 - Random对象创建后只用了一次</span><br><span class="line">rule.findbugs.NM_CLASS_NOT_EXCEPTION.<span class="attribute">name</span>=不良实践 - Class没有继承Exception，虽然名字像一个异常</span><br><span class="line">rule.findbugs.SA_LOCAL_DOUBLE_ASSIGNMENT.<span class="attribute">name</span>=高危 - 给局部变量双重赋值</span><br><span class="line">rule.findbugs.NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS.<span class="attribute">name</span>=错误用法 - 方法调用传递<span class="literal">null</span>给非空参数 (ALL_TARGETS_DANGEROUS)</span><br><span class="line">rule.findbugs.NP_TOSTRING_COULD_RETURN_NULL.<span class="attribute">name</span>=不良实践 - toString方法可能返回<span class="literal">null</span></span><br><span class="line">rule.findbugs.BC_BAD_CAST_TO_ABSTRACT_COLLECTION.<span class="attribute">name</span>=高危 - 转换成抽象集合值得怀疑</span><br><span class="line">rule.findbugs.NM_LCASE_HASHCODE.<span class="attribute">name</span>=类定义了hashcode(); 应该是hashCode()吧？</span><br><span class="line">rule.findbugs.RU_INVOKE_RUN.<span class="attribute">name</span>=多线程错误 - 在线程中调用了run（你的意思是再启动一次么？）</span><br><span class="line">rule.findbugs.DMI_INVOKING_TOSTRING_ON_ARRAY.<span class="attribute">name</span>=错误用法 - 调用了数组的toString</span><br><span class="line">rule.findbugs.NM_METHOD_NAMING_CONVENTION.<span class="attribute">name</span>=方法名应该以小写字母开头</span><br><span class="line">rule.findbugs.RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES.<span class="attribute">name</span>=高危 - 重复比较两个<span class="literal">null</span>值</span><br><span class="line">rule.findbugs.SA_LOCAL_SELF_COMPUTATION.<span class="attribute">name</span>=错误用法 - 对一个变量进行无意义的自我计算 (比如 x &amp; x)</span><br><span class="line">rule.findbugs.MS_MUTABLE_HASHTABLE.<span class="attribute">name</span>=恶意代码漏洞 - 属性是可变的Hashtable</span><br><span class="line">rule.findbugs.RV_DONT_JUST_NULL_CHECK_READLINE.<span class="attribute">name</span>=高危 - 方法丢掉了readLine的结果，在检测它是非空之后。</span><br><span class="line">rule.findbugs.ES_COMPARING_STRINGS_WITH_EQ.<span class="attribute">name</span>=不良实践 - 使用== 或 !=比较String</span><br><span class="line">rule.findbugs.DL_SYNCHRONIZATION_ON_SHARED_CONSTANT.<span class="attribute">name</span>=多线程错误 - 同步内部String可能导致死锁</span><br><span class="line">rule.findbugs.MF_METHOD_MASKS_FIELD.<span class="attribute">name</span>=错误用法 - 方法定义了一个变量，与实例变量同名。</span><br><span class="line">rule.findbugs.EQ_SELF_USE_OBJECT.<span class="attribute">name</span>=错误用法 - 协变equals()方法定义，继承了Object.equals(Object)</span><br><span class="line">rule.findbugs.ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND.<span class="attribute">name</span>=错误用法 - int值转换成float，然后传递给Math.round</span><br><span class="line">rule.findbugs.GC_UNRELATED_TYPES.<span class="attribute">name</span>=错误用法 - 泛型参数与方法参数没有相互关系</span><br><span class="line">rule.findbugs.BC_IMPOSSIBLE_INSTANCEOF.<span class="attribute">name</span>=错误用法 - instanceof一直返回<span class="literal">false</span></span><br><span class="line">rule.findbugs.SBSC_USE_STRINGBUFFER_CONCATENATION.<span class="attribute">name</span>=性能 - 方法在循环中使用+进行字符串拼接</span><br><span class="line">rule.findbugs.ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL.<span class="attribute">name</span>=错误用法 - int转换成double，然后传递给Math.ceil</span><br><span class="line">rule.findbugs.UG_SYNC_SET_UNSYNC_GET.<span class="attribute">name</span>=多线程错误 - 未同步的getter方法，同步的setter方法</span><br><span class="line">rule.findbugs.RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION.<span class="attribute">name</span>=错误用法 - 非法的正则表达式</span><br><span class="line">rule.findbugs.SA_FIELD_SELF_COMPUTATION.<span class="attribute">name</span>=错误用法 - 无意义的自我计算 (比如 x &amp; x)</span><br><span class="line">rule.findbugs.DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS.<span class="attribute">name</span>=错误用法 - 创建了没有任何线程的ScheduledThreadPoolExecutor</span><br><span class="line">rule.findbugs.DMI_USELESS_SUBSTRING.<span class="attribute">name</span>=高危 - 调用substring(0)会返回原值</span><br><span class="line">rule.findbugs.IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD.<span class="attribute">name</span>=高危 - 被继承的或外部的方法的模棱两可的调用</span><br><span class="line">rule.findbugs.OS_OPEN_STREAM.<span class="attribute">name</span>=不良实践 - 方法可能在关闭流时失败</span><br><span class="line">rule.findbugs.HE_INHERITS_EQUALS_USE_HASHCODE.<span class="attribute">name</span>=不良实践 - 类继承了equals()，但使用了Object.hashCode()</span><br><span class="line">rule.findbugs.SE_NONFINAL_SERIALVERSIONID.<span class="attribute">name</span>=不良实践 - serialVersionUID不是final的</span><br><span class="line">rule.findbugs.EQ_SELF_NO_OBJECT.<span class="attribute">name</span>=不良实践 - 协变equals()方法定义</span><br><span class="line">rule.findbugs.SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH.<span class="attribute">name</span>=由于switch语句导致的无用存储</span><br><span class="line">rule.findbugs.SW_SWING_METHODS_INVOKED_IN_SWING_THREAD.<span class="attribute">name</span>=不良实践 - 某些swing方法需要在swing线程中调用</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_ILLEGAL.<span class="attribute">name</span>=错误用法 - 非法的格式化字符串</span><br><span class="line">rule.findbugs.DM_NUMBER_CTOR.<span class="attribute">name</span>=性能 - 方法调用低效的数字构造方法;使用静态valueOf代替</span><br><span class="line">rule.findbugs.RV_REM_OF_RANDOM_INT.<span class="attribute">name</span>=高危 - 其余32位带符号随机整数</span><br><span class="line">rule.findbugs.EQ_COMPARING_CLASS_NAMES.<span class="attribute">name</span>=错误用法 - equals方法比较类名而不是比较类</span><br><span class="line">rule.findbugs.ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD.<span class="attribute">name</span>=高危 - 通过一个实例方法更新静态属性</span><br><span class="line">rule.findbugs.TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED.<span class="attribute">name</span>=错误用法 - 某个值使用了注解标记不会限制类型，但是这个限制是必须的</span><br><span class="line">rule.findbugs.NS_NON_SHORT_CIRCUIT.<span class="attribute">name</span>=高危 - 可疑的非短路逻辑</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT.<span class="attribute">name</span>=错误用法 - 格式化字符串没有前面的参数</span><br><span class="line">rule.findbugs.SE_PRIVATE_READ_RESOLVE_NOT_INHERITED.<span class="attribute">name</span>=高危 - 私有readResolve方法不是继承自父类</span><br><span class="line">rule.findbugs.RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE.<span class="attribute">name</span>=高危 - 对一个已知不是<span class="literal">null</span>的值重复进行空值判断</span><br><span class="line">rule.findbugs.NM_LCASE_TOSTRING.<span class="attribute">name</span>=类定义了tostring(); 应该是toString()吧？</span><br><span class="line">rule.findbugs.HSC_HUGE_SHARED_STRING_CONSTANT.<span class="attribute">name</span>=性能 - 巨大的字符串常量在多个类文件中间重复了</span><br><span class="line">rule.findbugs.SE_TRANSIENT_FIELD_NOT_RESTORED.<span class="attribute">name</span>=不良实践 - Transient属性没有再反序列化时被设置</span><br><span class="line">rule.findbugs.JLM_JSR166_LOCK_MONITORENTER.<span class="attribute">name</span>=多线程错误 - 在java.util.concurrent Lock上进行了同步</span><br><span class="line">rule.findbugs.EQ_ALWAYS_TRUE.<span class="attribute">name</span>=错误用法 - equals方法总是返回<span class="literal">true</span></span><br><span class="line">rule.findbugs.ISC_INSTANTIATE_STATIC_CLASS.<span class="attribute">name</span>=不良实践 - 只提供静态方法的类不需要实例化</span><br><span class="line">rule.findbugs.ICAST_IDIV_CAST_TO_DOUBLE.<span class="attribute">name</span>=高危 - int相除的结果转换成double或float</span><br><span class="line">rule.findbugs.RC_REF_COMPARISON_BAD_PRACTICE.<span class="attribute">name</span>=错误用法 - 可疑的引用与常量的比较</span><br><span class="line">rule.findbugs.FI_EXPLICIT_INVOCATION.<span class="attribute">name</span>=不良实践 - 直接调用finalizer</span><br><span class="line">rule.findbugs.ESync_EMPTY_SYNC.<span class="attribute">name</span>=多线程错误 - 空的同步块</span><br><span class="line">rule.findbugs.DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION.<span class="attribute">name</span>=错误用法 - 不要使用removeAll清空集合</span><br><span class="line">rule.findbugs.SE_BAD_FIELD.<span class="attribute">name</span>=在序列化类中出现了非transient也非serializable的实例属性</span><br><span class="line">rule.findbugs.NP_STORE_INTO_NONNULL_FIELD.<span class="attribute">name</span>=错误用法 - 属性已经标记为NonNull，但是设置了一个<span class="literal">null</span>值</span><br><span class="line">rule.findbugs.IT_NO_SUCH_ELEMENT.<span class="attribute">name</span>=不良实践 - 迭代器的next()方法不能抛出NoSuchElementException</span><br><span class="line">rule.findbugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER.<span class="attribute">name</span>=安全风险 - HTTP响应拆分漏洞</span><br><span class="line">rule.findbugs.DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED.<span class="attribute">name</span>=高危 - 希望传入Runnable的地方传入了一个Thread</span><br><span class="line">rule.findbugs.NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH.<span class="attribute">name</span>=错误用法 - <span class="literal">null</span>值会在exception处理中被用到</span><br><span class="line">rule.findbugs.RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE.<span class="attribute">name</span>=高危 - 已知的<span class="literal">null</span>值被重复的检测</span><br><span class="line">rule.findbugs.DMI_CALLING_NEXT_FROM_HASNEXT.<span class="attribute">name</span>=错误用法 - hasNext方法调用了next方法</span><br><span class="line">rule.findbugs.HE_HASHCODE_USE_OBJECT_EQUALS.<span class="attribute">name</span>=不良实践 - 定义了hashCode()的类使用了Object.equals()</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED.<span class="attribute">name</span>=错误用法 - 需要使用printf样式时使用了MessageFormat</span><br><span class="line">rule.findbugs.NP_BOOLEAN_RETURN_NULL.<span class="attribute">name</span>=不良实践 - 方法返回boolean类型返回了<span class="literal">null</span></span><br><span class="line">rule.findbugs.RI_REDUNDANT_INTERFACES.<span class="attribute">name</span>=高危 - 类实现了父类一样的接口</span><br><span class="line">rule.findbugs.DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE.<span class="attribute">name</span>=多线程错误 - 在装箱的基本属性上使用了同步</span><br><span class="line">rule.findbugs.STCAL_STATIC_CALENDAR_INSTANCE.<span class="attribute">name</span>=多线程错误 - 静态Calendar</span><br><span class="line">rule.findbugs.RR_NOT_CHECKED.<span class="attribute">name</span>=不良实践 - 方法忽略InputStream.read()的返回值</span><br><span class="line">rule.findbugs.IL_INFINITE_RECURSIVE_LOOP.<span class="attribute">name</span>=错误用法 - 明显的无限递归循环</span><br><span class="line">rule.findbugs.DMI_NONSERIALIZABLE_OBJECT_WRITTEN.<span class="attribute">name</span>=高危 - 非持久化的对象写入了ObjectOutput</span><br><span class="line">rule.findbugs.GC_UNCHECKED_TYPE_IN_GENERIC_CALL.<span class="attribute">name</span>=不良实践 - 泛型调用中使用了未检查的类型</span><br><span class="line">rule.findbugs.IMA_INEFFICIENT_MEMBER_ACCESS.<span class="attribute">name</span>=试验 - 方法访问了一个拥有的类的私有成员</span><br><span class="line">rule.findbugs.FI_PUBLIC_SHOULD_BE_PROTECTED.<span class="attribute">name</span>=恶意代码漏洞 - Finalizer应该是protected，不能是public</span><br><span class="line">rule.findbugs.RV_CHECK_FOR_POSITIVE_INDEXOF.<span class="attribute">name</span>=高危 - 方法检查检查String.indexOf的结果是否为正数</span><br><span class="line">rule.findbugs.ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT.<span class="attribute">name</span>=高危 - 无符号右移转换为short/byte</span><br><span class="line">rule.findbugs.DM_STRING_VOID_CTOR.<span class="attribute">name</span>=性能 - 方法调用了低效的new String()构造方法</span><br><span class="line">rule.findbugs.RE_POSSIBLE_UNINTENDED_PATTERN.<span class="attribute">name</span>=错误用法 - <span class="string">"."</span>用作正则表达式</span><br><span class="line">rule.findbugs.WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL.<span class="attribute">name</span>=多线程错误 - 在getClass上使用同步而不是在class文字上</span><br><span class="line">rule.findbugs.ICAST_BAD_SHIFT_AMOUNT.<span class="attribute">name</span>=错误用法 - 右移的数值不在0<span class="built_in">..</span>31范围内</span><br><span class="line">rule.findbugs.SF_SWITCH_FALLTHROUGH.<span class="attribute">name</span>=Switch语句中一个case失败以后进入了下一个case</span><br><span class="line">rule.findbugs.DP_DO_INSIDE_DO_PRIVILEGED.<span class="attribute">name</span>=不良实践 - 方法调用应该在doPrivileged块中</span><br><span class="line">rule.findbugs.NO_NOTIFY_NOT_NOTIFYALL.<span class="attribute">name</span>=多线程错误 - 使用notify()而不是notifyAll()</span><br><span class="line">rule.findbugs.SS_SHOULD_BE_STATIC.<span class="attribute">name</span>=性能 - 未读取的属性：这个属性是否应该是static的？</span><br><span class="line">rule.findbugs.DM_RUN_FINALIZERS_ON_EXIT.<span class="attribute">name</span>=不良实践 - 方法调用了危险的runFinalizersOnExit方法</span><br><span class="line">rule.findbugs.MS_FINAL_PKGPROTECT.<span class="attribute">name</span>=恶意代码漏洞 - 属性应该同时是final 和 package protected的</span><br><span class="line">rule.findbugs.BC_BAD_CAST_TO_CONCRETE_COLLECTION.<span class="attribute">name</span>=高危 - 转换成具体集合可能有问题</span><br><span class="line">rule.findbugs.BIT_IOR_OF_SIGNED_BYTE.<span class="attribute">name</span>=错误用法 - 在带符号的byte值上进行位<span class="keyword">OR</span>运算</span><br><span class="line">rule.findbugs.MSF_MUTABLE_SERVLET_FIELD.<span class="attribute">name</span>=多线程错误 - 可变的servlet属性</span><br><span class="line">rule.findbugs.SE_BAD_FIELD_INNER_CLASS.<span class="attribute">name</span>=不良实践 - 非serializable类有一个可序列化的内部类</span><br><span class="line">rule.findbugs.BIT_ADD_OF_SIGNED_BYTE.<span class="attribute">name</span>=错误用法 - 在带符号的byte值上进行位add运算</span><br><span class="line">rule.findbugs.FI_FINALIZER_ONLY_NULLS_FIELDS.<span class="attribute">name</span>=不良实践 - Finalizer中子还有<span class="literal">null</span>属性</span><br><span class="line">rule.findbugs.DE_MIGHT_IGNORE.<span class="attribute">name</span>=不良实践 - 方法可能忽略异常</span><br><span class="line">rule.findbugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER.<span class="attribute">name</span>=安全风险 - Servlet反射跨域脚本漏洞</span><br><span class="line">rule.findbugs.ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD.<span class="attribute">name</span>=多线程错误 - 使用同步的属性可能发生改变</span><br><span class="line">rule.findbugs.SQL_BAD_PREPARED_STATEMENT_ACCESS.<span class="attribute">name</span>=错误用法 - 方法尝试访问PreparedStatement参数的索引是0</span><br><span class="line">rule.findbugs.DM_CONVERT_CASE.<span class="attribute">name</span>=国际化 - 考虑使用国际化参数型的调用方法版本</span><br><span class="line">rule.findbugs.SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS.<span class="attribute">name</span>=高危 - 类的transient属性不能序列化</span><br><span class="line">rule.findbugs.NN_NAKED_NOTIFY.<span class="attribute">name</span>=多线程错误 - 未使用同步包裹的notify</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_MISSING_ARGUMENT.<span class="attribute">name</span>=错误用法 - 格式化字符串引用的参数丢失</span><br><span class="line">rule.findbugs.IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION.<span class="attribute">name</span>=不良实践 - 父类初始化时使用了子类</span><br><span class="line">rule.findbugs.SA_LOCAL_SELF_COMPARISON.<span class="attribute">name</span>=错误用法 - 自己和自己的值比较</span><br><span class="line">rule.findbugs.IM_BAD_CHECK_FOR_ODD.<span class="attribute">name</span>=高危 - 对奇偶判断不能用于负数</span><br><span class="line">rule.findbugs.NP_CLOSING_NULL.<span class="attribute">name</span>=错误用法 - close()调用了一个永远是<span class="literal">null</span>的值</span><br><span class="line">rule.findbugs.XSS_REQUEST_PARAMETER_TO_JSP_WRITER.<span class="attribute">name</span>=安全风险 - JSP反射调用跨域脚本漏洞</span><br><span class="line">rule.findbugs.IS_FIELD_NOT_GUARDED.<span class="attribute">name</span>=多线程错误 - 属性不能保证同步访问</span><br><span class="line">rule.findbugs.DM_GC.<span class="attribute">name</span>=性能 - 直接调用垃圾回收，特别是在性能测试中的可疑代码</span><br><span class="line">rule.findbugs.IM_MULTIPLYING_RESULT_OF_IREM.<span class="attribute">name</span>=错误用法 - 整数乘法的结果是整数</span><br><span class="line">rule.findbugs.SE_COMPARATOR_SHOULD_BE_SERIALIZABLE.<span class="attribute">name</span>=不良实践 - Comparator没有实现Serializable</span><br><span class="line">rule.findbugs.HE_HASHCODE_NO_EQUALS.<span class="attribute">name</span>=不良实践 - 类定义了hashCode()但是没定义equals()</span><br><span class="line">rule.findbugs.MF_CLASS_MASKS_FIELD.<span class="attribute">name</span>=错误用法 - 类定义了属性覆盖了父类的属性</span><br><span class="line">rule.findbugs.NM_VERY_CONFUSING_INTENTIONAL.<span class="attribute">name</span>=不良实践 - 非常迷惑的方法名称（可能是内部方法）</span><br><span class="line">rule.findbugs.SR_NOT_CHECKED.<span class="attribute">name</span>=不良实践 - 方法忽略了InputStream.skip()的结果</span><br><span class="line">rule.findbugs.LI_LAZY_INIT_STATIC.<span class="attribute">name</span>=多线程错误 - 错误的对static属性进行了延迟初始化</span><br><span class="line">rule.findbugs.DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION.<span class="attribute">name</span>=错误用法 - 不能使用反射检测没有标记为runtime rentention的注解的存在</span><br><span class="line">rule.findbugs.ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH.<span class="attribute">name</span>=不良实践 - 方法可能在关闭database资源时因为异常失败</span><br><span class="line">rule.findbugs.BIT_IOR.<span class="attribute">name</span>=错误用法 - 不兼容的位掩码（BIT_IOR）</span><br><span class="line">rule.findbugs.ODR_OPEN_DATABASE_RESOURCE.<span class="attribute">name</span>=不良实践 - 方法可能在关闭database资源时失败</span><br><span class="line">rule.findbugs.IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN.<span class="attribute">name</span>=错误用法 - 参数没有被使用，但是被重新赋值了</span><br><span class="line">rule.findbugs.SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING.<span class="attribute">name</span>=安全风险 - 使用非常量字符串创建了一个PreparedStatement</span><br><span class="line">rule.findbugs.UUF_UNUSED_FIELD.<span class="attribute">name</span>=性能 - 无用的属性</span><br><span class="line">rule.findbugs.RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE.<span class="attribute">name</span>=错误用法 - 对一个已经使用的值进行了<span class="literal">null</span>检测</span><br><span class="line">rule.findbugs.EQ_OTHER_USE_OBJECT.<span class="attribute">name</span>=错误用法 - equals()方法定义没有覆盖Object.equals(Object)</span><br><span class="line">rule.findbugs.SP_SPIN_ON_FIELD.<span class="attribute">name</span>=多线程错误 - 方法对一个属性循环复制</span><br><span class="line">rule.findbugs.SI_INSTANCE_BEFORE_FINALS_ASSIGNED.<span class="attribute">name</span>=不良实践 - 在所有静态final属性赋值之前static初始化块创建了一个实例</span><br><span class="line">rule.findbugs.NP_ALWAYS_NULL_EXCEPTION.<span class="attribute">name</span>=错误用法 - 方法的异常路径中引用了空指针</span><br><span class="line">rule.findbugs.MS_EXPOSE_REP.<span class="attribute">name</span>=恶意代码漏洞 - Public static方法可能因为返回了一个数组而暴露内部实现</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN.<span class="attribute">name</span>=高危 - 非布尔参数使用%b进行了格式化</span><br><span class="line">rule.findbugs.MS_PKGPROTECT.<span class="attribute">name</span>=恶意代码漏洞 - 属性应该是package protected</span><br><span class="line">rule.findbugs.NP_NONNULL_RETURN_VIOLATION.<span class="attribute">name</span>=错误用法 - 方法可能返回<span class="literal">null</span>，但是声明了 @NonNull</span><br><span class="line">rule.findbugs.J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION.<span class="attribute">name</span>=不良实践 - 在HttpSession中保存了不可序列化的对象</span><br><span class="line">rule.findbugs.NM_SAME_SIMPLE_NAME_AS_SUPERCLASS.<span class="attribute">name</span>=不良实践 - 类名不应该和父类的名称相同</span><br><span class="line">rule.findbugs.DMI_BLOCKING_METHODS_ON_URL.<span class="attribute">name</span>=性能 - URL的equals 和 hashCode 方法会被堵塞</span><br><span class="line">rule.findbugs.HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS.<span class="attribute">name</span>=错误用法 - 在哈希构造中声明了不能哈希的类</span><br><span class="line">rule.findbugs.UR_UNINIT_READ.<span class="attribute">name</span>=错误用法 - 构造方法中对未初始化的类进行了读取</span><br><span class="line">rule.findbugs.WA_NOT_IN_LOOP.<span class="attribute">name</span>=多线程错误 - Wait不在循环中</span><br><span class="line">rule.findbugs.DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR.<span class="attribute">name</span>=错误用法 - 尝试修改ScheduledThreadPoolExecutor的最大数</span><br><span class="line">rule.findbugs.RV_RETURN_VALUE_IGNORED2.<span class="attribute">name</span>=错误用法 - 方法忽略了返回值</span><br><span class="line">rule.findbugs.NM_FIELD_NAMING_CONVENTION.<span class="attribute">name</span>=属性名应该以小写字母开头</span><br><span class="line">rule.findbugs.FB_UNEXPECTED_WARNING.<span class="attribute">name</span>=试验 - 未期待/未期望的findbugs警告</span><br><span class="line">rule.findbugs.BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR.<span class="attribute">name</span>=错误用法 - 基础类型拆箱后用于三元表达式</span><br><span class="line">rule.findbugs.DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED.<span class="attribute">name</span>=不良实践 - Classloaders应该只在doPrivileged块中被创建</span><br><span class="line">rule.findbugs.NM_WRONG_PACKAGE.<span class="attribute">name</span>=错误用法 - 方法没有覆盖父类的方法，因为参数的包不正确</span><br><span class="line">rule.findbugs.IL_CONTAINER_ADDED_TO_ITSELF.<span class="attribute">name</span>=错误用法 - 一个集合被添加到自身</span><br><span class="line">rule.findbugs.CI_CONFUSED_INHERITANCE.<span class="attribute">name</span>=高危 - 类是final的，但是定义了protected属性</span><br><span class="line">rule.findbugs.HE_USE_OF_UNHASHABLE_CLASS.<span class="attribute">name</span>=错误用法 - 在哈希数据结构中使用的类没有定义hashCode()方法</span><br><span class="line">rule.findbugs.IJU_SUITE_NOT_STATIC.<span class="attribute">name</span>=错误用法 - TestCase实现了非static suite方法</span><br><span class="line">rule.findbugs.RS_READOBJECT_SYNC.<span class="attribute">name</span>=多线程错误 - 类的readObject()方法不是同步的</span><br><span class="line">rule.findbugs.AM_CREATES_EMPTY_JAR_FILE_ENTRY.<span class="attribute">name</span>=不良实践 - 创建了一个空的jar方法入口</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY.<span class="attribute">name</span>=错误用法 - 使用格式化字符串对数组进行了无用的格式化</span><br><span class="line">rule.findbugs.SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW.<span class="attribute">name</span>=switch语句失败抛出异常导致无用的存储</span><br><span class="line">rule.findbugs.RV_ABSOLUTE_VALUE_OF_HASHCODE.<span class="attribute">name</span>=错误用法 - 错误的尝试计算带符号的32位hashcodde的绝对值</span><br><span class="line">rule.findbugs.EQ_DONT_DEFINE_EQUALS_FOR_ENUM.<span class="attribute">name</span>=错误用法 - 枚举定义了协变equals()方法定义</span><br><span class="line">rule.findbugs.SA_FIELD_DOUBLE_ASSIGNMENT.<span class="attribute">name</span>=错误用法 - 对属性进行双重赋值</span><br><span class="line">rule.findbugs.DMI_COLLECTION_OF_URLS.<span class="attribute">name</span>=性能 - URL的Maps 和 sets可能是性能大问题</span><br><span class="line">rule.findbugs.NM_SAME_SIMPLE_NAME_AS_INTERFACE.<span class="attribute">name</span>=不良实践 - 类名不应该和实现的接口名相同</span><br><span class="line">rule.findbugs.UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR.<span class="attribute">name</span>=错误用法 - 构造方法没有初始化属性</span><br><span class="line">rule.findbugs.TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK.<span class="attribute">name</span>=错误用法 - 值可能带着一个类型修饰符，一直使用的方式是与这个类型修饰符相悖的</span><br><span class="line">rule.findbugs.SE_NONLONG_SERIALVERSIONID.<span class="attribute">name</span>=不良实践 - serialVersionUID不是long型</span><br><span class="line">rule.findbugs.RV_REM_OF_HASHCODE.<span class="attribute">name</span>=高危 - hashCode的结果可能是负数negative</span><br><span class="line">rule.findbugs.NS_DANGEROUS_NON_SHORT_CIRCUIT.<span class="attribute">name</span>=高危 - 潜在危险使用非短跳出逻辑</span><br><span class="line">rule.findbugs.USM_USELESS_SUBCLASS_METHOD.<span class="attribute">name</span>=试验 - 方法代理到父类方法</span><br><span class="line">rule.findbugs.ITA_INEFFICIENT_TO_ARRAY.<span class="attribute">name</span>=性能 - 方法使用了toArray()对空数组参数</span><br><span class="line">rule.findbugs.DM_MONITOR_WAIT_ON_CONDITION.<span class="attribute">name</span>=多线程错误 - 根据条件监控wait()的调用</span><br><span class="line">rule.findbugs.BOA_BADLY_OVERRIDDEN_ADAPTER.<span class="attribute">name</span>=错误用法 - 类覆盖了父类中实现的方法适配器错误</span><br><span class="line">rule.findbugs.IC_INIT_CIRCULARITY.<span class="attribute">name</span>=高危 - 初始化死循环</span><br><span class="line">rule.findbugs.NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER.<span class="attribute">name</span>=不良实践 - 使用的标记是未来java版本中的关键字</span><br><span class="line">rule.findbugs.EC_UNRELATED_CLASS_AND_INTERFACE.<span class="attribute">name</span>=错误用法 - equals()比较无关的类和接口</span><br><span class="line">rule.findbugs.TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK.<span class="attribute">name</span>=错误用法 - 值可能没有携带一个类修饰符，但是使用中会一直需要这个类修饰符</span><br><span class="line">rule.findbugs.FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER.<span class="attribute">name</span>=错误用法 - 测试是否与NaN相等</span><br><span class="line">rule.findbugs.NM_CONFUSING.<span class="attribute">name</span>=不良实践 - 迷惑的方法名</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_ARG_MISMATCH.<span class="attribute">name</span>=错误用法 - 格式化字符串参数的数目与占位符不相等</span><br><span class="line">rule.findbugs.NP_NULL_ON_SOME_PATH_EXCEPTION.<span class="attribute">name</span>=错误用法 - 方法的异常路径中可能引用空指针</span><br><span class="line">rule.findbugs.DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE.<span class="attribute">name</span>=多线程错误 - 同步装箱基本类型可能导致死锁</span><br><span class="line">rule.findbugs.IJU_TEARDOWN_NO_SUPER.<span class="attribute">name</span>=错误用法 - TestCase定义的tearDown没有调用super.tearDown()</span><br><span class="line">rule.findbugs.SE_READ_RESOLVE_IS_STATIC.<span class="attribute">name</span>=错误用法 - readResolve方法没有生命为static方法</span><br><span class="line">rule.findbugs.NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE.<span class="attribute">name</span>=高危 - 这个路径上空指针引用是不可实现的</span><br><span class="line">rule.findbugs.UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS.<span class="attribute">name</span>=错误用法 - 匿名内部类中定义的不可调用的方法</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_BAD_CONVERSION.<span class="attribute">name</span>=错误用法 - 提供的参数类型与格式化标记不符</span><br><span class="line">rule.findbugs.EC_ARRAY_AND_NONARRAY.<span class="attribute">name</span>=错误用法 - equals()用来比较数组和非数组</span><br><span class="line">rule.findbugs.NM_BAD_EQUAL.<span class="attribute">name</span>=类定义了equal(Object)，应该是equals(Object)吧？</span><br><span class="line">rule.findbugs.EC_UNRELATED_TYPES_USING_POINTER_EQUALITY.<span class="attribute">name</span>=错误用法 - 使用指针比较不同的类型</span><br><span class="line">rule.findbugs.STI_INTERRUPTED_ON_CURRENTTHREAD.<span class="attribute">name</span>=错误用法 - currentThread()调用的不必要用法，调用了interrupted()</span><br><span class="line">rule.findbugs.RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION.<span class="attribute">name</span>=错误用法 - File.separator用做正则表达式</span><br><span class="line">rule.findbugs.MWN_MISMATCHED_WAIT.<span class="attribute">name</span>=多线程错误 - 不匹配的wait()</span><br><span class="line">rule.findbugs.IL_INFINITE_LOOP.<span class="attribute">name</span>=错误用法 - 明显的无限循环</span><br><span class="line">rule.findbugs.NP_IMMEDIATE_DEREFERENCE_OF_READLINE.<span class="attribute">name</span>=高危 - 立刻使用了readLine()的结果</span><br><span class="line">rule.findbugs.SC_START_IN_CTOR.<span class="attribute">name</span>=多线程错误 - 构造方法调用了Thread.start()</span><br><span class="line">rule.findbugs.STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE.<span class="attribute">name</span>=多线程错误 - 静态DateFormat</span><br><span class="line">rule.findbugs.HE_EQUALS_NO_HASHCODE.<span class="attribute">name</span>=不良实践 - 类定义了equals()，但是没有hashCode()</span><br><span class="line">rule.findbugs.UL_UNRELEASED_LOCK.<span class="attribute">name</span>=多线程错误 - 方法没有在任何路径中释放锁</span><br><span class="line">rule.findbugs.PZLA_PREFER_ZERO_LENGTH_ARRAYS.<span class="attribute">name</span>=高危 - 考虑返回空数组而不是<span class="literal">null</span></span><br><span class="line">rule.findbugs.SKIPPED_CLASS_TOO_BIG.<span class="attribute">name</span>=高危 - 类太大不能分析</span><br><span class="line">rule.findbugs.NP_ARGUMENT_MIGHT_BE_NULL.<span class="attribute">name</span>=错误用法 - 方法没有检查空参数</span><br><span class="line">rule.findbugs.UM_UNNECESSARY_MATH.<span class="attribute">name</span>=性能 - 方法常量调用了静态Math类方法</span><br><span class="line">rule.findbugs.NM_WRONG_PACKAGE_INTENTIONAL.<span class="attribute">name</span>=不良实践 - 方法没有覆盖父类的方法因为参数包名错误</span><br><span class="line">rule.findbugs.NP_NONNULL_PARAM_VIOLATION.<span class="attribute">name</span>=错误用法 - 方法传递<span class="literal">null</span>给一个非空参数</span><br><span class="line">rule.findbugs.BIT_AND_ZZ.<span class="attribute">name</span>=错误用法 - 检查 ((<span class="built_in">..</span>.) &amp; 0) == 0 是否成立</span><br><span class="line">rule.findbugs.HRS_REQUEST_PARAMETER_TO_COOKIE.<span class="attribute">name</span>=安全风险 - HTTP cookie可能来自不被信任的输入</span><br><span class="line">rule.findbugs.SQL_BAD_RESULTSET_ACCESS.<span class="attribute">name</span>=错误用法 - 方法尝试访问一个ResultSet，但是使用的index是0</span><br><span class="line">rule.findbugs.INT_VACUOUS_COMPARISON.<span class="attribute">name</span>=高危 - 整形的空比较</span><br><span class="line">rule.findbugs.EQ_COMPARETO_USE_OBJECT_EQUALS.<span class="attribute">name</span>=不良实践 - 类定义了compareTo(<span class="built_in">..</span>.)，但使用了Object.equals()</span><br><span class="line">rule.findbugs.DMI_HARDCODED_ABSOLUTE_FILENAME.<span class="attribute">name</span>=高危 - 类包含一个硬编码的绝对路径</span><br><span class="line">rule.findbugs.DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES.<span class="attribute">name</span>=错误用法 - 集合不应该包含自身</span><br><span class="line">rule.findbugs.URF_UNREAD_FIELD.<span class="attribute">name</span>=性能 - 读不到的属性</span><br><span class="line">rule.findbugs.DLS_OVERWRITTEN_INCREMENT.<span class="attribute">name</span>=错误用法 - 重写了自增</span><br><span class="line">rule.findbugs.BIT_SIGNED_CHECK.<span class="attribute">name</span>=不良实践 - 检测带符号的位运算</span><br><span class="line">rule.findbugs.UWF_NULL_FIELD.<span class="attribute">name</span>=错误用法 - 属性曾经设置为<span class="literal">null</span></span><br><span class="line">rule.findbugs.DE_MIGHT_DROP.<span class="attribute">name</span>=不良实践 - 方法可能抛出异常</span><br><span class="line">rule.findbugs.DMI_BAD_MONTH.<span class="attribute">name</span>=错误用法 - 对于month错误的常量值</span><br><span class="line">rule.findbugs.MS_MUTABLE_ARRAY.<span class="attribute">name</span>=恶意代码漏洞 - 属性是可变数组</span><br><span class="line">rule.findbugs.SE_INNER_CLASS.<span class="attribute">name</span>=不良实践 - 可序列化的内部类</span><br><span class="line">rule.findbugs.OS_OPEN_STREAM_EXCEPTION_PATH.<span class="attribute">name</span>=不良实践 - 方法可能在关闭流时因为异常而失败</span><br><span class="line">rule.findbugs.AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION.<span class="attribute">name</span>=并发抽象的顺序调用可能不是原子的</span><br><span class="line">rule.findbugs.BX_UNBOXING_IMMEDIATELY_REBOXED.<span class="attribute">name</span>=装箱的值被拆箱，然后立刻重新装箱了</span><br><span class="line">rule.findbugs.CO_COMPARETO_RESULTS_MIN_VALUE.<span class="attribute">name</span>=compareTo()或compare()返回Integer.MIN_VALUE</span><br><span class="line">rule.findbugs.DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD.<span class="attribute">name</span>=无用的局部变量可能与实例属性同名</span><br><span class="line">rule.findbugs.DMI_ARGUMENTS_WRONG_ORDER.<span class="attribute">name</span>=方法参数顺序翻转</span><br><span class="line">rule.findbugs.DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE.<span class="attribute">name</span>=由double构造BigDecimal时没有指定精确度</span><br><span class="line">rule.findbugs.DMI_DOH.<span class="attribute">name</span>=一个明显不合理的方法调用</span><br><span class="line">rule.findbugs.DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS.<span class="attribute">name</span>=一个入口的添加可能因为重用Entry对象导致失败</span><br><span class="line">rule.findbugs.DM_DEFAULT_ENCODING.<span class="attribute">name</span>=信任默认字符编码</span><br><span class="line">rule.findbugs.ICAST_INT_2_LONG_AS_INSTANT.<span class="attribute">name</span>=int转换成long，用来当做绝对时间</span><br><span class="line">rule.findbugs.INT_BAD_COMPARISON_WITH_INT_VALUE.<span class="attribute">name</span>=错误比较int值和long常量</span><br><span class="line">rule.findbugs.JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT.<span class="attribute">name</span>=在util.concurrent抽象中使用监控样式的wait方法</span><br><span class="line">rule.findbugs.NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD.<span class="attribute">name</span>=读取了未初始化的public或protected属性</span><br><span class="line">rule.findbugs.OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE.<span class="attribute">name</span>=方法可能因为checked exception导致清理流或资源失败</span><br><span class="line">rule.findbugs.PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS.<span class="attribute">name</span>=不用在iterator里重用entry对象</span><br><span class="line">rule.findbugs.RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE.<span class="attribute">name</span>=compareTo返回的值与指定的值进行检测</span><br><span class="line">rule.findbugs.RV_NEGATING_RESULT_OF_COMPARETO.<span class="attribute">name</span>=调换了compareTo()/compare()结果的正负</span><br><span class="line">rule.findbugs.RV_RETURN_VALUE_IGNORED_INFERRED.<span class="attribute">name</span>=方法忽略了返回值，这是正常的吗？</span><br><span class="line">rule.findbugs.SA_LOCAL_SELF_ASSIGNMENT_INSTEAD_OF_FIELD.<span class="attribute">name</span>=局部变量给自己赋值而不是赋值到实例变量中</span><br><span class="line">rule.findbugs.URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD.<span class="attribute">name</span>=未被读取的public/protected属性</span><br><span class="line">rule.findbugs.UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD.<span class="attribute">name</span>=未被使用的public 或 protected 属性</span><br><span class="line">rule.findbugs.UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD.<span class="attribute">name</span>=未初始化的public 或 protected 属性</span><br><span class="line">rule.findbugs.VA_FORMAT_STRING_USES_NEWLINE.<span class="attribute">name</span>=格式化代码应该使用%n代替\n</span><br><span class="line">rule.findbugs.VO_VOLATILE_INCREMENT.<span class="attribute">name</span>=volatile的自增操作不是原子的</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: findBugs错误英文翻译rule.findbugs.IMSE_DONT_CATCH_IMSE.name=不良实践 - 捕获可疑IllegalMonitorStateException rule.findbugs.BX_BOXING_IMMEDIATELY_UNBOXED.name=性能 - 基本类型包装之后立刻解包 rule.findbugs.IJU_SETUP_NO_SUPER.name=…阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>枚举类工具</title>
    <link href="https://lossingdawn.top/2017/04/19/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%B7%A5%E5%85%B7/"/>
    <id>https://lossingdawn.top/2017/04/19/枚举类工具/</id>
    <published>2017-04-19T02:22:00.000Z</published>
    <updated>2018-06-13T15:31:22.668Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 枚举类是程序中常用的一种类型，当经常面对说明与标识混乱的情况。在此记录一个枚举类的写法，方便标识与说明的绑定 基类： 枚举类： 使用：阅读全文</p><a id="more"></a><p>枚举类是程序中常用的一种类型，当经常面对说明与标识混乱的情况。在此记录一个枚举类的写法，方便标识与说明的绑定</p><p>基类：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">HashMap</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> class StandardType &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> <span class="built_in">key</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> StandardType(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> title) &#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">key</span> = <span class="built_in">key</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getTitle() &#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getTitle(StandardType[] values, <span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        StandardType val = StandardType.getEnum(values, <span class="built_in">key</span>);</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> val.getTitle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getKey() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">key</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getKey(StandardType[] values, <span class="keyword">String</span> title) &#123;</span><br><span class="line">        <span class="keyword">for</span> (StandardType val : values) &#123;</span><br><span class="line">            <span class="keyword">if</span> (val.getTitle().equals(title)) &#123;</span><br><span class="line">                <span class="keyword">return</span> val.getKey();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StandardType getEnum(StandardType[] values, <span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (StandardType val : values) &#123;</span><br><span class="line">            <span class="keyword">if</span> (val.getKey().equals(<span class="built_in">key</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">key</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> equals(StandardType type) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.<span class="built_in">key</span>.equals(type.getKey());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get value options based on values</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param values</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;&gt; getOpts(StandardType[] values) &#123;</span><br><span class="line">        List&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;&gt; opts = <span class="keyword">new</span> ArrayList&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;&gt;();</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; opt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (StandardType val : values) &#123;</span><br><span class="line">            opt = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;();</span><br><span class="line">            opt.put(<span class="string">"key"</span>, val.getKey());</span><br><span class="line">            opt.put(<span class="string">"title"</span>, val.getTitle());</span><br><span class="line">            opts.<span class="built_in">add</span>(opt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> opts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get value options based on values(Fuzzy query)</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param values</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;&gt; getSimilarOpts(StandardType[] values, <span class="keyword">String</span> input) &#123;</span><br><span class="line">        List&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;&gt; opts = <span class="keyword">new</span> ArrayList&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;&gt;();</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; opt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (StandardType val : values) &#123;</span><br><span class="line">            <span class="keyword">if</span> (val.getTitle().contains(input)) &#123;</span><br><span class="line">                opt = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;();</span><br><span class="line">                opt.put(<span class="string">"key"</span>, val.getKey());</span><br><span class="line">                opt.put(<span class="string">"title"</span>, val.getTitle());</span><br><span class="line">                opts.<span class="built_in">add</span>(opt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> opts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举类：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 支付方式</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PayWay</span> <span class="keyword"><span class="keyword">extends</span> <span class="type">StandardType</span></span> </span>&#123;</span><br><span class="line">       <span class="keyword">public</span> final <span class="keyword">static</span> PayWay WeChatPay = <span class="keyword">new</span> <span class="type">PayWay</span>(<span class="string">"WeChatPay"</span>, <span class="string">"微信支付"</span>);</span><br><span class="line">       <span class="keyword">public</span> final <span class="keyword">static</span> PayWay AliPay = <span class="keyword">new</span> <span class="type">PayWay</span>(<span class="string">"AliPay"</span>, <span class="string">"支付宝支付"</span>);</span><br><span class="line">       <span class="keyword">public</span> final <span class="keyword">static</span> PayWay UnionPay = <span class="keyword">new</span> <span class="type">PayWay</span>(<span class="string">"UnionPay"</span>, <span class="string">"银联支付"</span>);</span><br><span class="line">       <span class="keyword">public</span> final <span class="keyword">static</span> PayWay CashPay = <span class="keyword">new</span> <span class="type">PayWay</span>(<span class="string">"CashPay"</span>, <span class="string">"现金支付"</span>);</span><br><span class="line">       <span class="keyword">public</span> final <span class="keyword">static</span> PayWay[] values = &#123; WeChatPay, AliPay, UnionPay, CashPay &#125;;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> PayWay(<span class="keyword">String</span> key, <span class="keyword">String</span> title) &#123;</span><br><span class="line">           <span class="keyword">super</span>(key, title);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">       PayWay.AliPay.toString();<span class="comment">// AliPay</span></span><br><span class="line">       <span class="comment">// dome1</span></span><br><span class="line">       StandardType patWay = PayWay.getEnum(PayWay.values, <span class="string">"AliPay"</span>);</span><br><span class="line">       patWay.getKey();<span class="comment">// AliPay</span></span><br><span class="line">       patWay.getTitle();<span class="comment">// 支付宝支付</span></span><br><span class="line">       <span class="comment">// dome2</span></span><br><span class="line">       PayWay.getKey(PayWay.values, <span class="string">"支付宝支付"</span>);<span class="comment">// AliPay</span></span><br><span class="line">       PayWay.getTitle(PayWay.values, <span class="string">"AliPay"</span>);<span class="comment">// 支付宝支付</span></span><br><span class="line">       <span class="comment">// dome3</span></span><br><span class="line">       <span class="built_in">List</span>&lt;<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;&gt; listMap1 = PayWay.getOpts(PayWay.values);<span class="comment">//所有map</span></span><br><span class="line">       <span class="built_in">List</span>&lt;<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;&gt; listMap2 = PayWay.getSimilarOpts(PayWay.values, <span class="string">"支"</span>);<span class="comment">//一条支付宝的map</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 枚举类是程序中常用的一种类型，当经常面对说明与标识混乱的情况。在此记录一个枚举类的写法，方便标识与说明的绑定 基类： 枚举类： 使用：阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java.util.LinkedHashMap Cannot Be Cast To</title>
    <link href="https://lossingdawn.top/2017/04/17/java.util.LinkedHashMap%20cannot%20be%20cast%20to/"/>
    <id>https://lossingdawn.top/2017/04/17/java.util.LinkedHashMap cannot be cast to/</id>
    <published>2017-04-17T06:39:00.000Z</published>
    <updated>2018-06-13T15:31:22.668Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: Jackson转换泛型List出现错误java.util.LinkedHashMap cannot be cast to <a href="http://com.xxx" target="_blank" rel="noopener">com.xxx</a> ObjectMapper mapper = new ObjectMapper(); mapper.readValue(new File(fileAPI.getRo阅读全文</p><a id="more"></a><p>Jackson转换泛型List出现错误java.util.LinkedHashMap cannot be cast to <a href="http://com.xxx" target="_blank" rel="noopener">com.xxx</a></p><p>ObjectMapper mapper = new ObjectMapper();</p><p>mapper.readValue(new File(fileAPI.getRoot(), jsonFileName), Map.class);</p><p>当使用Jackson解析具体的bean时，应该使用尽量详尽的本来解析，而使用Map.class、List.class解析时，会对具体的bean解析不出</p><p>使用new TypeReference&lt;List<object>&gt;(){}，或者具体的Object.class，</object></p><p>注：Object为具体的解析类</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: Jackson转换泛型List出现错误java.util.LinkedHashMap cannot be cast to &lt;a href=&quot;http://com.xxx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;com.xxx&lt;/a&gt; ObjectMapper mapper = new ObjectMapper(); mapper.readValue(new File(fileAPI.getRo阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Bulk更新mongodb的脚本</title>
    <link href="https://lossingdawn.top/2017/03/22/bulk%E6%9B%B4%E6%96%B0mongodb%E7%9A%84%E8%84%9A%E6%9C%AC/"/>
    <id>https://lossingdawn.top/2017/03/22/bulk更新mongodb的脚本/</id>
    <published>2017-03-22T05:43:00.000Z</published>
    <updated>2018-06-13T15:31:22.668Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: bulk批处理mongodb，比普通的js脚本来的更快一些。 官方网址：<a href="https://docs.mongodb.com/manual/reference/method/Bulk/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/reference/method/Bulk/</a> bulk支持的方法： bulk插入示例： bulk更新示例： 打印字符串： 移除： 替换： 插入并更新： 获得历史： 阅读全文</p><a id="more"></a><p>bulk批处理mongodb，比普通的js脚本来的更快一些。</p><p>官方网址：<a href="https://docs.mongodb.com/manual/reference/method/Bulk/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/reference/method/Bulk/</a></p><p>bulk支持的方法：<br>Name Description <a href="https://docs.mongodb.com/manual/reference/method/Bulk.insert/#Bulk.insert" title="Bulk.insert()" target="_blank" rel="noopener"><br>Bulk.insert()<br></a> Adds an insert operation to a list of operations. <a href="https://docs.mongodb.com/manual/reference/method/Bulk.find/#Bulk.find" title="Bulk.find()" target="_blank" rel="noopener"><br>Bulk.find()<br></a> Specifies the query condition for an update or a remove operation. <a href="https://docs.mongodb.com/manual/reference/method/Bulk.find.removeOne/#Bulk.find.removeOne" title="Bulk.find.removeOne()" target="_blank" rel="noopener"><br>Bulk.find.removeOne()<br></a> Adds a single document remove operation to a list of operations. <a href="https://docs.mongodb.com/manual/reference/method/Bulk.find.remove/#Bulk.find.remove" title="Bulk.find.remove()" target="_blank" rel="noopener"><br>Bulk.find.remove()<br></a> Adds a multiple document remove operation to a list of operations. <a href="https://docs.mongodb.com/manual/reference/method/Bulk.find.replaceOne/#Bulk.find.replaceOne" title="Bulk.find.replaceOne()" target="_blank" rel="noopener"><br>Bulk.find.replaceOne()<br></a> Adds a single document replacement operation to a list of operations. <a href="https://docs.mongodb.com/manual/reference/method/Bulk.find.updateOne/#Bulk.find.updateOne" title="Bulk.find.updateOne()" target="_blank" rel="noopener"><br>Bulk.find.updateOne()<br></a> Adds a single document update operation to a list of operations. <a href="https://docs.mongodb.com/manual/reference/method/Bulk.find.update/#Bulk.find.update" title="Bulk.find.update()" target="_blank" rel="noopener"><br>Bulk.find.update()<br></a> Adds a</p><p>multi<br> update operation to a list of operations. <a href="https://docs.mongodb.com/manual/reference/method/Bulk.find.upsert/#Bulk.find.upsert" title="Bulk.find.upsert()" target="_blank" rel="noopener"><br>Bulk.find.upsert()<br></a> Specifies</p><p>upsert: true<br> for an update operation. <a href="https://docs.mongodb.com/manual/reference/method/Bulk.execute/#Bulk.execute" title="Bulk.execute()" target="_blank" rel="noopener"><br>Bulk.execute()<br></a> Executes a list of operations in bulk. <a href="https://docs.mongodb.com/manual/reference/method/Bulk.getOperations/#Bulk.getOperations" title="Bulk.getOperations()" target="_blank" rel="noopener"><br>Bulk.getOperations()<br></a> Returns an array of write operations executed in the</p><p>Bulk()<br> operations object. <a href="https://docs.mongodb.com/manual/reference/method/Bulk.tojson/#Bulk.tojson" title="Bulk.tojson()" target="_blank" rel="noopener"><br>Bulk.tojson()<br></a> Returns a JSON document that contains the number of operations and batches in the</p><p>Bulk()<br> operations object. <a href="https://docs.mongodb.com/manual/reference/method/Bulk.toString/#Bulk.toString" title="Bulk.toString()" target="_blank" rel="noopener"><br>Bulk.toString()<br></a> Returns the <a href="https://docs.mongodb.com/manual/reference/method/Bulk.tojson/#Bulk.tojson" title="Bulk.tojson()" target="_blank" rel="noopener"><br>Bulk.tojson()<br></a> results as a string.</p><p>bulk插入示例：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var bulk = db.items.initializeUnorderedBulkOp();</span><br><span class="line">bulk.insert( &#123; <span class="string">item:</span> <span class="string">"abc123"</span>, <span class="string">defaultQty:</span> <span class="number">100</span>, <span class="string">status:</span> <span class="string">"A"</span>, <span class="string">points:</span> <span class="number">100</span> &#125; );</span><br><span class="line">bulk.insert( &#123; <span class="string">item:</span> <span class="string">"ijk123"</span>, <span class="string">defaultQty:</span> <span class="number">200</span>, <span class="string">status:</span> <span class="string">"A"</span>, <span class="string">points:</span> <span class="number">200</span> &#125; );</span><br><span class="line">bulk.insert( &#123; <span class="string">item:</span> <span class="string">"mop123"</span>, <span class="string">defaultQty:</span> <span class="number">0</span>, <span class="string">status:</span> <span class="string">"P"</span>, <span class="string">points:</span> <span class="number">0</span> &#125; );</span><br><span class="line">bulk.execute();</span><br></pre></td></tr></table></figure><p></p><p>bulk更新示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量更新数据库对象</span></span><br><span class="line"><span class="comment"> * 1. 按条件批量更新</span></span><br><span class="line"><span class="comment"> * 2. 无条件批量更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 1. 按条件批量更新 **/</span></span><br><span class="line"><span class="comment">// step 1: get key-value</span></span><br><span class="line"><span class="keyword">var</span> idArray = [];</span><br><span class="line"><span class="keyword">var</span> valueArray = [];</span><br><span class="line"><span class="keyword">var</span> idx = <span class="number">-1</span>;</span><br><span class="line">db.conch_ChargeSchedule.find(&#123;<span class="string">'predictChargeValue'</span>:&#123;$exists:<span class="keyword">false</span>&#125;&#125;).<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(obj)</span></span>&#123;</span><br><span class="line">    idx++;</span><br><span class="line">    idArray[idx]=obj._id;</span><br><span class="line">    valueArray[idx]=obj.planValue;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// step 2: update</span></span><br><span class="line"><span class="keyword">var</span> bulk = db.conch_ChargeSchedule.initializeUnorderedBulkOp();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;idArray.length; i++)&#123;</span><br><span class="line">    bulk.find( &#123; _id: idArray[i] &#125; ).update(&#123; $set: &#123; predictChargeValue: valueArray[i] &#125; &#125;);</span><br><span class="line">&#125;</span><br><span class="line">bulk.execute();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 2. 无条件批量更新 **/</span></span><br><span class="line"><span class="keyword">var</span> bulk = db.conch_ChargeSchedule.initializeUnorderedBulkOp();</span><br><span class="line">bulk.find(&#123;&#125;).update(&#123; $set: &#123; isPlanValueUpdatable: <span class="keyword">true</span>, isStatusUpdatable:<span class="keyword">true</span>, isStartDateUpdatable:<span class="keyword">true</span> &#125; &#125;);</span><br><span class="line">bulk.execute();</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var bulk = db.items.initializeUnorderedBulkOp();</span><br><span class="line">bulk.find( &#123; <span class="string">status:</span> <span class="string">"D"</span> &#125; ).updateOne( &#123; <span class="string">$set:</span> &#123; <span class="string">status:</span> <span class="string">"I"</span>, <span class="string">points:</span> <span class="string">"0"</span> &#125; &#125; );</span><br><span class="line">bulk.execute();</span><br></pre></td></tr></table></figure><p>打印字符串：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var bulk = db.items.initializeOrderedBulkOp();</span><br><span class="line">bulk.insert( &#123; <span class="string">item:</span> <span class="string">"abc123"</span>, <span class="string">status:</span> <span class="string">"A"</span>, <span class="string">defaultQty:</span> <span class="number">500</span>, <span class="string">points:</span> <span class="number">5</span> &#125; );</span><br><span class="line">bulk.insert( &#123; <span class="string">item:</span> <span class="string">"ijk123"</span>, <span class="string">status:</span> <span class="string">"A"</span>, <span class="string">defaultQty:</span> <span class="number">100</span>, <span class="string">points:</span> <span class="number">10</span> &#125; );</span><br><span class="line">bulk.find( &#123; <span class="string">status:</span> <span class="string">"D"</span> &#125; ).removeOne();</span><br><span class="line">bulk.toString();</span><br></pre></td></tr></table></figure><p>移除：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var bulk = db.items.initializeUnorderedBulkOp();</span><br><span class="line">bulk.<span class="built_in">find</span>( &#123; <span class="built_in">status</span>: <span class="string">"D"</span> &#125; ).<span class="built_in">remove</span>();</span><br><span class="line">bulk.<span class="built_in">execute</span>();</span><br></pre></td></tr></table></figure><p></p><p>替换：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">bulk </span>= db.<span class="keyword">items.initializeUnorderedBulkOp();</span></span><br><span class="line"><span class="keyword">bulk.find( </span>&#123; <span class="keyword">item: </span><span class="string">"abc123"</span> &#125; ).replaceOne( &#123; <span class="keyword">item: </span><span class="string">"abc123"</span>, status: <span class="string">"P"</span>, points: <span class="number">100</span> &#125; )<span class="comment">;</span></span><br><span class="line"><span class="keyword">bulk.execute();</span></span><br></pre></td></tr></table></figure><p>插入并更新：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">var</span> <span class="string">bulk</span> <span class="string">=</span> <span class="string">db.items.initializeUnorderedBulkOp();</span></span><br><span class="line"><span class="string">bulk.find(</span> <span class="string">&#123;</span> <span class="attr">status:</span> <span class="string">"P"</span><span class="string">,</span> <span class="attr">item:</span> <span class="literal">null</span> <span class="string">&#125;</span> <span class="string">).upsert().updateOne(</span></span><br><span class="line">   <span class="string">&#123;</span></span><br><span class="line">     <span class="string">$setOnInsert:</span> <span class="string">&#123;</span> <span class="attr">defaultQty:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">inStock:</span> <span class="literal">true</span> <span class="string">&#125;,</span></span><br><span class="line">     <span class="string">$currentDate:</span> <span class="string">&#123;</span> <span class="attr">lastModified:</span> <span class="literal">true</span> <span class="string">&#125;,</span></span><br><span class="line">     <span class="string">$set:</span> <span class="string">&#123;</span> <span class="attr">points:</span> <span class="string">"0"</span> <span class="string">&#125;</span></span><br><span class="line">   <span class="string">&#125;</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string">bulk.execute();</span></span><br></pre></td></tr></table></figure><p>获得历史：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">bulk </span>= db.items.initializeUnorderedBulkOp()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">for (var i = <span class="number">1</span><span class="comment">; i &lt;= 1500; i++) &#123;</span></span><br><span class="line">    <span class="keyword">bulk.insert( </span>&#123; x: i &#125; )<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bulk.execute();</span></span><br><span class="line"><span class="keyword">bulk.getOperations();// </span>获得操作历史</span><br></pre></td></tr></table></figure><p>普通的js脚本更新mongodb库，为单线程阻塞方式，有数据大小限制，数据大了容易断掉。bulk的则不会出现这种状况，效率max</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: bulk批处理mongodb，比普通的js脚本来的更快一些。 官方网址：&lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/Bulk/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.mongodb.com/manual/reference/method/Bulk/&lt;/a&gt; bulk支持的方法： bulk插入示例： bulk更新示例： 打印字符串： 移除： 替换： 插入并更新： 获得历史： 阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Html提示框插件</title>
    <link href="https://lossingdawn.top/2016/06/16/html%E6%8F%90%E7%A4%BA%E6%A1%86%E6%8F%92%E4%BB%B6/"/>
    <id>https://lossingdawn.top/2016/06/16/html提示框插件/</id>
    <published>2016-06-16T01:33:00.000Z</published>
    <updated>2018-06-13T15:31:22.668Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 最近工作需要，用到各式各样的提示框，寻找了很久，发现一个的第三方的插件很好用，各种样式、接口良好、允许自定义。 官网：<a href="http://layer.layui.com/" target="_blank" rel="noopener">http://layer.layui.com/</a> 使用需要先引入jq1.8以上：阅读全文</p><a id="more"></a><p>最近工作需要，用到各式各样的提示框，寻找了很久，发现一个的第三方的插件很好用，各种样式、接口良好、允许自定义。</p><p>官网：<a href="http://layer.layui.com/" target="_blank" rel="noopener">http://layer.layui.com/</a></p><p>使用需要先引入jq1.8以上：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.9.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"layer/layer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 最近工作需要，用到各式各样的提示框，寻找了很久，发现一个的第三方的插件很好用，各种样式、接口良好、允许自定义。 官网：&lt;a href=&quot;http://layer.layui.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://layer.layui.com/&lt;/a&gt; 使用需要先引入jq1.8以上：阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ListView在ScrollView中不显示全部的问题</title>
    <link href="https://lossingdawn.top/2015/09/22/ListView%E5%9C%A8ScrollView%E4%B8%AD%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%85%A8%E9%83%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://lossingdawn.top/2015/09/22/ListView在ScrollView中不显示全部的问题/</id>
    <published>2015-09-22T02:27:00.000Z</published>
    <updated>2018-06-13T15:31:21.408Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 在实际应用中，我们可能会遇到把ListView放到ScrollView中的情况，在这种情况下，ListView的滑动属性与ScrollView的滑动出现冲突，从而ListView只显示一项。这里提供一种解决方案，就是设置ListView中每个Item的高度显示之，使他失去滑动的属性，从而适应Sc…阅读全文</p><a id="more"></a><p>在实际应用中，我们可能会遇到把ListView放到ScrollView中的情况，在这种情况下，ListView的滑动属性与ScrollView的滑动出现冲突，从而ListView只显示一项。这里提供一种解决方案，就是设置ListView中每个Item的高度显示之，使他失去滑动的属性，从而适应ScrollView的滑动。只需在填充数据之后设置即可：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 通过设置它的高度，让它“放弃”自身滚动属性，而放置到ScrollView中使用的。</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * @param lv</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   private void setListViewHeight(ListView <span class="keyword">lv</span>) &#123;</span><br><span class="line">       ListAdapter <span class="keyword">la</span> = <span class="keyword">lv</span>.getAdapter();</span><br><span class="line">       <span class="keyword">if</span> (null == <span class="keyword">la</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// calculate height of all items.</span></span><br><span class="line">       int <span class="keyword">h</span> = 0;</span><br><span class="line">       final int cnt = <span class="keyword">la</span>.getCount();</span><br><span class="line">       <span class="keyword">for</span> (int i = 0; i &lt; cnt; i++) &#123;</span><br><span class="line">           <span class="keyword">View</span> item = <span class="keyword">la</span>.getView(i, null, <span class="keyword">lv</span>);</span><br><span class="line">           item.measure(0, 0);</span><br><span class="line">           <span class="keyword">h</span> += item.getMeasuredHeight();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// reset ListView height</span></span><br><span class="line">       ViewGroup.LayoutParams lp = <span class="keyword">lv</span>.getLayoutParams();</span><br><span class="line">       lp.height = <span class="keyword">h</span> + (<span class="keyword">lv</span>.getDividerHeight() * (cnt - 1));</span><br><span class="line">       <span class="keyword">lv</span>.setLayoutParams(lp);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 在实际应用中，我们可能会遇到把ListView放到ScrollView中的情况，在这种情况下，ListView的滑动属性与ScrollView的滑动出现冲突，从而ListView只显示一项。这里提供一种解决方案，就是设置ListView中每个Item的高度显示之，使他失去滑动的属性，从而适应Sc…阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>安卓图片加载框架--Universal-Image-Loader</title>
    <link href="https://lossingdawn.top/2015/09/18/%E5%AE%89%E5%8D%93%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6--Universal-Image-Loader/"/>
    <id>https://lossingdawn.top/2015/09/18/安卓图片加载框架--Universal-Image-Loader/</id>
    <published>2015-09-18T09:05:00.000Z</published>
    <updated>2018-06-13T15:31:22.667Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 今天来介绍图片加载的框架Android-Universal-Image-Loader GITHUB上的下载路径为：<a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="noopener">https://github.com/nostra13/Android-Universal-Image-Loader</a> 也可以自行百度下载。 首先来封装的一个类CacheTool…阅读全文</p><a id="more"></a><p>今天来介绍图片加载的框架Android-Universal-Image-Loader</p><p>GITHUB上的下载路径为：<a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="noopener">https://github.com/nostra13/Android-Universal-Image-Loader</a></p><p>也可以自行百度下载。</p><p>首先来封装的一个类CacheTool ，由于其他加载图片的方法有点繁琐，所以这里仅封装了一个简单实用的加载方法：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> android.content.Context;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> android.graphics.Bitmap;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> android.graphics.Bitmap.CompressFormat;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> android.net.Uri;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> android.os.Environment;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> android.widget.ImageView;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.File;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> com.ncct.app.R;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiscCache;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> com.nostra13.universalimageloader.cache.memory.impl.UsingFreqLimitedMemoryCache;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> com.nostra13.universalimageloader.core.DisplayImageOptions;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> com.nostra13.universalimageloader.core.ImageLoader;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> com.nostra13.universalimageloader.core.ImageLoaderConfiguration;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> com.nostra13.universalimageloader.core.assist.ImageLoadingListener;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> com.nostra13.universalimageloader.core.assist.QueueProcessingType;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> com.nostra13.universalimageloader.core.download.BaseImageDownloader;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图片加载框架</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author jiang</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheTool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> File cacheDir = Environment.getDataDirectory();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DisplayImageOptions options = <span class="keyword">new</span> DisplayImageOptions.Builder().showStubImage(R.drawable.loading_img)</span><br><span class="line">            .showImageForEmptyUri(R.drawable.loading_error).showImageOnFail(R.drawable.loading_error)</span><br><span class="line">            .cacheInMemory(<span class="literal">true</span>).cacheOnDisc(<span class="literal">true</span>).bitmapConfig(Bitmap.Config.RGB_565).build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ImageLoaderConfiguration config;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Init(Context context) &#123;</span><br><span class="line">        config = <span class="keyword">new</span> ImageLoaderConfiguration.Builder(context).memoryCacheExtraOptions(<span class="number">480</span>, <span class="number">800</span>) <span class="comment">// max</span></span><br><span class="line">                                                                                                    <span class="comment">// width,</span></span><br><span class="line">                                                                                                    <span class="comment">// max</span></span><br><span class="line">                                                                                                    <span class="comment">// height，即保存的每个缓存文件的最大长宽</span></span><br><span class="line">                .discCacheExtraOptions(<span class="number">480</span>, <span class="number">800</span>, CompressFormat.JPEG, <span class="number">75</span>, <span class="literal">null</span>) <span class="comment">// Can</span></span><br><span class="line">                                                                                <span class="comment">// slow</span></span><br><span class="line">                                                                                <span class="comment">// ImageLoader,</span></span><br><span class="line">                                                                                <span class="comment">// use</span></span><br><span class="line">                                                                                <span class="comment">// it</span></span><br><span class="line">                                                                                <span class="comment">// carefully</span></span><br><span class="line">                                                                                <span class="comment">// (Better</span></span><br><span class="line">                                                                                <span class="comment">// don't</span></span><br><span class="line">                                                                                <span class="comment">// use</span></span><br><span class="line">                                                                                <span class="comment">// it)/设置缓存的详细信息，最好不要设置这个</span></span><br><span class="line">                .threadPoolSize(<span class="number">3</span>)<span class="comment">// 线程池内加载的数量</span></span><br><span class="line">                .threadPriority(Thread.NORM_PRIORITY - <span class="number">2</span>).denyCacheImageMultipleSizesInMemory()</span><br><span class="line">                .memoryCache(<span class="keyword">new</span> UsingFreqLimitedMemoryCache(<span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>)) <span class="comment">// You</span></span><br><span class="line">                                                                                <span class="comment">// can</span></span><br><span class="line">                                                                                <span class="comment">// pass</span></span><br><span class="line">                                                                                <span class="comment">// your</span></span><br><span class="line">                                                                                <span class="comment">// own</span></span><br><span class="line">                                                                                <span class="comment">// memory</span></span><br><span class="line">                                                                                <span class="comment">// cache</span></span><br><span class="line">                                                                                <span class="comment">// implementation/你可以通过自己的内存缓存实现</span></span><br><span class="line">                .memoryCacheSize(<span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>).discCacheSize(<span class="number">50</span> * <span class="number">1024</span> * <span class="number">1024</span>)</span><br><span class="line">                .discCacheFileNameGenerator(<span class="keyword">new</span> Md5FileNameGenerator())<span class="comment">// 将保存的时候的URI名称用MD5</span></span><br><span class="line">                                                                        <span class="comment">// 加密</span></span><br><span class="line">                .tasksProcessingOrder(QueueProcessingType.LIFO).discCacheFileCount(<span class="number">100</span>) <span class="comment">// 缓存的文件数量</span></span><br><span class="line">                <span class="comment">// .discCache(new UnlimitedDiscCache(cacheDir))// 自定义缓存路径</span></span><br><span class="line">                .defaultDisplayImageOptions(DisplayImageOptions.createSimple())</span><br><span class="line">                .imageDownloader(<span class="keyword">new</span> BaseImageDownloader(context, <span class="number">5</span> * <span class="number">1000</span>, <span class="number">30</span> * <span class="number">1000</span>)) <span class="comment">// connectTimeout</span></span><br><span class="line">                                                                                        <span class="comment">// (5</span></span><br><span class="line">                                                                                        <span class="comment">// s),</span></span><br><span class="line">                                                                                        <span class="comment">// readTimeout</span></span><br><span class="line">                                                                                        <span class="comment">// (30</span></span><br><span class="line">                                                                                        <span class="comment">// s)超时时间</span></span><br><span class="line">                .writeDebugLogs() <span class="comment">// Remove for release app</span></span><br><span class="line">                .build();<span class="comment">// 开始构建</span></span><br><span class="line">        <span class="comment">// Initialize ImageLoader with configuration.</span></span><br><span class="line">        ImageLoader.getInstance().init(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载图片并监听回调结果</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param iv</span></span><br><span class="line"><span class="comment">     * @param url</span></span><br><span class="line"><span class="comment">     * @param mImageLoadingListener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> displayImg(ImageView iv, String url, ImageLoadingListener mImageLoadingListener) &#123;</span><br><span class="line">        ImageLoader.getInstance().displayImage(url, iv, options, mImageLoadingListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载图片</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param iv</span></span><br><span class="line"><span class="comment">     * @param url</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> displayImg(ImageView iv, String url) &#123;</span><br><span class="line"></span><br><span class="line">        ImageLoader.getInstance().displayImage(url, iv, options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除内存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> clearMemoryCache() &#123;</span><br><span class="line">        ImageLoader.getInstance().clearMemoryCache();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> clearDiskCache() &#123;</span><br><span class="line">        ImageLoader.getInstance().clearDiscCache();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到某个图片的缓存路径</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param imageUrl</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String getImagePath(String imageUrl) &#123;</span><br><span class="line">        <span class="keyword">return</span> ImageLoader.getInstance().getDiscCache().get(imageUrl).getPath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>封装好了，里面都有详细的介绍，这里介绍下上面的中的ImageLoadingListener 接口回调，按ctrl + 鼠标左键可以进入jar包里的java文件：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * Copyright 2011-2013 Sergey Tarasevich</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> *</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * Licensed under </span>the<span class="markdown"> Apache License, Version 2.0 (</span>the<span class="markdown"> "License");</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * </span>you<span class="markdown"> may not use this file except in compliance with </span>the<span class="markdown"> License.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * You may obtain </span>a<span class="markdown"> copy of </span>the<span class="markdown"> License at</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> *</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * http://www.apache.org/licenses/LICENSE-2.0</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> *</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * Unless required by applicable law or agreed to in writing, software</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * distributed under </span>the<span class="markdown"> License is distributed on </span>an<span class="markdown"> "AS IS" BASIS,</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * See </span>the<span class="markdown"> License for </span>the<span class="markdown"> specific language governing permissions and</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * limitations under </span>the<span class="markdown"> License.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*/</span></span></span><br><span class="line">package com.nostra13.universalimageloader.core.assist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * Listener for image loading process.<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * You can use &#123;@link SimpleImageLoadingListener&#125; for implementing only needed methods.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> *</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * @see SimpleImageLoadingListener</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * @see FailReason</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * @since 1.0.0</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line">public <span class="class"><span class="keyword">interface</span> <span class="title">ImageLoadingListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * Is called when image loading task was started</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @param imageUri Loading image URI</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @param view     View for image</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="keyword">void</span> onLoadingStarted(<span class="built_in">String</span> imageUri, View view);</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * Is called when </span></span>an<span class="markdown"> error was occurred during image loading</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @param imageUri   Loading image URI</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @param view       View for image. Can be &lt;b&gt;null&lt;/b&gt;.</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @param failReason &#123;@linkplain FailReason The reason&#125; why image loading was failed</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="keyword">void</span> onLoadingFailed(<span class="built_in">String</span> imageUri, View view, FailReason failReason);</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * Is called when image is loaded successfully (and displayed in View if one was specified)</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @param imageUri    Loaded image URI</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @param view        View for image. Can be &lt;b&gt;null&lt;/b&gt;.</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @param loadedImage Bitmap of loaded and decoded image</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="keyword">void</span> onLoadingComplete(<span class="built_in">String</span> imageUri, View view, Bitmap loadedImage);</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * Is called when image loading task was cancelled because View for image was reused in newer task</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @param imageUri Loading image URI</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * @param view     View for image. Can be &lt;b&gt;null&lt;/b&gt;.</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="keyword">void</span> onLoadingCancelled(<span class="built_in">String</span> imageUri, View view);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从以上代码中我们可以了解到接口中我们可以监听到开始、失败、完成、取消的动作。</p><p>现在开始使用吧：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private ImageView My_Head<span class="comment">;</span></span><br><span class="line">   @Override</span><br><span class="line">   protected void onCreate(<span class="keyword">Bundle </span>savedInstanceState) &#123;</span><br><span class="line">       super.onCreate(savedInstanceState)<span class="comment">;</span></span><br><span class="line">       requestWindowFeature(Window.FEATURE_NO_TITLE)<span class="comment">;</span></span><br><span class="line">       setContentView(R.layout.personcenter)<span class="comment">;</span></span><br><span class="line">       My_Head = (ImageView) findViewById(R.id.My_Head)<span class="comment">;</span></span><br><span class="line">               String Url = <span class="string">"http://pic.nipic.com/2007-11-09/200711912453162_2.jpg"</span><span class="comment">;</span></span><br><span class="line">               <span class="keyword">CacheTool.displayImg(My_Head </span>, Url )<span class="comment">;</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Mark一下，暂存一个直接通过URL获取bitmap的函数，未作内存处理。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取指定路径的图片</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * @param urlpath</span></span><br><span class="line"><span class="comment">    * @return</span></span><br><span class="line"><span class="comment">    * @throws Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   public <span class="keyword">Bitmap </span>getImage(String urlpath) throws Exception &#123;</span><br><span class="line">       URL url = new URL(urlpath)<span class="comment">;</span></span><br><span class="line">       HttpURLConnection conn = (HttpURLConnection) url.openConnection()<span class="comment">;</span></span><br><span class="line">       conn.setRequestMethod(<span class="string">"GET"</span>)<span class="comment">;</span></span><br><span class="line">       conn.setConnectTimeout(<span class="number">5000</span>)<span class="comment">;</span></span><br><span class="line">       <span class="keyword">Bitmap </span><span class="keyword">bitmap </span>= null<span class="comment">;</span></span><br><span class="line">       InputStream inputStream = conn.getInputStream()<span class="comment">;</span></span><br><span class="line">       <span class="keyword">bitmap </span>= <span class="keyword">BitmapFactory.decodeStream(inputStream);</span></span><br><span class="line"><span class="keyword"> </span>      return <span class="keyword">bitmap;</span></span><br><span class="line"><span class="keyword"> </span>  &#125;</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 今天来介绍图片加载的框架Android-Universal-Image-Loader GITHUB上的下载路径为：&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/nostra13/Android-Universal-Image-Loader&lt;/a&gt; 也可以自行百度下载。 首先来封装的一个类CacheTool…阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>移动应用图片的福音--七牛云存储</title>
    <link href="https://lossingdawn.top/2015/09/18/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E5%9B%BE%E7%89%87%E7%9A%84%E7%A6%8F%E9%9F%B3--%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8/"/>
    <id>https://lossingdawn.top/2015/09/18/移动应用图片的福音--七牛云存储/</id>
    <published>2015-09-18T08:35:00.000Z</published>
    <updated>2018-06-13T15:31:21.408Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 本篇来介绍移动应用图片存储的第三方，官方网址：<a href="http://www.qiniu.com/" target="_blank" rel="noopener">http://www.qiniu.com/</a> 首先，在七牛上要注册开发者账号，需要认证身份证信息。认证完之后，我们来开始进行安卓端的开发。一、准备信息 进行图片的上传与下载，我们需要准备几个信息，首先是空间名，然后是域名，再者是密钥对。如下图：二、…阅读全文</p><a id="more"></a><p>本篇来介绍移动应用图片存储的第三方，官方网址：<a href="http://www.qiniu.com/" target="_blank" rel="noopener">http://www.qiniu.com/</a></p><p>首先，在七牛上要注册开发者账号，需要认证身份证信息。认证完之后，我们来开始进行安卓端的开发。</p><p>一、准备信息</p><p>进行图片的上传与下载，我们需要准备几个信息，首先是空间名，然后是域名，再者是密钥对。如下图：</p><p><img src="https://images2015.cnblogs.com/blog/670989/201509/670989-20150918155902054-343110243.jpg" alt=""></p><p><img src="https://images2015.cnblogs.com/blog/670989/201509/670989-20150918155655398-238930394.jpg" alt=""></p><p>二、安卓端图片上传</p><p>首先我们需要导入JAR包，网址：<a href="http://developer.qiniu.com/docs/v6/sdk/android-sdk.html" target="_blank" rel="noopener">http://developer.qiniu.com/docs/v6/sdk/android-sdk.html</a></p><p>现在来编写上传相关的程序：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> isCancelled = false;<span class="comment">// 取消标志    　　 static String AccessKey =七牛上的公钥;</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">String</span> SecretKey =七牛上的私钥;</span><br><span class="line">   UploadManager uploadManager;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *uploadManager有两种初始化方法，一种是默认配置，一种的自动逸配置</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       <span class="comment">// 默认配置</span></span><br><span class="line">　　　　　uploadManager=<span class="keyword">new</span> UploadManager();</span><br><span class="line">       <span class="comment">//自定义配置</span></span><br><span class="line">       Configuration <span class="built_in">config</span>= <span class="keyword">new</span> Configuration.Builder().chunkSize(<span class="number">256</span> * <span class="number">1024</span>) <span class="comment">// 分片上传时，每片的大小。</span></span><br><span class="line">                                                                       <span class="comment">// 默认</span></span><br><span class="line">                                                                       <span class="comment">// 256K</span></span><br><span class="line">                   .putThreshhold(<span class="number">512</span> * <span class="number">1024</span>) <span class="comment">// 启用分片上传阀值。默认 512K</span></span><br><span class="line">                   .connectTimeout(<span class="number">10</span>) <span class="comment">// 链接超时。默认 10秒</span></span><br><span class="line">                   .responseTimeout(<span class="number">60</span>) <span class="comment">// 服务器响应超时。默认 60秒</span></span><br><span class="line">                   <span class="comment">// .recorder(recorder) // recorder 分片上传时，已上传片记录器。默认 null</span></span><br><span class="line">                   <span class="comment">// .recorder(recorder, keyGen) // keyGen</span></span><br><span class="line">                   <span class="comment">// 分片上传时，生成标识符，用于片记录器区分是那个文件的上传记录</span></span><br><span class="line">                   .build();</span><br><span class="line">           <span class="comment">// 重用 uploadManager。一般地，只需要创建一个 uploadManager 对象</span></span><br><span class="line">           uploadManager = <span class="keyword">new</span> UploadManager(<span class="built_in">config</span>);</span><br></pre></td></tr></table></figure><p>初始化配置搞定了，下面来进行上传操作：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">　　　　 <span class="keyword">String</span> _uploadToken = getUploadToken(scope); 　　　　 uploadManager.put(SAVE_FILE_DIRECTORY, <span class="comment">// 本地上传路径、文件、字符串</span></span><br><span class="line">        <span class="built_in">key</span>, <span class="comment">// 网站上的名字</span></span><br><span class="line">        _uploadToken, <span class="comment">// 验证信息</span></span><br><span class="line">        <span class="keyword">new</span> UpCompletionHandler() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> complete(<span class="keyword">String</span> <span class="built_in">key</span>, ResponseInfo info, <span class="keyword">JSONObject</span> response) &#123;</span><br><span class="line">                Log.e(<span class="string">"qiniu"</span>, info.toString());</span><br><span class="line">                Log.i(<span class="string">"是否成功"</span>, <span class="keyword">String</span>.valueOf(info.isOK()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">new</span> UploadOptions(<span class="keyword">null</span>, <span class="comment">// 自定义变量，key必须以 x: 开始。</span></span><br><span class="line">                <span class="string">"webp"</span>, <span class="comment">// 指定文件的mimeType。</span></span><br><span class="line">                <span class="keyword">false</span>, <span class="comment">// 是否验证上传文件。</span></span><br><span class="line">                <span class="keyword">new</span> UpProgressHandler() &#123; <span class="comment">// 上传进度回调。</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> progress(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">double</span> percent) &#123;</span><br><span class="line">                        Log.i(<span class="string">"qiniu"</span>, <span class="built_in">key</span> + <span class="string">": "</span> + percent);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> UpCancellationSignal() &#123; <span class="comment">// 取消上传，当isCancelled()返回true时，不再执行更多上传。</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="built_in">boolean</span> isCancelled() &#123;</span><br><span class="line">                        <span class="keyword">return</span> isCancelled;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在上传的操作中唯一需要我们头疼的就是_uploadToken，下面来介绍如何生成一个_uploadToken令牌信息：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> getUploadToken(<span class="keyword">String</span> scope) &#123;</span><br><span class="line">       <span class="comment">// 构造上传策略</span></span><br><span class="line">       <span class="keyword">JSONObject</span> json = <span class="keyword">new</span> <span class="keyword">JSONObject</span>();</span><br><span class="line">       <span class="keyword">long</span> dataline = System.currentTimeMillis() / <span class="number">1000</span> + <span class="number">3600</span>;</span><br><span class="line">       <span class="keyword">String</span> uploadToken = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           json.put(<span class="string">"deadline"</span>, dataline);<span class="comment">// 有效时间为一个小时</span></span><br><span class="line">           json.put(<span class="string">"scope"</span>, scope);<span class="comment">// 上传空间</span></span><br><span class="line">           <span class="keyword">String</span> encodedPutPolicy = UrlSafeBase64.encodeToString(json.toString().getBytes());</span><br><span class="line">           <span class="built_in">byte</span>[] sign = HmacSHA1Encrypt(encodedPutPolicy, SecretKey);</span><br><span class="line">           <span class="keyword">String</span> encodedSign = UrlSafeBase64.encodeToString(sign);</span><br><span class="line">           uploadToken = AccessKey + <span class="string">':'</span> + encodedSign + <span class="string">':'</span> + encodedPutPolicy;<span class="comment">// 登录信息token=公钥：加密的json信息：原始json信息</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> uploadToken;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/////////////// ************************************/////////////////////////</span></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用 HMAC-SHA1 签名方法对对encryptText进行签名</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * @param encryptText</span></span><br><span class="line"><span class="comment">    *            被签名的字符串</span></span><br><span class="line"><span class="comment">    * @param encryptKey</span></span><br><span class="line"><span class="comment">    *            密钥</span></span><br><span class="line"><span class="comment">    * @return</span></span><br><span class="line"><span class="comment">    * @throws Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> MAC_NAME = <span class="string">"HmacSHA1"</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> ENCODING = <span class="string">"UTF-8"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">byte</span>[] HmacSHA1Encrypt(<span class="keyword">String</span> encryptText, <span class="keyword">String</span> encryptKey) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="built_in">byte</span>[] data = encryptKey.getBytes(ENCODING);</span><br><span class="line">       <span class="comment">// 根据给定的字节数组构造一个密钥,第二参数指定一个密钥算法的名称</span></span><br><span class="line">       SecretKey secretKey = <span class="keyword">new</span> SecretKeySpec(data, MAC_NAME);</span><br><span class="line">       <span class="comment">// 生成一个指定 Mac 算法 的 Mac 对象</span></span><br><span class="line">       Mac mac = Mac.getInstance(MAC_NAME);</span><br><span class="line">       <span class="comment">// 用给定密钥初始化 Mac 对象</span></span><br><span class="line">       mac.init(secretKey);</span><br><span class="line">       <span class="built_in">byte</span>[] <span class="built_in">text</span> = encryptText.getBytes(ENCODING);</span><br><span class="line">       <span class="comment">// 完成 Mac 操作</span></span><br><span class="line">       <span class="keyword">return</span> mac.doFinal(<span class="built_in">text</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>好了现在我们就可以成功上传了。</p><p>三、编写其他操作</p><p>1、取消操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 点击取消按钮，让 UpCancellationSignal#isCancelled() 方法返回 true ，以停止上传</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       isCancelled = <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>2、删除操作</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除指定空间、名称的资源</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * @param bucket 空间名</span></span><br><span class="line"><span class="comment">    * @param fileName 文件名</span></span><br><span class="line"><span class="comment">    * @return</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">boolean</span> deleteFile(<span class="keyword">String</span> bucket, <span class="keyword">String</span> fileName) &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">String</span> entryUrl = bucket + <span class="string">":"</span> + fileName;</span><br><span class="line">           <span class="keyword">String</span> encodedEntryURI = UrlSafeBase64.encodeToString(entryUrl.getBytes());</span><br><span class="line">           <span class="keyword">String</span> host = <span class="string">"http://rs.qiniu.com"</span>;</span><br><span class="line">           <span class="keyword">String</span> path = <span class="string">"/delete/"</span> + encodedEntryURI;</span><br><span class="line">           <span class="keyword">String</span> url = host + path;</span><br><span class="line">           <span class="built_in">byte</span>[] sign = HmacSHA1Encrypt(path + <span class="string">"\n"</span>, SecretKey);</span><br><span class="line">           <span class="keyword">String</span> encodedSign = UrlSafeBase64.encodeToString(sign);</span><br><span class="line">           <span class="keyword">String</span> authorization = AccessKey + <span class="string">':'</span> + encodedSign;</span><br><span class="line">           HttpClient httpClient = <span class="keyword">new</span> DefaultHttpClient();</span><br><span class="line">           HttpPost mothod = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">           mothod.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">           mothod.setHeader(<span class="string">"Authorization"</span>, <span class="string">"QBox "</span> + authorization);</span><br><span class="line">           <span class="comment">// 连接超时时间</span></span><br><span class="line">           httpClient.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, <span class="number">20000</span>);</span><br><span class="line">           <span class="comment">// 读取超时时间</span></span><br><span class="line">           httpClient.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT, <span class="number">20000</span>);</span><br><span class="line">           HttpResponse response = httpClient.execute(mothod);</span><br><span class="line">           StatusLine statusLine = response.getStatusLine();</span><br><span class="line">           <span class="built_in">int</span> statusCode = statusLine.getStatusCode();</span><br><span class="line">           <span class="keyword">if</span> (statusCode == HttpStatus.SC_OK) &#123;</span><br><span class="line">               Log.e(<span class="string">"删除结果"</span>, <span class="string">"successful"</span>);</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       Log.e(<span class="string">"删除结果"</span>, <span class="string">"false"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>好了，暂时就先到这里，虽然进行了一些封装，但是对自己的封装不很满意所以暂时不发了，以后封装完善了再发吧，这些已经足够新手理解了。下篇介绍获取网络图片并显示。主要用到目前最好的图片加载框架ImageLoad。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 本篇来介绍移动应用图片存储的第三方，官方网址：&lt;a href=&quot;http://www.qiniu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.qiniu.com/&lt;/a&gt; 首先，在七牛上要注册开发者账号，需要认证身份证信息。认证完之后，我们来开始进行安卓端的开发。一、准备信息 进行图片的上传与下载，我们需要准备几个信息，首先是空间名，然后是域名，再者是密钥对。如下图：二、…阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>（转）Android自定义控件</title>
    <link href="https://lossingdawn.top/2015/08/10/%EF%BC%88%E8%BD%AC%EF%BC%89android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    <id>https://lossingdawn.top/2015/08/10/（转）android自定义控件/</id>
    <published>2015-08-10T06:31:00.000Z</published>
    <updated>2018-06-13T15:31:21.408Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 原帖地址：<a href="http://my.oschina.net/wangjunhe/blog/99764%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E6%8E%A7%E4%BB%B6%EF%BC%9A%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E6%9C%89%E5%88%9B%E6%84%8F%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85%EF%BC%8C%E4%BD%A0%E7%BB%8F%E5%B8%B8%E4%BC%9A%E9%81%87%E5%88%B0%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9F%E6%8E%A7%E4%BB%B6%E6%97%A0%E6%B3%95%E6%BB%A1%E8%B6%B3%E4%BD%A0%E7%9A%84%E9%9C%80%E6%B1%82%E3%80%82%E4%B8%BA%E4%BA%86%E4%BC%98%E5%8C%96%E4%BD%A0%E7%9A%84%E7%95%8C%E9%9D%A2%E5%92%8C%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%EF%BC%8C%E5%AE%89%E5%8D%93%E5%85%81%E8%AE%B8%E4%BD%A0%E5%8E%BB%E7%BB%A7%E6%89%BF%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%E7%9A%84%E6%8E%A7%E4%BB%B6%E6%88%96%E8%80%85%E5%AE%9E%E7%8E%B0%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%8E%A7%E4%BB%B6%E3%80%82%E9%82%A3%E4%B9%88%E6%9C%80%E5%A5%BD%E7%9A%84%E6%96%B9%E5%BC%8F%E5%8E%BB%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E6%8E%A7%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F" target="_blank" rel="noopener">http://my.oschina.net/wangjunhe/blog/99764创建新的控件：作为一个有创意的开发者，你经常会遇到安卓原生控件无法满足你的需求。为了优化你的界面和工作流程，安卓允许你去继承已经存在的控件或者实现你自己的控件。那么最好的方式去创建一个新的控件是什么？</a> 这主…阅读全文</p><a id="more"></a><p><strong>原帖地址：<a href="http://my.oschina.net/wangjunhe/blog/99764" target="_blank" rel="noopener"><strong>http://my.oschina.net/wangjunhe/blog/99764</strong></a></strong></p><p><strong>创建新的控件：</strong></p><p>作为一个有创意的开发者，你经常会遇到安卓原生控件无法满足你的需求。</p><p>为了优化你的界面和工作流程，安卓允许你去继承已经存在的控件或者实现你自己的控件。</p><p></p><p><strong>那么最好的方式去创建一个新的控件是什么？</strong>  这主要取决你想要完成什么。</p><p>1.有些基本功能原生控件都能提供，所以这个时候你只需要<strong>继承并对控件进行扩展</strong>。通过重写它的事件，onDraw,但是始终都保持都父类方法的调用。</p><p>2.组合控件 就是通过合并几个控件的功能来生成一个控件。</p><p>3.完完整整创建一个新的控件。</p><p><strong>1.修改存在的控件</strong></p><p>例子：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTextView</span> <span class="keyword">extends</span> <span class="title">TextView</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTextView</span><span class="params">(Context context, AttributeSet ats, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, ats, defStyle);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTextView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTextView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在画布上画文本之下的内容</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 保证默认的文本渲染</span></span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 在画布上画文本之上的内容</span></span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent keyEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 写自己的控制</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 保持父类默认的控制</span></span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onKeyDown</span><span class="params">(keyCode, keyEvent)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.组合控件</strong></p><p><strong>1.最简单的方式，是定义了XML布局文件，然后用include实现重用。（。。。这也算啊。。。）</strong></p><p><strong>2.去合并一个控件 通常你自定义的控件需要继承一个ViewGroup（通常就是Layout），就像：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyCompoundView</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</span><br><span class="line">    public <span class="type">MyCompoundView</span>(<span class="type">Context</span> context) &#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public <span class="type">MyCompoundView</span>(<span class="type">Context</span> context, <span class="type">AttributeSet</span> attrs) &#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像activity，比较好的设计一个混合的控件UI布局是使用一个外部的layout资源。</p><p>这里我们模拟定义一个：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=”<span class="number">1.0</span>” encoding=”utf<span class="number">-8</span>”<span class="meta">?&gt;</span></span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">”http://schemas.android.com/apk/res/android”</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">android:orientation</span>=<span class="string">”vertical”</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">”match_parent”</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">”wrap_content”</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:id</span>=<span class="string">”@+id/editText”</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_width</span>=<span class="string">”match_parent”</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_height</span>=<span class="string">”wrap_content”</span> </span></span><br><span class="line"><span class="tag">  /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:id</span>=<span class="string">”@+id/clearButton”</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_width</span>=<span class="string">”match_parent”</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_height</span>=<span class="string">”wrap_content”</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">android:text</span>=<span class="string">”Clear”</span> </span></span><br><span class="line"><span class="tag">  /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>** <strong>然后在构造函数初始化的时候：</strong>**</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ClearableEditText</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="type">EditText</span> editText;</span><br><span class="line">    <span class="type">Button</span> clearButton;</span><br><span class="line"> </span><br><span class="line">    public <span class="type">ClearableEditText</span>(<span class="type">Context</span> context) &#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Inflate the view from the layout resource.</span></span><br><span class="line">        <span class="type">String</span> infService = <span class="type">Context</span>.<span class="type">LAYOUT_INFLATER_SERVICE</span>;</span><br><span class="line">        <span class="type">LayoutInflater</span> li;</span><br><span class="line"> </span><br><span class="line">        li = (<span class="type">LayoutInflater</span>) getContext().getSystemService(infService);</span><br><span class="line">                <span class="comment">/*这句很关键，解析反射资源文件，然后将布局附加到当前的控件，也就是this*/</span></span><br><span class="line">        li.inflate(<span class="type">R</span>.layout.clearable_edit_text, <span class="keyword">this</span>, <span class="literal">true</span>); </span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* 因为反射成功后的布局已经附加上了，那么直接可以findViewById*/</span></span><br><span class="line">        editText = (<span class="type">EditText</span>) findViewById(<span class="type">R</span>.id.editText); </span><br><span class="line">        clearButton = (<span class="type">Button</span>) findViewById(<span class="type">R</span>.id.clearButton);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 下面自定义的方法就是为控件注册监听，不解释了</span></span><br><span class="line">        hookupButton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用：在activity_main.xml</strong></p><p></p><h3 id="comexamplecustomviewmycompoundview-androidlayout_widthmatch_parent-androidlayout_heightwrap_content"><a class="markdownIt-Anchor" href="#comexamplecustomviewmycompoundview-androidlayout_widthmatch_parent-androidlayout_heightwrap_content"></a> &lt;com.example.customview.MyCompoundView android:layout_width=“match_parent” android:layout_height=“wrap_content” /&gt;</h3><h3 id="3-完完全全自定义控件"><a class="markdownIt-Anchor" href="#3-完完全全自定义控件"></a> 3. 完完全全自定义控件</h3><p>通常是继承View或者SurfaceView ，View类提供一个Canvas（画布）和一系列的画的方法，还有Paint（画笔）。使用它们去创建一个自定义的UI。你可以重写事件，包括屏幕接触或者按键按下等等，用来提供与用户交互。</p><p>1.如果你不需要快速重画和3D图像的效果，那么让View作为父类提供一个轻量级的解决方案。</p><p>2.如若不然，就需要使用SurfaceView作为父类，这样你就可以提供一个后台线程去画和使用OPENGL去实现你的图像。这个就相对重量级了，如果你的视图需要经常更新，然后由需要显示比较复杂的图像信息（尤其是在游戏和3D可视化），SurfaceView将是更好的选择。</p><p>在这里我们讨论前者，后者后期再讨论。</p><p><strong>一般你需要重写2个方法： <br>1.onMeasure</strong><br>什么是onMeasure?</p><p>下面转载一段文章：</p><p>View在屏幕上显示出来要先经过measure（计算）和layout（布局）. <br>1、什么时候调用onMeasure方法？  <br>当控件的父元素正要放置该控件时调用.父元素会问子控件一个问题，“你想要用多大地方啊？”，然后传入两个参数——widthMeasureSpec和heightMeasureSpec. <br>这两个参数指明控件可获得的空间以及关于这个空间描述的元数据.</p><p>更好的方法是你传递View的高度和宽度到setMeasuredDimension方法里,这样可以直接告诉父控件，需要多大地方放置子控件.</p><p>widthMeasureSpec和heightMeasureSpec这2个参数都是整形是出于效率的考虑，所以经常要做的就是对其解码=&gt;</p><ol><li>int specMode = MeasureSpec.getMode(measureSpec);</li><li>int specSize = MeasureSpec.getSize(measureSpec);</li></ol><p></p><ol><li>依据specMode的值，（MeasureSpec有3种模式分别是UNSPECIFIED, EXACTLY和AT_MOST）</li><li>如果是AT_MOST，specSize 代表的是最大可获得的空间； <br>如果是EXACTLY，specSize 代表的是精确的尺寸； <br>如果是UNSPECIFIED，对于控件尺寸来说，没有任何参考意义。 <br>2、那么这些模式和我们平时设置的layout参数fill_parent, wrap_content有什么关系呢？ <br>经过代码测试就知道，当我们设置width或height为fill_parent时，容器在布局时调用子 view的measure方法传入的模式是EXACTLY，因为子view会占据剩余容器的空间，所以它大小是确定的。 <br>而当设置为 wrap_content时，容器传进去的是AT_MOST, 表示子view的大小最多是多少，这样子view会根据这个上限来设置自己的尺寸。当子view的大小设置为精确值时，容器传入的是EXACTLY, 而MeasureSpec的UNSPECIFIED模式表示你没有指定大小。</li><li>View的onMeasure方法默认行为是当模式为UNSPECIFIED时，设置尺寸为mMinWidth(通常为0)或者背景drawable的最小尺寸，当模式为EXACTLY或者AT_MOST时，尺寸设置为传入的MeasureSpec的大小。  <br>有个观念需要纠正的是，fill_parent应该是子view会占据剩下容器的空间，而不会覆盖前面已布局好的其他view空间，当然后面布局子 view就没有空间给分配了，所以fill_parent属性对布局顺序很重要。以前所想的是把所有容器的空间都占满了，难怪google在2.2版本里 把fill_parent的名字改为match_parent. <br>在两种情况下，你必须绝对的处理这些限制。在一些情况下，它可能会返回超出这些限制的尺寸，在这种情况下，你可以让父元素选择如何对待超出的View，使用裁剪还是滚动等技术。 <br>接下来的框架代码给出了处理View测量的典型实现：</li></ol><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> measuredHeight = measureHeight(heightMeasureSpec);</span><br><span class="line">       <span class="keyword">int</span> measuredWidth = measureWidth(widthMeasureSpec);</span><br><span class="line"></span><br><span class="line">       setMeasuredDimension(measuredHeight, measuredWidth); <span class="comment">// 记住这句可不能省。</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="function"><span class="keyword">int</span> <span class="title">measureHeight</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class="line">       <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Default size if no limits are specified.</span></span><br><span class="line">       <span class="keyword">int</span> result = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (specMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">           <span class="comment">// Calculate the ideal size of your</span></span><br><span class="line">           <span class="comment">// control within this maximum size.</span></span><br><span class="line">           <span class="comment">// If your control fills the available</span></span><br><span class="line">           <span class="comment">// space return the outer bound.</span></span><br><span class="line">           result = specSize;</span><br><span class="line">       &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(specMode == MeasureSpec.EXACTLY)</span> </span>&#123;</span><br><span class="line">           <span class="comment">// If your control can fit within these bounds return that value.</span></span><br><span class="line">           result = specSize;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="function"><span class="keyword">int</span> <span class="title">measureWidth</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 代码基本类似measureHeight</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p><strong>通过</strong></p><p>**            int specMode = MeasureSpec.getMode(measureSpec); <br>            int specSize = MeasureSpec.getSize(measureSpec);**</p><p><strong>这2个值，然后计算自己想要占有的宽和高。</strong></p><p><strong>2.onDraw</strong></p><p>这个不解释了。（后期会细说canvas和paint）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 原帖地址：&lt;a href=&quot;http://my.oschina.net/wangjunhe/blog/99764%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E6%8E%A7%E4%BB%B6%EF%BC%9A%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E6%9C%89%E5%88%9B%E6%84%8F%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85%EF%BC%8C%E4%BD%A0%E7%BB%8F%E5%B8%B8%E4%BC%9A%E9%81%87%E5%88%B0%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9F%E6%8E%A7%E4%BB%B6%E6%97%A0%E6%B3%95%E6%BB%A1%E8%B6%B3%E4%BD%A0%E7%9A%84%E9%9C%80%E6%B1%82%E3%80%82%E4%B8%BA%E4%BA%86%E4%BC%98%E5%8C%96%E4%BD%A0%E7%9A%84%E7%95%8C%E9%9D%A2%E5%92%8C%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%EF%BC%8C%E5%AE%89%E5%8D%93%E5%85%81%E8%AE%B8%E4%BD%A0%E5%8E%BB%E7%BB%A7%E6%89%BF%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%E7%9A%84%E6%8E%A7%E4%BB%B6%E6%88%96%E8%80%85%E5%AE%9E%E7%8E%B0%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%8E%A7%E4%BB%B6%E3%80%82%E9%82%A3%E4%B9%88%E6%9C%80%E5%A5%BD%E7%9A%84%E6%96%B9%E5%BC%8F%E5%8E%BB%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E6%8E%A7%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://my.oschina.net/wangjunhe/blog/99764创建新的控件：作为一个有创意的开发者，你经常会遇到安卓原生控件无法满足你的需求。为了优化你的界面和工作流程，安卓允许你去继承已经存在的控件或者实现你自己的控件。那么最好的方式去创建一个新的控件是什么？&lt;/a&gt; 这主…阅读全文&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
