<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lossingdawn.top/"/>
  <updated>2019-07-27T17:10:52.503Z</updated>
  <id>https://lossingdawn.top/</id>
  
  <author>
    <name>Ruffianjiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Restful Api设计</title>
    <link href="https://lossingdawn.top/p/zh-CN/12305.html"/>
    <id>https://lossingdawn.top/p/zh-CN/12305.html</id>
    <published>2019-07-26T13:44:00.000Z</published>
    <updated>2019-07-27T17:10:52.503Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="restful" scheme="https://lossingdawn.top/categories/restful/"/>
    
    
      <category term="restful" scheme="https://lossingdawn.top/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 终于支持 Docker！</title>
    <link href="https://lossingdawn.top/p/zh-CN/42520.html"/>
    <id>https://lossingdawn.top/p/zh-CN/42520.html</id>
    <published>2019-07-22T02:09:00.000Z</published>
    <updated>2019-07-27T17:05:34.765Z</updated>
    
    <content type="html"><![CDATA[<p>Java 8曾经与Docker无法很好地兼容性，现在问题已消失。</p><p>请注意：我在本文中使用采用GNU GPL v2许可证的OpenJDK官方docker映像。在Oracle Java SE中，这里描述的docker支持功能在更新191中引入。Oracle在2019年4月更改了Java 8更新的许可证，自Java SE 8 Update 211以来商业使用不再免费。</p><p>你是否遇到过在docker中运行的基于JVM的应用程序出现“随机”故障？或者也许是一些奇怪的死机？两者都可能是Java 8（仍广泛使用的）中糟糕的docker支持引起的。</p><p>Docker使用控制组（cgroups）来限制资源。在容器中运行应用程序时限制内存和CPU绝对是个好主意――它可以阻止应用程序占用整个可用内存及/或CPU，这会导致在同一个系统上运行的其他容器毫无反应。限制资源可提高应用程序的可靠性和稳定性。它还允许为硬件容量作好规划。在Kubernetes或DC/OS之类的编排系统上运行容器时尤为重要。</p><p><strong>问题</strong></p><p>JVM可以“看到”系统上的整个内存和可用的所有CPU核心，并确保与资源一致。它默认情况下将最大堆大小（heap size）设置为系统内存的1/4，并将某些线程池大小（比如针对GC）设置为物理核心数量。不妨举例说明。</p><p>我们将运行一个简单的应用程序，它消耗尽可能多的内存（可在该网站上找到）：</p><p><img src="https://mmbiz.qlogo.cn/mmbiz_jpg/9FiaOYU1BlzpXtUWdTElKp4aXXA6ahVARKBg3SHeB0WyqANTBoYoSjErQ69c7c8ibcNicomy2e1rADIc8Hrm0UV6Q/640?wx_fmt=jpeg" alt="img"></p><p>我们在拥有64GB内存的系统上运行，所以不妨检查默认的最大堆大小：</p><p>如上所述，它是物理内存的1/4即16GB。如果我们使用docker cgroups限制内存，会发生什么？不妨检查一下：</p><p><img src="https://mmbiz.qlogo.cn/mmbiz_jpg/9FiaOYU1BlzpXtUWdTElKp4aXXA6ahVAR3nbPC13DHD9wW9ZfqIQCAH4oXlGiaVaFZPcl4r6DverFMIPZRFoMAsg/640?wx_fmt=jpeg" alt="img"></p><p>JVM进程被杀死了。由于它是一个子进程――容器本身幸存下来，但通常当java是容器（PID 1）内的唯一进程时，容器会崩溃。</p><p>不妨深入看看系统日志：</p><p><img src="https://mmbiz.qlogo.cn/mmbiz_jpg/9FiaOYU1BlzpXtUWdTElKp4aXXA6ahVARgJXSMB4nquC6u4pvbzXZeh85GRMP8OUDY1GMSuzsfewZBaTiace3EDw/640?wx_fmt=jpeg" alt="img"></p><p><img src="https://mmbiz.qlogo.cn/mmbiz_jpg/9FiaOYU1BlzpXtUWdTElKp4aXXA6ahVARYsnlGiaMM2Tia6tSeDLo0ZFczPD2ichpOibFH0aHicoU5tjtdoXCic1TjNAw/640?wx_fmt=jpeg" alt="img"></p><p>像这样的故障调试起来可能很难――应用程序日志中没有任何内容。在AWS ECS之类的托管系统上尤其困难重重。</p><p>CPU怎么样？不妨再次检查，运行一个显示可用处理器数量的小程序：</p><p>不妨在一个cpu编号设置为1的docker容器中运行它：</p><p>不好，这个系统上的确有12个CPU。因此，即使可用处理器的数量限制为1，JVM也会尝试使用12――比如说，GC线程数量由该公式设置：</p><p>在拥有N个硬件线程（N大于8）的机器上，并行收集器使用N的固定分数作为垃圾收集器线程的数量。如果N的值很大，该分数约5/8。如果N的值低于8，使用的数字是N。</p><p>在我们的情况下：</p><p><strong>解决方案</strong></p><p>OK，我们现在意识到了这个问题。有解决方案吗？幸运的是，有！</p><p>新的Java版本（10及以上版本）已经内置了docker支持功能。但有时升级不是办法，比如说如果应用程序与新JVM不兼容就不行。</p><p>好消息：Docker支持还被向后移植到Java 8。不妨检查标记为8u212的最新openjdk映像。我们将内存限制为1G，并使用1个CPU：docker run -ti --cpus 1 -m 1G openjdk：8u212-jdk。</p><p>内存：</p><p>它是256M，正好是已分配内存的1/4。</p><p>CPU：</p><p>正如我们想要的那样。</p><p>此外，还有几个新的设置：</p><p>它们允许微调堆大小――这些设置的含义在StackOverflow的这个优秀答案中已得到了解释。请注意：他们设置的是百分比，而不是固定值。正因为如此，改变Docker内存设置不会破坏任何东西。</p><p>如果由于某种原因不想要看到新的JVM行为，可以使用-XX：-UseContainerSupport来关闭。</p><p><strong>总结</strong></p><p>为基于JVM的应用程序设置正确的堆大小极其重要。如果使用最新的Java 8版本，你可以依赖安全（但非常保守）的默认设置。不需要在docker入口点中使用任何变通办法，也不需要再将Xmx设置为固定值。</p><p>使用JVM愉快！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java 8曾经与Docker无法很好地兼容性，现在问题已消失。&lt;/p&gt;&lt;p&gt;请注意：我在本文中使用采用GNU GPL v2许可证的OpenJDK官方docker映像。在Oracle Java SE中，这里描述的docker支持功能在更新191中引入。Oracle在2019
      
    
    </summary>
    
      <category term="java" scheme="https://lossingdawn.top/categories/java/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
      <category term="docker" scheme="https://lossingdawn.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>微服务高可用方案</title>
    <link href="https://lossingdawn.top/p/zh-CN/39944.html"/>
    <id>https://lossingdawn.top/p/zh-CN/39944.html</id>
    <published>2019-07-22T00:09:00.000Z</published>
    <updated>2019-07-27T16:43:59.612Z</updated>
    
    <content type="html"><![CDATA[<p>微服务高可用方案</p><h2 id="一-微服务的高可用"><a class="markdownIt-Anchor" href="#一-微服务的高可用"></a> 一、微服务的高可用</h2><p>在注册中心、配置中心高可用方案之前，了解一下注册中心的工作原理，下面分为两个部分来解释，一是注册中心和各个微服务的注册表的获取与同步，二是注册中心如何去维护注册表。</p><h2 id="11-注册表的获取与同步"><a class="markdownIt-Anchor" href="#11-注册表的获取与同步"></a> 1.1、注册表的获取与同步</h2><p>Eureka Server和Eureka Client之间的关系，通过注册表来维护，而注册表的通过Eureka Server集中化管理，每个Client在本地进行注册表的缓存，通过周期性的任务拉取最新的注册表信息。简单的示例图如下。</p><p><img src="https://blog-lossingdawn.oss-cn-shanghai.aliyuncs.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/1.jpeg?x-oss-process=style/default_blog" alt="img"></p><p>根据上图所展示的流程，可以了解到注册中心与微服务之间的基本联系的流程：</p><p>1．服务A启动时，向Eureka Server注册自己的相关信息</p><p>2．当服务B向Eureka Server拉取最新的注册表时，就可以拿到服务A的一台机器注册信息</p><p>3．服务A的另外两台机器再去注册，服务B 30s后再次去拉取时，就会得到服务A的三台机器的注册信息</p><p>4．服务A、每30s向Eureka Server发送一次心跳信息，表明自己的注册信息还是有效的</p><p>以上是注册中心与微服务之间交互的大体流程，在具体的实践中，Eureka Server会提供多级缓存，其中的注册表的信息的获取与同步，又会有细微的差别。</p><p>1．Eureka Server的注册表直接基于纯内存，即在内存里维护了一个数据结构。</p><p>2．各个服务的注册、服务下线、服务故障，全部会在内存里维护和更新这个注册表。</p><p>3．各个服务每隔30秒拉取注册表的时候，Eureka Server就是直接提供内存里存储的有变化的注册表数据给他们就可以了。</p><p>4．同样，每隔30秒发起心跳时，也是在这个纯内存的Map数据结构里更新心跳时间。</p><p>Eureka Server的注册表是纯内存处理的，因此处理速度会很快，同时提供 readWriteCacheMap 和 readOnlyCacheMap 做缓存，保障了频繁读写不会冲突。示意图如下。</p><p><img src="https://blog-lossingdawn.oss-cn-shanghai.aliyuncs.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/2.jpeg?x-oss-process=style/default_blog" alt="img"></p><p>上图介绍了Eureka Server多级缓存的工作原理：</p><p>1．当第一台服务A注册时，它的注册信息会更新到内存的注册表中，如果 readWriteCacheMap 中有相应的信息，则过期掉，如果没有则不做操作</p><p>2．当服务B去拉取注册表信息时，先找 readOnlyCacheMap ，没有再找 readWriteCacheMap ，再没有就去内存的注册表查找注册信息，查到就更新到 readWriteCacheMap 中，返回给服务B，服务B的注册表中，就会有一台服务A的机器注册信息</p><p>3．readOnlyCacheMap 和 readWriteCacheMap 之间的同步是有一个后台的定时任务，每隔30s去同步一次，缓存同步任务</p><p>4．第二台服务A注册时，更新内存的注册表，同时把 readWriteCacheMap 过期掉</p><p>5．在缓存同步任务执行之前服务B去拉取注册表时，都是从 readOnlyCacheMap 中拿到数据，新的注册表的信息，不会被服务B拿到</p><p>6．30s后，缓存同步任务会同步 readWriteCacheMap 和 readOnlyCacheMap 中的数据，把readOnlyCacheMap 中的注册表过期掉，这时服务B就会找 readWriteCacheMap 拿数据，readWriteCacheMap 从内存中拿到数据后缓存，返回给服务B，服务B的注册表中，就会有两台服务A的机器注册信息</p><p>7．在下一个30s，缓存同步任务把 readWriteCacheMap 同步到 readOnlyCacheMap 之前， readOnlyCacheMap 没有第二台服务A的注册缓存，因此都是从 readWriteCacheMap 中取到最新数据</p><p>注：</p><p>readOnlyCacheMap 缓存更新的定时器时间间隔，默认为30秒</p><p>readWriteCacheMap 缓存过期时间，默认为 180 秒</p><p>由以上流程说明可知，Eureka Server采取了多级缓存策略，同时最新的注册表生效有30s的时延。多级缓存机制的优点是什么：</p><p>1．尽可能保证了内存注册表数据不会出现频繁的读写冲突问题。</p><p>2．并且进一步保证对Eureka Server的大量请求，都是快速从纯内存走，性能极高。</p><h2 id="12-注册中心维护微服务的注册表"><a class="markdownIt-Anchor" href="#12-注册中心维护微服务的注册表"></a> 1.2、注册中心维护微服务的注册表</h2><p>Eureka Client与注册表相关的行为如下所示：</p><p>1．服务注册(Registry)——初始化时执行一次，向服务端注册自己服务实例节点信息包括ip、端口、实例名等，基于POST请求。</p><p>2．服务续约(renew)——默认每隔30s向服务端PUT一次，保证当前服务节点状态信息实时更新，不被服务端失效剔除。</p><p>3．更新已经注册服务列表(fetchRegistry)——默认每隔30s从服务端GET一次增量版本信息，然后和本地比较并合并，保证本地能获取到其他节点最新注册信息。</p><p>4．服务下线(cancel)——在服务shutdown的时候，需要及时通知服务端把自己剔除，以避免客户端调用已经下线的服务。</p><p>Eureka Client是通过Jersey Client基于Http协议与Eureka Server交互来注册服务、续约服务、取消服务、服务查询等。同时，Server端还会维护一份服务实例清单，并每隔90s对未续约的实例进行失效剔除。</p><p>Eureka Server有一个自我保护机制，当网络发生故障时，客户端与服务端不通，这是需要启动Eureka Server的自我保护机制，这样不会剔除服务，当网络恢复时，退出自我保护。自我保护有两个参数，最后一分钟收到的心跳数（Renews (last min)）、期望收到的心跳数（Renews threshold），当Renews threshold &gt; Renews (last min) 时，进入自我保护模式。</p><p>Renews (last min) = 实例数 * 2 #实例数算上Eureka Server自注册服务</p><p>Renews threshold = Renews (last min) * 0.85 # 0.85可配置</p><p>下图的注册中有10个实例：</p><p><img src="https://blog-lossingdawn.oss-cn-shanghai.aliyuncs.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/3.jpeg?x-oss-process=style/default_blog" alt="img"></p><p>推荐多个Eureka Server部署时，开启自我保护</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.client.register-with-eureka = true</span><br></pre></td></tr></table></figure><h2 id="13-分布式注册中心"><a class="markdownIt-Anchor" href="#13-分布式注册中心"></a> 1.3、分布式注册中心</h2><p>了解了注册中心的工作原理，下面开始研究分布式服务，多注册中心、多服务实例的情况。</p><p>当微服务仅向一台注册中心注册时，当这个注册中心发生故障时，新服务无法继续注册上去，旧服务的注册信息，缓存在其他注册中心和客户端中，依旧可以使用，当重启之后，无法向注册中心注册，也是无法使用的。</p><p>因此构建高可用的注册中心时，需要交叉注册，每个注册中心既当服务端，又当客户端，向其他注册中心注册自己，同时微服务需要向每个注册中心进行注册，由注册中心自己过滤互备，防止单个注册中心故障而导致只往它上面注册微服务重启后不可用。示意图如下所示。</p><p><img src="https://blog-lossingdawn.oss-cn-shanghai.aliyuncs.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/4.jpeg?x-oss-process=style/default_blog" alt="img"></p><p>目前注册中心与配置中心集中在一起，可拆可不拆，对整体影响不大，拆分是为了注册中心和配置中心相互间不影响。gitlab部署在某一台机器上，所有config共用，由于gitlab的原因，导致config的分布式存在单点故障的隐患。每个config分别用独立的gitlab，又给运维带来极大的不便。后期采用apollo，用数据库存储配置，利用数据库的分布式优势替代gitlab，来解决单点故障的问题。</p><h2 id="14-注册中心压测"><a class="markdownIt-Anchor" href="#14-注册中心压测"></a> 1.4、注册中心压测</h2><p>根据压测调研，8核4G的Eureka Server在处理1000个服务实例时，没有任何压力，在默认情况下，可以处理7000个实例，超出的会超时报错，在修改tomcat的配置之后，最多可以承载8000实例，此时CPU基本满载。</p><p>升级注意事项：</p><p>1、Eureka Server之间相互注册，Eureka Client需要在每个Server上都注册一边</p><p>2、Eureka Server开启自我保护</p><p>3、Eureka Client的实例数不超过1000个</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考：</h2><p>[1] <a href="https://www.jianshu.com/p/ae4f0c8b8135" target="_blank" rel="noopener">https://www.jianshu.com/p/ae4f0c8b8135</a></p><p>[2] <a href="https://www.cnblogs.com/xishuai/p/spring-cloud-eureka-safe.html" target="_blank" rel="noopener">https://www.cnblogs.com/xishuai/p/spring-cloud-eureka-safe.html</a></p><p>[3] <a href="http://springcloud.cn/view/31" target="_blank" rel="noopener">http://springcloud.cn/view/31</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微服务高可用方案&lt;/p&gt;&lt;h2 id=&quot;一-微服务的高可用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-微服务的高可用&quot;&gt;&lt;/a&gt; 一、微服务的高可用&lt;/h2&gt;&lt;p&gt;在注册中心、配置中心高可用方案之前，了解一下注册中心的工作原理，下面分为两
      
    
    </summary>
    
      <category term="spring cloud" scheme="https://lossingdawn.top/categories/spring-cloud/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
      <category term="spring cloud" scheme="https://lossingdawn.top/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>Eureka注册中心账户登陆</title>
    <link href="https://lossingdawn.top/p/zh-CN/34700.html"/>
    <id>https://lossingdawn.top/p/zh-CN/34700.html</id>
    <published>2019-06-15T14:09:00.000Z</published>
    <updated>2019-07-27T17:04:24.340Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="spring cloud" scheme="https://lossingdawn.top/categories/spring-cloud/"/>
    
    
      <category term="spring cloud" scheme="https://lossingdawn.top/tags/spring-cloud/"/>
    
      <category term="eureka" scheme="https://lossingdawn.top/tags/eureka/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7.3 安装Python3</title>
    <link href="https://lossingdawn.top/p/zh-CN/12168.html"/>
    <id>https://lossingdawn.top/p/zh-CN/12168.html</id>
    <published>2019-05-21T06:19:00.000Z</published>
    <updated>2019-07-27T17:04:00.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-排查"><a class="markdownIt-Anchor" href="#1-排查"></a> 1、排查</h3><p>CentOS 7.3 默认安装的是python2，使用命令 python -V 可以看到 python 的版本</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Python</span> 2<span class="selector-class">.7</span><span class="selector-class">.5</span></span><br></pre></td></tr></table></figure><p>然后使用命令 which python 查看一下Python可执行文件的位置<br><img src="https://img2018.cnblogs.com/blog/670989/201905/670989-20190521164747683-835556990.png" alt=""></p><p>可见执行文件在 /usr/bin/ 目录下，切换到该目录下执行 ll python/* 命令查看 <br><img src="https://img2018.cnblogs.com/blog/670989/201905/670989-20190521164804189-1266289982.png" alt=""></p><p>可见 python 和 python2 都指向了 python2.7，因此执行 python 程序可用 python 和 python2。</p><p>我们在 yum 仓库搜索 python 相关的包，发现没有 python3 相关的</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="built_in">search</span> <span class="keyword">python</span></span><br><span class="line">yum <span class="built_in">search</span> <span class="keyword">python3</span></span><br></pre></td></tr></table></figure><p>因此，我们使用编译的形式安装 python3，并使用软链在 /usr/bin/ 下建立 python3 。</p><h3 id="2-安装"><a class="markdownIt-Anchor" href="#2-安装"></a> 2、安装</h3><p>没有 python 的可用 yum install python 来安装</p><p>安装相关依赖</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install </span>zlib-devel <span class="keyword">bzip2-devel </span>openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make</span><br></pre></td></tr></table></figure><p>下载 python3 的包，在任意目录。没有wget的，yum安装一下，再下载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>www.python.org<span class="regexp">/ftp/</span>python<span class="regexp">/3.6.2/</span>Python-<span class="number">3.6</span>.<span class="number">2</span>.tar.xz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-xvJf</span>  <span class="selector-tag">Python-3</span><span class="selector-class">.6</span><span class="selector-class">.2</span><span class="selector-class">.tar</span><span class="selector-class">.xz</span></span><br></pre></td></tr></table></figure><p>切换进入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cd</span> <span class="selector-tag">Python-3</span><span class="selector-class">.6</span><span class="selector-class">.2</span></span><br></pre></td></tr></table></figure><p>编译安装</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure prefix=/usr/<span class="keyword">local</span>/python3</span><br><span class="line"><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install</span><br></pre></td></tr></table></figure><p>安装完毕，/usr/local/ 目录下就会有 python3了<br><img src="https://img2018.cnblogs.com/blog/670989/201905/670989-20190521164824241-932419417.png" alt=""><br>因此我们可以添加软链到执行目录下/usr/bin</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s <span class="regexp">/usr/</span>local<span class="regexp">/python3/</span>bin<span class="regexp">/python3 /u</span>sr<span class="regexp">/bin/</span>python3</span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/670989/201905/670989-20190521164837050-1742035920.png" alt=""></p><p>查看 python 的版本</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> -V</span><br><span class="line">python2 -V</span><br><span class="line"><span class="keyword">python3</span> -V</span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/670989/201905/670989-20190521164852467-160857733.png" alt=""></p><p>需要 python 即是 python3 的，可以参考最后的参考链接。建软链不同，和需要修改 yum 的配置（不建议去修改 python 的默认版本，建议用 python3 来代替，因为有些软件默认是 python2 的，可能会引起意外的事故）</p><p>参考：<br><a href="https://www.cnblogs.com/JahanGu/p/7452527.html" target="_blank" rel="noopener">https://www.cnblogs.com/JahanGu/p/7452527.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-排查&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-排查&quot;&gt;&lt;/a&gt; 1、排查&lt;/h3&gt;&lt;p&gt;CentOS 7.3 默认安装的是python2，使用命令 python -V 可以看到 python 的版本&lt;/p&gt;&lt;figure 
      
    
    </summary>
    
      <category term="linux" scheme="https://lossingdawn.top/categories/linux/"/>
    
    
      <category term="linux" scheme="https://lossingdawn.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>找到Linux中当前java的安装位置</title>
    <link href="https://lossingdawn.top/p/zh-CN/58622.html"/>
    <id>https://lossingdawn.top/p/zh-CN/58622.html</id>
    <published>2019-05-13T05:49:00.000Z</published>
    <updated>2019-07-27T17:07:13.680Z</updated>
    
    <content type="html"><![CDATA[<p>先看java -version</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$java</span> version <span class="string">"1.8.0_111"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_111-b14)</span><br><span class="line">Java HotSpot(TM) 64-Bit<span class="built_in"> Server </span>VM (build 25.111-b14, mixed mode)</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure><p>不一定有，如果没有，那就要找一下 先</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">which</span> java</span></span><br><span class="line">/usr/bin/java</span><br></pre></td></tr></table></figure><p>再找到/usr/bin/java的超链接位置发现还是超链接</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ls -lrt <span class="regexp">/usr/</span>bin/java</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">22</span> Jul <span class="number">27</span> <span class="number">11</span>:<span class="number">43</span> <span class="regexp">/usr/</span>bin<span class="regexp">/java -&gt; /</span>etc<span class="regexp">/alternatives/</span>java</span><br></pre></td></tr></table></figure><p>再来一次，发现最终位置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ls -lrt <span class="regexp">/etc/</span>alternatives/java</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">35</span> Jul <span class="number">27</span> <span class="number">11</span>:<span class="number">43</span> <span class="regexp">/etc/</span>alternatives<span class="regexp">/java -&gt; /</span>usr<span class="regexp">/java/</span>jdk1<span class="number">.8</span><span class="number">.0</span>_111<span class="regexp">/jre/</span>bin/java</span><br></pre></td></tr></table></figure><p>最后的这个jdk位置就是目前用的java的jdk位置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>java<span class="regexp">/jdk1.8.0_111/</span>（这个是我的，你用你自己的）</span><br></pre></td></tr></table></figure><p>在.bashrc里面<br>加上一句<br>export JAVA_HOME=你的java安装路径</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先看java -version&lt;/p&gt;&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line
      
    
    </summary>
    
      <category term="linux" scheme="https://lossingdawn.top/categories/linux/"/>
    
    
      <category term="linux" scheme="https://lossingdawn.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Poi解析excel文件报错</title>
    <link href="https://lossingdawn.top/p/zh-CN/63371.html"/>
    <id>https://lossingdawn.top/p/zh-CN/63371.html</id>
    <published>2019-04-03T08:05:00.000Z</published>
    <updated>2019-07-27T17:06:10.071Z</updated>
    
    <content type="html"><![CDATA[<p>getFileMagic() only operates on streams which support mark(int)</p><p>使用 bis 解决</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BufferedInputStream bis = <span class="keyword">new</span> <span class="type">BufferedInputStream</span>(<span class="keyword">new</span> <span class="type">FileInputStream</span>(<span class="keyword">new</span> <span class="type">File</span>(path)));</span><br><span class="line">        XSSFWorkbook xssfWorkbook = <span class="keyword">new</span> <span class="type">XSSFWorkbook</span>(bis);</span><br></pre></td></tr></table></figure><p>找不到类，一般是版本问题，可以把版本调整一致，3.15<br>java.lang.reflect.InvocationTargetException<br>org.apache.poi.POIXMLException: java.lang.reflect.InvocationTargetException</p><p>Java.lang.NoClassDefFoundError :org/openxmlformats/schemas/spreadsheetml/x2006/main/ctextensionlist</p><p>pom配置，版本保持一致，3.15</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-scratchpad<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml-schemas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;getFileMagic() only operates on streams which support mark(int)&lt;/p&gt;&lt;p&gt;使用 bis 解决&lt;/p&gt;&lt;figure class=&quot;highlight haxe&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
      <category term="java" scheme="https://lossingdawn.top/categories/java/"/>
    
    
      <category term="java, poi" scheme="https://lossingdawn.top/tags/java-poi/"/>
    
  </entry>
  
  <entry>
    <title>理解 Spring 定时任务的 fixedRate 和 fixedDelay 的区别</title>
    <link href="https://lossingdawn.top/p/zh-CN/50457.html"/>
    <id>https://lossingdawn.top/p/zh-CN/50457.html</id>
    <published>2019-01-24T05:32:00.000Z</published>
    <updated>2019-07-27T17:07:19.909Z</updated>
    
    <content type="html"><![CDATA[<p>用过 Spring 的 @EnableScheduling 的都知道，有三种方式，即 @Scheduled 注解的 fixedRate(fixedRateString), fixedDelay(fixedDelayString), 以及 cron<br>这里讨论 fixedRate 和 fixedDelay 参数</p><p>fixedRate 是有一个时刻表的概念，在任务启动时，T1、T2、T3就已经排好了执行的时刻，比如1分、2分、3分，当T1的执行时间大于1分钟时，就会造成T2晚点，当T1执行完时T2立即执行，</p><p>fixedDelay 比较简单，表示上个任务结束，到下个任务开始的时间间隔。无论任务执行花费多少时间，两个任务间的间隔始终是一致的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用过 Spring 的 @EnableScheduling 的都知道，有三种方式，即 @Scheduled 注解的 fixedRate(fixedRateString), fixedDelay(fixedDelayString), 以及 cron&lt;br&gt;这里讨论 fixed
      
    
    </summary>
    
      <category term="java" scheme="https://lossingdawn.top/categories/java/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
      <category term="spring" scheme="https://lossingdawn.top/tags/spring/"/>
    
      <category term="Scheduled" scheme="https://lossingdawn.top/tags/Scheduled/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题库(长期)</title>
    <link href="https://lossingdawn.top/p/zh-CN/12531.html"/>
    <id>https://lossingdawn.top/p/zh-CN/12531.html</id>
    <published>2018-11-30T01:37:00.000Z</published>
    <updated>2019-07-27T17:05:50.383Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容来自互联网各种面试实例，以及自己的面试经历，主要是中级开发的面试题</p><p>初中级java面试主要分为几个部分：</p><p>0、序<br>1、<a href="">java基础</a><br>2、 <a href="">java多线程</a><br>3、 <a href="">jvm知识</a><br>4、 <a href="">spring等框架知识</a><br>5、 <a href="">常用实践，如session同步</a><br>6、 <a href="">其他知识，例如tomcat</a><br>7、 <a href="">笔试算法</a></p><h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>首先，外貌要干净整洁，这个是必须的。其次守时，既不能晚点也不能早到，最好在约定时间的前十分钟<br>面试主要分为几个部分，首先是java基础，这类占比</p><p>较少<br>；其次是对java及spring框架的的深入理解，如多线程，ioc，apo，spring bean的生命周期，这类占比</p><p>较重<br>；再往后就是常用的工具的理解，如jvm的常用配置，年轻代老年代，gc，tomcat等容器怎么处理请求，这类问题占比</p><p>适中<br>；最后就是一些广度的问题(实际的经验)，对自己项目的理解，用到了那些工具，遇到了哪些问题,解决的方法<br>最后，一定要做一些面试的准备，刷面试题、练习面试，建议至少提前一个月做准备，机会是留给有准备的人的</p><h2 id="1-java基础"><a class="markdownIt-Anchor" href="#1-java基础"></a> 1、java基础</h2><p><strong>1.1、List、Set、Map的异同</strong><br><strong>List(列表)</strong></p><p>List<br>的元素以线性方式存储，可以存放重复对象，List主要有以下两个实现类：</p><dl><dt>ArrayList</dt><dd>长度可变的数组，可以对元素进行随机的访问，向ArrayList中插入与删除元素的速度慢。 JDK8 中ArrayList扩容的实现是通过grow()方法里使用语句newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1)（即1.5倍扩容）计算容量，然后调用Arrays.copyof()方法进行对原数组进行复制。</dd><dt>LinkedList</dt><dd>采用链表数据结构，插入和删除速度快，但访问速度慢。</dd></dl><p><strong>Set(集合)</strong></p><p>Set<br>中的对象不按特定(HashCode)的方式排序，并且没有重复对象，Set主要有以下两个实现类：</p><p>HashSet<br>： HashSet按照哈希算法来存取集合中的对象，存取速度比较快。当HashSet中的元素个数超过数组大小/*loadFactor（默认值为0.75）时，就会进行近似两倍扩容（newCapacity = (oldCapacity &lt;&lt; 1) + 1）。</p><p>TreeSet<br>：TreeSet实现了SortedSet接口，能够对集合中的对象进行排序。</p><p><strong>Map(映射)</strong></p><p>Map<br>是一种把键对象和值对象映射的集合，它的每一个元素都包含一个键对象和值对象。 Map主要有以下两个实现类：</p><p>HashMap<br>：HashMap基于散列表实现，其插入和查询&lt;K,V&gt;的开销是固定的，可以通过构造器设置容量和负载因子来调整容器的性能。<br>LinkedHashMap：类似于HashMap，但是迭代遍历它时，取得&lt;K,V&gt;的顺序是其插入次序，或者是最近最少使用(LRU)的次序。</p><p>TreeMap<br>：TreeMap基于红黑树实现。查看&lt;K,V&gt;时，它们会被排序。TreeMap是唯一的带有subMap()方法的Map，subMap()可以返回一个子树。<br>比较 List Set Map 继承接口 Collection Collection 常见实现类 AbstractList(其常用子类有ArrayList、LinkedList、Vector) AbstractSet(其常用子类有HashSet、LinkedHashSet、TreeSet) HashMap、HashTable 常见方法 add( )、remove( )、clear( )、get( )、contains( )、size( ) add( )、remove( )、clear( )、contains( )、size( ) put( )、get()、remove( )、clear( )、containsKey( )、containsValue( )、keySet( )、values( )、size( ) 元素 可重复 不可重复(用<br>equals()判断) 不可重复 顺序 有序 无序(实际上由HashCode决定) 线程安全 Vector线程安全 Hashtable线程安全</p><p><strong>1.2、String、StringBuffer、StringBuilder的使用</strong></p><p><strong>1.3、HashMap、TreeMap、LinkedHashMap的特点</strong></p><p><strong>1.4、HashMap内部结构、算法</strong><br><strong>底层实现</strong>：HashMap底层整体结构是一个数组，数组中的每个元素又是一个链表。每次添加一个对象（put）时会产生一个链表对象（Object类型），Map中的每个Entry就是数组中的一个元素（Map.Entry就是一个&lt;Key,Value&gt;），它具有由当前元素指向下一个元素的引用，这就构成了链表。<br><strong>存储原理</strong>：当向HsahMap中添加元素的时候，先根据HashCode重新计算Key的Hash值，得到数组下标，如果数组该位置已经存在其他元素，那么这个位置的元素将会以链表的形式存放，新加入的放在链头，最先加入的放在链尾，如果数组该位置元素不存在，那么就直接将该元素放到此数组中的该位置。<br><strong>去重原理</strong>：不同的Key算到数组下标相同的几率很小，新建一个&lt;K,V&gt;放入到HashMap的时候，首先会计算Key的数组下标，如果数组该位置已经存在其他元素，则比较两个Key，若相同则覆盖写入，若不同则形成链表。<br><strong>读取原理</strong>：从HashMap中读取（get）元素时，首先计算Key的HashCode，找到数组下标，然后在对应位置的链表中找到需要的元素。<br><strong>扩容机制</strong>：当HashMap中的元素个数超过数组大小/*loadFactor（默认值为0.75）时，就会进行2倍扩容（oldThr &lt;&lt; 1）。</p><p><strong>1.5、concurrent包下面有那几大类</strong><br>atomic<br>locks<br>Executor<br>Queue<br>Dueue<br>ConcurrentXX<br>Scheduled<br>Callable<br>Future</p><h2 id="2-java多线程"><a class="markdownIt-Anchor" href="#2-java多线程"></a> 2、java多线程</h2><p><strong>2.1、lock和synchronized</strong></p><p>synchronized是java中的一个关键字，也就是说是Java语言内置的特性。那么为什么会出现Lock呢？</p><p>在上面一篇文章中，我们了解到如果一个代码块被synchronized修饰了，当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待，等待获取锁的线程释放锁，而这里获取锁的线程释放锁只会有两种情况：</p><p>1）获取锁的线程执行完了该代码块，然后线程释放对锁的占有；</p><p>2）线程执行发生异常，此时JVM会让线程自动释放锁。</p><p>那么如果这个获取锁的线程由于要等待IO或者其他原因（比如调用sleep方法）被阻塞了，但是又没有释放锁，其他线程便只能干巴巴地等待，试想一下，这多么影响程序执行效率。</p><p>因此就需要有一种机制可以不让等待的线程一直无期限地等待下去（比如只等待一定的时间或者能够响应中断），通过Lock就可以办到。</p><p>再举个例子：当有多个线程读写文件时，读操作和写操作会发生冲突现象，写操作和写操作会发生冲突现象，但是读操作和读操作不会发生冲突现象。</p><p>但是采用synchronized关键字来实现同步的话，就会导致一个问题：</p><p>如果多个线程都只是进行读操作，所以当一个线程在进行读操作时，其他线程只能等待无法进行读操作。</p><p>因此就需要一种机制来使得多个线程都只是进行读操作时，线程之间不会发生冲突，通过Lock就可以办到。</p><p>另外，通过Lock可以知道线程有没有成功获取到锁。这个是synchronized无法办到的。</p><p>总结一下，也就是说Lock提供了比synchronized更多的功能。但是要注意以下几点：</p><p>1）Lock不是Java语言内置的，synchronized是Java语言的关键字，因此是内置特性。Lock是一个类，通过这个类可以实现同步访问；</p><p>2）Lock和synchronized有一点非常大的不同，采用synchronized不需要用户去手动释放锁，当synchronized方法或者synchronized代码块执行完之后，系统会自动让线程释放对锁的占用；而Lock则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象。</p><p>Lock是一个接口，而synchronized是关键字。<br>synchronized会自动释放锁，而Lock必须手动释放锁。<br>Lock可以让等待锁的线程响应中断，而synchronized不会，线程会一直等待下去。<br>通过Lock可以知道线程有没有拿到锁，而synchronized不能。<br>Lock能提高多个线程读操作的效率。</p><p>synchronized能锁住类、方法和代码块，而Lock是块范围内的</p><p>第一大不足：由于我们没办法设置synchronized关键字在获取锁的时候等待时间，所以synchronized可能会导致线程为了加锁而无限期地处于阻塞状态。</p><p>第二大不足：使用synchronized关键字等同于使用了互斥锁，即其他线程都无法获得锁对象的访问权。这种策略对于读多写少的应用而言是很不利的，因为即使多个读者看似可以并发运行，但他们实际上还是串行的，并将最终导致并发性能的下降。</p><p>虽然synchronized已经作为一个关键字被固化在Java语言中了，但它只提供了一种相当保守的线程安全策略，且该策略开放给程序员的控制能力极弱。</p><p><strong>2.2、单机上一个线程池正在处理服务，如果忽然断电了怎么办（正在处理和阻塞队列里的请求怎么处理）？</strong></p><p><strong>2.3、为什么要使用线程池？</strong></p><p>在Java中，如果每当一个请求到达就创建一个新线程，开销是相当大的。在实际使用中，每个请求创建新线程的服务器在创建和销毁线程上花费的时间和消耗的系统资源，甚至可能要比花在处理实际的用户请求的时间和资源要多得多。除了创建和销毁线程的开销之外，活动的线程也需要消耗系统资源。如果在一个JVM里创建太多的线程，可能会导致系统由于过度消耗内存或“切换过度”而导致系统资源不足。为了防止资源不足，服务器应用程序需要一些办法来限制任何给定时刻处理的请求数目，尽可能减少创建和销毁线程的次数，特别是一些资源耗费比较大的线程的创建和销毁，尽量利用已有对象来进行服务，这就是“池化资源”技术产生的原因。</p><p><strong>2.4、线程池有什么作用？</strong></p><p>线程池主要用来解决线程生命周期开销问题和资源不足问题。通过对多个任务重用线程，线程创建的开销就被分摊到了多个任务上了，而且由于在请求到达时线程已经存在，所以消除了线程创建所带来的延迟。这样，就可以立即为请求服务，使应用程序响应更快。另外，通过适当地调整线程池中的线程数目可以防止出现资源不足的情况。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.使用<span class="keyword">new</span> <span class="keyword">Thread</span>()创建线程的弊端：  </span><br><span class="line">每次通过<span class="keyword">new</span> <span class="keyword">Thread</span>()创建对象性能不佳。  </span><br><span class="line">线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或oom。  </span><br><span class="line">缺乏更多功能，如定时执行、定期执行、线程中断。  </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.使用Java线程池的好处：</span><br><span class="line">重用存在的线程，减少对象创建、消亡的开销，提升性能。  </span><br><span class="line">可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。  </span><br><span class="line">提供定时执行、定期执行、单线程、并发数控制等功能。</span><br></pre></td></tr></table></figure><p><strong>2.5、说说几种常见的线程池及使用场景。</strong><br>场景：<br>单个任务处理时间短<br>将需处理的任务数量大</p><p><strong>2.6、线程池都有哪几种工作队列？</strong><br>ArrayBlockingQueue 数组型阻塞队列<br>LinkedBlockingQueue 链表型阻塞队列<br>DelayQueue 延时队列<br>SynchronousQueue 同步队列<br>PriorityBlockingQueue 优先阻塞队列</p><p><strong>2.7、怎么理解无界队列和有界队列？</strong><br>有界队列：<br>1.初始的poolSize &lt; corePoolSize，提交的runnable任务，会直接做为new一个Thread的参数，立马执行 。</p><p>2.当提交的任务数超过了corePoolSize，会将当前的runable提交到一个block queue中,。</p><p>3.有界队列满了之后，如果poolSize &lt; maximumPoolsize时，会尝试new 一个Thread的进行救急处理，立马执行对应的runnable任务。</p><p>4.如果3中也无法处理了，就会走到第四步执行reject操作。</p><p>与有界队列相比，除非系统资源耗尽，否则无界的任务队列不存在任务入队失败的情况。当有新的任务到来，系统的线程数小于corePoolSize时，则新建线程执行任务。当达到corePoolSize后，就不会继续增加，若后续仍有新的任务加入，而没有空闲的线程资源，则任务直接进入队列等待。若任务创建和处理的速度差异很大，无界队列会保持快速增长，直到耗尽系统内存。</p><p><strong>2.8、线程池中的几种重要的参数及流程说明</strong></p><p>中止<br>：Abort策略，默认策略，新任务提交时直接抛出未检查的异常RejectedExecutionException，该异常可由调用者捕获。</p><p>抛弃<br>：Discard策略，新提交的任务被抛弃。</p><p>抛弃最旧的<br>：DiscardOldest策略，队列的是“队头”的任务，然后尝试提交新的任务。（不适合工作队列为优先队列场景）</p><p>调用者运行<br>： CallerRuns策略，为调节机制，既不抛弃任务也不抛出异常，而是将某些任务回退到调用者。不会在线程池的线程中执行新的任务，而是在调用exector的线程中运行新的任务。</p><p><strong>2.9、线程池中的几种重要的参数及流程说明</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize,</span><br><span class="line">                              <span class="keyword">int</span> maximumPoolSize,</span><br><span class="line">                              <span class="keyword">long</span> keepAliveTime,</span><br><span class="line">                              TimeUnit unit,</span><br><span class="line">                              BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                              ThreadFactory threadFactory,</span><br><span class="line">                              RejectedExecutionHandler <span class="keyword">handler</span>) &#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>corePoolSize</p><ul><li>池中所保存的线程数，包括空闲线程。需要注意的是在初创建线程池时线程不会立即启动，直到有任务提交才开始启动线程并逐渐时线程数目达到corePoolSize。若想一开始就创建所有核心线程需调用prestartAllCoreThreads方法。</li></ul><p>maximumPoolSize<br>-池中允许的最大线程数。需要注意的是当核心线程满且阻塞队列也满时才会判断当前线程数是否小于最大线程数，并决定是否创建新线程。</p><p>keepAliveTime</p><ul><li>当线程数大于核心时，多于的空闲线程最多存活时间</li></ul><p>unit</p><ul><li>keepAliveTime 参数的时间单位。</li></ul><p>workQueue</p><ul><li>当线程数目超过核心线程数时用于保存任务的队列。主要有3种类型的BlockingQueue可供选择：无界队列，有界队列和同步移交。将在下文中详细阐述。从参数中可以看到，此队列仅保存实现Runnable接口的任务。</li></ul><p>threadFactory</p><ul><li>执行程序创建新线程时使用的工厂。</li></ul><p>handler</p><ul><li>阻塞队列已满且线程数达到最大值时所采取的饱和策略。java默认提供了4种饱和策略的实现方式：中止、抛弃、抛弃最旧的、调用者运行。将在下文中详细阐述。</li></ul><p><strong>2.10、线程和cpu核心数的关系</strong></p><p>线程数=Ncpu / (1-阻塞系数)<br>IO密集型，阻塞系数接近于1<br>计算密集型，阻塞系数接近于0</p><h2 id="3-jvm知识"><a class="markdownIt-Anchor" href="#3-jvm知识"></a> 3、jvm知识</h2><p><strong>3.1、happened-before原则</strong></p><p>1.程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作</p><p>2.监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁</p><p>3.volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读</p><p>4.传递性：如果A happens-before B，且B happens-before C，那么A happens-before C</p><p>5.start规则：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的ThreadB.start()操作happens-before于线程B中的任意操作</p><p>6.join规则：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回</p><p><strong>3.2、类的加载</strong></p><p><img src="" alt="image"><br><a href="https://blog.csdn.net/wen7280/article/details/53856790" target="_blank" rel="noopener">https://blog.csdn.net/wen7280/article/details/53856790</a></p><p>类装载的条件：</p><p>Java虚拟机不会无条件的装载Class类型。</p><p>Java虚拟机规定：一个类或者接口在初次使用时，必须进行初始化。</p><p>这里的使用指的是主动使用，主动使用有以下几种情况：</p><p>当创建一个类的实例时，比如使用new关键字，或者通过反射、克隆、反序列化方式。</p><p>当调用类的静态方法时，即当使用了字节码invokestatic指令</p><p>当使用类或者接口的静态字段时（final常量除外，此种情况只会加载类而不会进行初始化），即使用getstatic或者putstatic指令（可以使用jclasslib软件查看生成的字节码文件）</p><p>当使用java.lang.reflect包中的方法反射类的方法时</p><p>当初始化子类时，必须先初始化父类</p><p>作为启动虚拟机、含有main方法的那个类</p><p>除了以上情况属于主动使用外，其他情况均属于被动使用，被动使用不会引起类的初始化，只是加载了类却没有初始化。</p><h2 id="4-spring等框架知识"><a class="markdownIt-Anchor" href="#4-spring等框架知识"></a> 4、spring等框架知识</h2><p><strong>4.1、spring mvc处理请求</strong></p><p><img src="" alt="image"></p><p>SpringMVC核心处理流程：</p><p>1、DispatcherServlet前端控制器接收发过来的请求，交给HandlerMapping处理器映射器</p><p>2、HandlerMapping处理器映射器，根据请求路径找到相应的HandlerAdapter处理器适配器（处理器适配器就是那些拦截器或Controller）</p><p>3、HandlerAdapter处理器适配器，处理一些功能请求，返回一个ModelAndView对象（包括模型数据、逻辑视图名）</p><p>4、ViewResolver视图解析器，先根据ModelAndView中设置的View解析具体视图</p><p>5、然后再将Model模型中的数据渲染到View上</p><p><strong>4.2、Springbootapplication注解的原理</strong></p><p><img src="" alt="image"></p><p><a href="http://majunwei.com/view/201708231840127244.html" target="_blank" rel="noopener">http://majunwei.com/view/201708231840127244.html</a></p><h2 id="5-常用实践session同步"><a class="markdownIt-Anchor" href="#5-常用实践session同步"></a> 5、常用实践,session同步</h2><p><strong>5.1、session同步</strong></p><p>使用redis作为session持久化存储。首先用户连接进来，把session放在本地一份，redis一份，在本地有记录的情况下使用本地缓存(设置极小的时间过期，如2s)。当用户再次连接进来，在本地记录过期，或者本地没有session的情况下，使用redis的记录，</p><p><strong>5.2、redis的简单介绍</strong></p><p><strong>5.3、缓存的使用</strong></p><h2 id="6-其他知识如tomcat"><a class="markdownIt-Anchor" href="#6-其他知识如tomcat"></a> 6、其他知识,如tomcat</h2><p><strong>6.1、tomcat如何处理请求</strong></p><p><img src="https://images2017.cnblogs.com/blog/1131840/201712/1131840-20171215142449996-360033997.jpg" alt="http://images2017.cnblogs.com/blog/1131840/201712/1131840-20171215142449996-360033997.jpg"><br>Tomcat的两个核心组件：Connector 和 Container</p><p><strong>1.Connector组件</strong></p><p>Connector组件将在某个指定的端口上侦听客户请求，接收浏览器发过来的tcp连接请求，创建一个Request和一个Response对象分别用于和其你去端交换数据，然后会产生一个线程来处理这个请求并把产生的Request和Response对象传给Engine，从Engine中获得响应并返回给客户端。</p><p>Tomcat有两个经典的Connector，一个直接侦听来自浏览器的HTTP请求，另外一个侦听来自其他的WebServer的请求。Cotote HTTP/1.1 Connector在端口8080处侦听来自客户浏览器的HTTP请求，Coyote JK2 Connector在端口8009处侦听其他WebServer的Servlet/JSP请求。 Connector 最重要的功能就是接收连接请求然后分配线程让 Container来处理这个请求，所以这必然是多线程的，多线程的处理是 Connector 设计的核心</p><p><strong>2.Container组件</strong></p><p>Container组件的体系结构如下：<br><img src="https://images2017.cnblogs.com/blog/1131840/201712/1131840-20171215142450871-601807957.jpg" alt="http://images2017.cnblogs.com/blog/1131840/201712/1131840-20171215142450871-601807957.jpg"></p><p>Container</p><p>Container是容器的父接口，该容器的设计用的是典型的责任链的设计模式，它由四个自容器组件构成，分别是Engine、Host、Context、Wrapper。这四个组件是负责关系，存在包含关系。通常一个Servlet class对应一个Wrapper，如果有多个Servlet则定义多个Wrapper，如果有多个Wrapper就要定义一个更高的Container，如Context。 Context定义在父容器 Host 中，其中Host 不是必须的，但是要运行 war 程序，就必须要 Host，因为 war 中必有 web.xml 文件，这个文件的解析就需要 Host 了，如果要有多个 Host 就要定义一个 top 容器 Engine 了。而 Engine 没有父容器了，一个 Engine 代表一个完整的 Servlet 引擎。</p><p>Engine</p><p>Engine 容器比较简单，它只定义了一些基本的关联关系 Host 容器</p><p>Host</p><p>Host 是 Engine 的字容器，一个 Host 在 Engine 中代表一个虚拟主机，这个虚拟主机的作用就是运行多个应用，它负责安装和展开这些应用，并且标识这个应用以便能够区分它们。它的子容器通常是 Context，它除了关联子容器外，还有就是保存一个主机应该有的信息。</p><p>Context</p><p>Context 代表 Servlet 的 Context，它具备了 Servlet 运行的基本环境，理论上只要有 Context 就能运行 Servlet 了。简单的 Tomcat 可以没有 Engine 和 Host。Context 最重要的功能就是管理它里面的 Servlet 实例，Servlet 实例在 Context 中是以 Wrapper 出现的，还有一点就是 Context 如何才能找到正确的 Servlet 来执行它呢？ Tomcat5 以前是通过一个 Mapper 类来管理的，Tomcat5 以后这个功能被移到了 request 中，在前面的时序图中就可以发现获取子容器都是通过 request 来分配的</p><p>Wrapper</p><p>Wrapper 代表一个 Servlet，它负责管理一个 Servlet，包括的 Servlet 的装载、初始化、执行以及资源回收。Wrapper 是最底层的容器，它没有子容器了，所以调用它的 addChild 将会报错。 Wrapper 的实现类是 StandardWrapper，StandardWrapper 还实现了拥有一个 Servlet 初始化信息的 ServletConfig，由此看出 StandardWrapper 将直接和 Servlet 的各种信息打交道。<br>说明：除了上述组件外，Tomcat中还有其他重要的组件，如安全组件security、logger日志组件、session、mbeans、naming等其他组件。这些组件共同为Connector和Container提供必要的服务。</p><p>完整请求过程如下：</p><p><img src="https://images2017.cnblogs.com/blog/1131840/201712/1131840-20171215142451699-1297214931.jpg" alt="http://images2017.cnblogs.com/blog/1131840/201712/1131840-20171215142451699-1297214931.jpg"></p><p>1.用户在浏览器中输入网址localhost:8080/test/index.jsp，请求被发送到本机端口8080，被在那里监听的Coyote HTTP/1.1 Connector获得；</p><p>2.Connector把该请求交给它所在的Service的Engine（Container）来处理，并等待Engine的回应；</p><p>3.Engine获得请求localhost/test/index.jsp，匹配所有的虚拟主机Host；</p><p>4.Engine匹配到名为localhost的Host（即使匹配不到也把请求交给该Host处理，因为该Host被定义为该Engine的默认主机），名为localhost的Host获得请求/test/index.jsp，匹配它所拥有的所有Context。Host匹配到路径为/test的Context（如果匹配不到就把该请求交给路径名为“ ”的Context去处理）；</p><p>5.path=“/test”的Context获得请求/index.jsp，在它的mapping table中寻找出对应的Servlet。Context匹配到URL Pattern为/*.jsp的Servlet，对应于JspServlet类；</p><p>6.构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用JspServlet的doGet()或doPost(),执行业务逻辑、数据存储等；</p><p>7.Context把执行完之后的HttpServletResponse对象返回给Host；</p><p>8.Host把HttpServletResponse对象返回给Engine；</p><p>9.Engine把HttpServletResponse对象返回Connector；</p><p>10.Connector把HttpServletResponse对象返回给客户Browser。</p><h2 id="7-笔试算法"><a class="markdownIt-Anchor" href="#7-笔试算法"></a> 7、笔试算法</h2><p><strong>7.1、</strong></p><p><strong>7.2、</strong></p><p><strong>7.3、</strong></p><p><strong>7.4、让您做一个电商平台，您如何设置一个在买家下订单后的”第60秒“发短信通知卖家发货，您需要考虑的是 像淘宝一样的大并发量的订单。</strong></p><p>1、具有排序功能的队列</p><p>2、Redis+定时器</p><p>3、队列，死信</p><p>参考地址：<a href="https://mp.weixin.qq.com/s/Dzv-i8n7waJVac-N7MJCvA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Dzv-i8n7waJVac-N7MJCvA</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文内容来自互联网各种面试实例，以及自己的面试经历，主要是中级开发的面试题&lt;/p&gt;&lt;p&gt;初中级java面试主要分为几个部分：&lt;/p&gt;&lt;p&gt;0、序&lt;br&gt;1、&lt;a href=&quot;&quot;&gt;java基础&lt;/a&gt;&lt;br&gt;2、 &lt;a href=&quot;&quot;&gt;java多线程&lt;/a&gt;&lt;br&gt;3、 &lt;a
      
    
    </summary>
    
      <category term="面试" scheme="https://lossingdawn.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="java, 面试" scheme="https://lossingdawn.top/tags/java-%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>RSA Premaster Secret Error 错误解决</title>
    <link href="https://lossingdawn.top/p/zh-CN/18860.html"/>
    <id>https://lossingdawn.top/p/zh-CN/18860.html</id>
    <published>2018-09-13T06:57:00.000Z</published>
    <updated>2019-07-27T17:06:17.493Z</updated>
    
    <content type="html"><![CDATA[<p>报错信息如下：<br>Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: 驱动程序无法使用安全套接字层(SSL)加密与 SQL Server 建立安全连接。错误: RSA premaster secret error。</p><p>java连接sqlserver报RSA私钥错误，在网上查询了一番基本是这两个解决方案</p><p>1、调整jdk的引用<br>2、把sunjce_provider.jar放到\jre\lib\ext下</p><p>我的问题是由于jdk的问题，gradle编译自动吧jdk换成了JavaSE，换成本地的JDK1.8，问题解决</p><p><img src="https://images2018.cnblogs.com/blog/670989/201809/670989-20180913145221230-988186623.png" alt="参考图片"></p><p><strong>问题原因</strong><br>由于</p><p>gradle<br>插件编译的问题，自动调整为java SE版本，导致引用问题，maven编译后虽然也是java SE版本，但是没有问题<br>还是要少用gradle</p><p>参考：<br><a href="https://blog.csdn.net/huang9012/article/details/6629775" target="_blank" rel="noopener">https://blog.csdn.net/huang9012/article/details/6629775</a></p><p><a href="https://social.msdn.microsoft.com/Forums/sqlserver/zh-CN/031c5b4c-0871-4f12-a163-ce547035740c/error-connecting-to-mssql-via-jdbc-through-a-window-service?forum=sqldataaccess" target="_blank" rel="noopener">https://social.msdn.microsoft.com/Forums/sqlserver/zh-CN/031c5b4c-0871-4f12-a163-ce547035740c/error-connecting-to-mssql-via-jdbc-through-a-window-service?forum=sqldataaccess</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;报错信息如下：&lt;br&gt;Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: 驱动程序无法使用安全套接字层(SSL)加密与 SQL Server 建立安全连接。错误: RSA premaster secret 
      
    
    </summary>
    
      <category term="java" scheme="https://lossingdawn.top/categories/java/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>我的众安面试经历（题库）</title>
    <link href="https://lossingdawn.top/p/zh-CN/35012.html"/>
    <id>https://lossingdawn.top/p/zh-CN/35012.html</id>
    <published>2018-09-01T03:02:00.000Z</published>
    <updated>2019-07-27T17:07:10.014Z</updated>
    
    <content type="html"><![CDATA[<p>面试众安在线<br><strong>背景</strong>：两年java，面中级开发</p><p><strong>首先</strong>，是两道编程题，笔试<br>1、斐波那契数列，f(n)=f(n-1)+f(n-2)，n足够大，获取f(n)的值<br>~<br>2、一个足够大的数组，有10E+个数字，怎么快速找到前10大的数字，时间复杂度是多少<br>~<br><strong>接着</strong>，面试官开始提问了<br>最近，华住数据泄漏事件知道吧<br>~<br>有一篇分析贴看了吧，假如你拿到了这些数据，你会从哪些方面去分析，拿到这些数据你会做什么，你有什么措施来防止这次的事件<br>~<br>加密算法，对称与非对称，<br>~<br>对于多线程的理解，多线程有什么优势<br>~<br>单核cpu如何执行多线程<br>~<br>多线程后台任务怎么保证任务完成了<br>~<br>执行时间长于执行周期的问题，例如每一秒执行一次，执行一次需要三秒<br>~<br>一个线程占用多少资源<br>~<br>支付过程加密用哪种<br>~<br>TCP/UDP的区别<br>~<br>spring的设计模式<br>~<br>IOC、AOP的理解<br>~<br>多进程与多线程的区别<br>~<br>tomcat处理请求，对于线程进程的关系<br>~<br>tomcat处理请求的生命周期<br>~<br>讲一讲你们微服务是怎么搭建的，是按什么划分的，中间有经历什么<br>~<br>暂时就想起来这么多，后面有回忆起立的再补充</p><p><strong>最后</strong>，对面试官有什么要问的？<br>微服务架构：<br>hsf框架，加少量的dubbo和spring could</p><p>考核的标准：<br>业务完成情况、难易度，价值观，对新人的帮助，组内的沟通情况等等</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;面试众安在线&lt;br&gt;&lt;strong&gt;背景&lt;/strong&gt;：两年java，面中级开发&lt;/p&gt;&lt;p&gt;&lt;strong&gt;首先&lt;/strong&gt;，是两道编程题，笔试&lt;br&gt;1、斐波那契数列，f(n)=f(n-1)+f(n-2)，n足够大，获取f(n)的值&lt;br&gt;~&lt;br&gt;2、一个足
      
    
    </summary>
    
      <category term="面试" scheme="https://lossingdawn.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
      <category term="面试" scheme="https://lossingdawn.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>图片转字符图片（三）</title>
    <link href="https://lossingdawn.top/p/zh-CN/48068.html"/>
    <id>https://lossingdawn.top/p/zh-CN/48068.html</id>
    <published>2018-08-20T17:11:00.000Z</published>
    <updated>2019-08-26T13:17:32.036Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h3><p>这个是从抖音上学来的，一开始刷抖音，遇到不少字符串跳舞的视频，因此来实践一下</p><h3 id="主要分为三个部分"><a class="markdownIt-Anchor" href="#主要分为三个部分"></a> 主要分为三个部分</h3><ol><li>静态图片转静态图片</li><li>gif转gif</li><li>视频转视频</li></ol><h3 id="视频转视频"><a class="markdownIt-Anchor" href="#视频转视频"></a> 视频转视频</h3><p>主要用到了FFmpeg这个工具，利用命令对视频文件进行操作。首先根据自己调的参数进行图片的截取（本文的是1秒10帧的参数），图片转换，然后分离音频，最后字符图片和音频合成目标视频。</p><p>FFmpeg的代码库：<br><a href="https://github.com/FFmpeg/FFmpeg" target="_blank" rel="noopener">https://github.com/FFmpeg/FFmpeg</a><br>FFmpeg下载地址：<br><a href="https://ffmpeg.org/download.html" target="_blank" rel="noopener">https://ffmpeg.org/download.html</a></p><h3 id="效果如下"><a class="markdownIt-Anchor" href="#效果如下"></a> 效果如下</h3><p>没做细致的调整，视频的转换可以调调参数</p><p><a href="https://blog-lossingdawn.oss-cn-shanghai.aliyuncs.com/img2text/123.mp4" target="_blank" rel="noopener"><img src="https://blog-lossingdawn.oss-cn-shanghai.aliyuncs.com/img2text/3-0.png?x-oss-process=style/default_blog" alt="Watch the video"></a><br><a href="https://blog-lossingdawn.oss-cn-shanghai.aliyuncs.com/img2text/1234.mp4" target="_blank" rel="noopener"><img src="https://blog-lossingdawn.oss-cn-shanghai.aliyuncs.com/img2text/3-1.png?x-oss-process=style/default_blog" alt="Watch the video"></a></p><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">videoTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String srcVideoPath = <span class="string">"F:/123/123.mp4"</span>;</span><br><span class="line">    String tarImagePath = <span class="string">"F:/123/mp/"</span>;</span><br><span class="line">    String tarAudioPath = <span class="string">"F:/123/mp/audio.aac"</span>;</span><br><span class="line">    String tarVideoPath = <span class="string">"F:/123/1234.mp4"</span>;</span><br><span class="line">    VideoUtil.readVideo(srcVideoPath,tarImagePath,tarAudioPath,tarVideoPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码如下"><a class="markdownIt-Anchor" href="#代码如下"></a> 代码如下</h3><p>主要用到的几个命令，其他按帧截图命令参考文末链接4：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 截图</span></span><br><span class="line">ffmpeg -ss <span class="number">10</span> -i input.flv -y -f image2  -vframes <span class="number">100</span> -s <span class="number">352</span>x240 b-%<span class="number">03</span>d.jpg</span><br><span class="line"><span class="comment">// 分离音频</span></span><br><span class="line">ffmpeg -i <span class="number">3.</span>mp4 -vn -y -acodec copy <span class="number">3.</span>aac</span><br><span class="line"><span class="comment">// 合成视频</span></span><br><span class="line">ffmpeg -threads2 -y -r <span class="number">10</span> -i /tmpdir/image%<span class="number">04</span>d.jpg -i audio.mp3 -absf aac_adtstoasc output.mp4</span><br></pre></td></tr></table></figure><p>环境：<br>JDK 1.8</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ffmpeg -ss 10 -i input.flv -y -f image2  -vframes 100 -s 352x240 b-%03d.jpg  </span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ffmpeg 截图，并指定图片的大小</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param srcVideoPath</span></span><br><span class="line"><span class="comment">     * @param tarImagePath</span></span><br><span class="line"><span class="comment">     *            截取后图片路径</span></span><br><span class="line"><span class="comment">     * @param width</span></span><br><span class="line"><span class="comment">     *            截图的宽</span></span><br><span class="line"><span class="comment">     * @param hight</span></span><br><span class="line"><span class="comment">     *            截图的高</span></span><br><span class="line"><span class="comment">     * @param offsetValue</span></span><br><span class="line"><span class="comment">     *            表示相对于文件开始处的时间偏移值 可以是分秒</span></span><br><span class="line"><span class="comment">     * @param vframes</span></span><br><span class="line"><span class="comment">     *            表示截图的桢数</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">boolean</span> processFfmpegImage(<span class="keyword">String</span> srcVideoPath, <span class="keyword">String</span> tarImagePath, <span class="built_in">int</span> <span class="built_in">width</span>, <span class="built_in">int</span> hight,</span><br><span class="line">            <span class="built_in">float</span> offsetValue, <span class="built_in">float</span> vframes) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!checkfile(srcVideoPath)) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"【"</span> + srcVideoPath + <span class="string">"】  不存在 !"</span>);</span><br><span class="line">            <span class="comment">// logger.error("【" + srcVideoPath + "】 不存在 !");</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;<span class="keyword">String</span>&gt; commend = <span class="keyword">new</span> java.util.ArrayList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(ffmpegPath);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-i"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(srcVideoPath);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-y"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-f"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"image2"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-ss"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(offsetValue + <span class="string">""</span>); <span class="comment">// 在视频的某个插入时间截图，例子为5秒后</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// commend.add("-vframes");</span></span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-t"</span>);<span class="comment">// 添加参数＂-t＂，该参数指定持续时间</span></span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(vframes + <span class="string">""</span>); <span class="comment">// 截图的桢数,添加持续时间为1毫秒</span></span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-s"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="built_in">width</span> + <span class="string">"x"</span> + hight); <span class="comment">// 截图的的大小</span></span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(tarImagePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ProcessBuilder builder = <span class="keyword">new</span> ProcessBuilder();</span><br><span class="line">            builder.command(commend);</span><br><span class="line">            builder.redirectErrorStream(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// builder.redirectOutput(new File("F:/123/log/log.log"));</span></span><br><span class="line">            Process process = builder.start();</span><br><span class="line">            doWaitFor(process);</span><br><span class="line">            process.destroy();</span><br><span class="line">            <span class="keyword">if</span> (!checkfile(tarImagePath)) &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(tarImagePath + <span class="string">" is not exit!  processFfmpegImage 转换不成功 !"</span>);</span><br><span class="line">                <span class="comment">// logger.info(tarImagePath + " is not exit! processFfmpegImage</span></span><br><span class="line">                <span class="comment">// 转换不成功 !");</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"【"</span> + srcVideoPath + <span class="string">"】 processFfmpegImage  转换不成功 !"</span>);</span><br><span class="line">            <span class="comment">// logger.error("【" + srcVideoPath + "】 processFfmpegImage 转换不成功</span></span><br><span class="line">            <span class="comment">// !");</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">boolean</span> processFfmpegAudio(<span class="keyword">String</span> srcVideoPath, <span class="keyword">String</span> tarAudioPath) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!checkfile(srcVideoPath)) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"【"</span> + srcVideoPath + <span class="string">"】  不存在 !"</span>);</span><br><span class="line">            <span class="comment">// logger.error("【" + srcVideoPath + "】 不存在 !");</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// https://blog.csdn.net/xiaocao9903/article/details/53420519</span></span><br><span class="line">        <span class="comment">// ffmpeg -i 3.mp4 -vn -y -acodec copy 3.aac</span></span><br><span class="line">        <span class="comment">// ffmpeg -i 3.mp4 -vn -y -acodec copy 3.m4a</span></span><br><span class="line">        </span><br><span class="line">        List&lt;<span class="keyword">String</span>&gt; commend = <span class="keyword">new</span> java.util.ArrayList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line">        </span><br><span class="line">        commend.<span class="built_in">add</span>(ffmpegPath);</span><br><span class="line">        </span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-i"</span>);</span><br><span class="line">        </span><br><span class="line">        commend.<span class="built_in">add</span>(srcVideoPath);</span><br><span class="line">        </span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-vn"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-y"</span>);</span><br><span class="line">        </span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-acodec"</span>);</span><br><span class="line">        </span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"copy"</span>); <span class="comment">// 在视频的某个插入时间截图，例子为5秒后</span></span><br><span class="line">        </span><br><span class="line">        commend.<span class="built_in">add</span>(tarAudioPath);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ProcessBuilder builder = <span class="keyword">new</span> ProcessBuilder();</span><br><span class="line">            builder.command(commend);</span><br><span class="line">            builder.redirectErrorStream(<span class="keyword">true</span>);</span><br><span class="line">            Process process = builder.start();</span><br><span class="line">            doWaitFor(process);</span><br><span class="line">            process.destroy();</span><br><span class="line">            <span class="keyword">if</span> (!checkfile(tarAudioPath)) &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(tarAudioPath + <span class="string">" is not exit!  processFfmpegAudio 转换不成功 !"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"【"</span> + srcVideoPath + <span class="string">"】 processFfmpegAudio  转换不成功 !"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ffmpeg 合成视频</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param srcVideoPath</span></span><br><span class="line"><span class="comment">     * @param tarImagePath</span></span><br><span class="line"><span class="comment">     *            截取后图片路径</span></span><br><span class="line"><span class="comment">     * @param width</span></span><br><span class="line"><span class="comment">     *            截图的宽</span></span><br><span class="line"><span class="comment">     * @param hight</span></span><br><span class="line"><span class="comment">     *            截图的高</span></span><br><span class="line"><span class="comment">     * @param offsetValue</span></span><br><span class="line"><span class="comment">     *            表示相对于文件开始处的时间偏移值 可以是分秒</span></span><br><span class="line"><span class="comment">     * @param vframes</span></span><br><span class="line"><span class="comment">     *            表示截图的桢数</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">boolean</span> processFfmpegVideo(<span class="keyword">String</span> imagePath, <span class="keyword">String</span> audioPath, <span class="keyword">String</span> tarVideoPath, <span class="built_in">int</span> step) &#123;</span><br><span class="line">        <span class="comment">// https://blog.csdn.net/wangshuainan/article/details/77914508?fps=1&amp;locationNum=4</span></span><br><span class="line">        <span class="comment">// 带音频</span></span><br><span class="line">        <span class="comment">// ffmpeg -threads2 -y -r 10 -i /tmpdir/image%04d.jpg -i audio.mp3 -absf</span></span><br><span class="line">        <span class="comment">// aac_adtstoasc output.mp4</span></span><br><span class="line"></span><br><span class="line">        List&lt;<span class="keyword">String</span>&gt; commend = <span class="keyword">new</span> java.util.ArrayList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(ffmpegPath);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-threads"</span>);</span><br><span class="line">        </span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-y"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-r"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(step + <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-i"</span>);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(imagePath); <span class="comment">// 图片</span></span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-i"</span>);</span><br><span class="line"></span><br><span class="line">         commend.<span class="built_in">add</span>(audioPath);</span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"-absf"</span>);<span class="comment">// </span></span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(<span class="string">"aac_adtstoasc"</span>); <span class="comment">// </span></span><br><span class="line"></span><br><span class="line">        commend.<span class="built_in">add</span>(tarVideoPath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ProcessBuilder builder = <span class="keyword">new</span> ProcessBuilder();</span><br><span class="line">            builder.command(commend);</span><br><span class="line">            builder.redirectErrorStream(<span class="keyword">true</span>);</span><br><span class="line">             builder.redirectOutput(<span class="keyword">new</span> File(<span class="string">"F:/123/log/log.log"</span>));</span><br><span class="line">            Process process = builder.start();</span><br><span class="line">            doWaitFor(process);</span><br><span class="line">            process.destroy();</span><br><span class="line">            <span class="keyword">if</span> (!checkfile(tarVideoPath)) &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(tarVideoPath + <span class="string">" is not exit!  processFfmpegVideo 转换不成功 !"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"【"</span> + tarVideoPath + <span class="string">"】 processFfmpegVideo  转换不成功 !"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>源码地址：<br><a href="https://github.com/Ruffianjiang/java4fun/tree/master/img2text" target="_blank" rel="noopener">https://github.com/Ruffianjiang/java4fun/tree/master/img2text</a></p><p>参考：</p><ol><li><a href="https://blog.csdn.net/i_likechard/article/details/79032931" target="_blank" rel="noopener">https://blog.csdn.net/i_likechard/article/details/79032931</a></li><li><a href="https://blog.csdn.net/xiaocao9903/article/details/53420519" target="_blank" rel="noopener">https://blog.csdn.net/xiaocao9903/article/details/53420519</a></li><li><a href="https://blog.csdn.net/wangshuainan/article/details/77914508?fps=1&amp;locationNum=4" target="_blank" rel="noopener">https://blog.csdn.net/wangshuainan/article/details/77914508?fps=1&amp;locationNum=4</a></li><li><a href="https://blog.csdn.net/yourijing/article/details/50786758" target="_blank" rel="noopener">https://blog.csdn.net/yourijing/article/details/50786758</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;序言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#序言&quot;&gt;&lt;/a&gt; 序言&lt;/h3&gt;&lt;p&gt;这个是从抖音上学来的，一开始刷抖音，遇到不少字符串跳舞的视频，因此来实践一下&lt;/p&gt;&lt;h3 id=&quot;主要分为三个部分&quot;&gt;&lt;a class=&quot;mar
      
    
    </summary>
    
      <category term="java" scheme="https://lossingdawn.top/categories/java/"/>
    
      <category term="fun" scheme="https://lossingdawn.top/categories/java/fun/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
      <category term="fun" scheme="https://lossingdawn.top/tags/fun/"/>
    
  </entry>
  
  <entry>
    <title>图片转字符图片（二）</title>
    <link href="https://lossingdawn.top/p/zh-CN/10184.html"/>
    <id>https://lossingdawn.top/p/zh-CN/10184.html</id>
    <published>2018-08-20T16:23:00.000Z</published>
    <updated>2019-08-26T13:14:45.749Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h3><blockquote><p>这个是从抖音上学来的，一开始刷抖音，遇到不少字符串跳舞的视频，因此来实践一下</p></blockquote><h3 id="主要分为三个部分"><a class="markdownIt-Anchor" href="#主要分为三个部分"></a> 主要分为三个部分</h3><ol><li>静态图片转静态图片</li><li>gif 转 gif</li><li>视频转视频</li></ol><h3 id="gif-转-gif"><a class="markdownIt-Anchor" href="#gif-转-gif"></a> gif 转 gif</h3><blockquote><p>原理和静态图片的转换类似，这个需要每一帧的去转换。一开始的思路是把gif的每一帧转为图片，然后对图片进行转换，最后合成 gif 。<br>研究了 img4java，</p></blockquote><blockquote><p>效果如下所示：</p></blockquote><p><img src="https://blog-lossingdawn.oss-cn-shanghai.aliyuncs.com/img2text/1.gif?x-oss-process=style/default_blog" alt="原图"></p><p><img src="https://blog-lossingdawn.oss-cn-shanghai.aliyuncs.com/img2text/1_03.gif?x-oss-process=style/default_blog" alt="转换后1"></p><p><img src="https://blog-lossingdawn.oss-cn-shanghai.aliyuncs.com/img2text/123.gif?x-oss-process=style/default_blog" alt="原图"></p><p><img src="https://blog-lossingdawn.oss-cn-shanghai.aliyuncs.com/img2text/123_03.gif?x-oss-process=style/default_blog" alt="转换后1"></p><p><img src="https://blog-lossingdawn.oss-cn-shanghai.aliyuncs.com/img2text/123_04.gif?x-oss-process=style/default_blog" alt="转换后2"></p><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gifTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String srcFile = <span class="string">"F:/123/123.gif"</span>;</span><br><span class="line">    String targetFile = <span class="string">"F:/123/123_04.gif"</span>;</span><br><span class="line">    String base = <span class="string">"01"</span>; <span class="comment">// 替换的字符串</span></span><br><span class="line">    <span class="comment">// String base = "@#&amp;$%*o!;.";// 字符串由复杂到简单</span></span><br><span class="line">    <span class="keyword">int</span> threshold = <span class="number">3</span>;<span class="comment">// 阈值</span></span><br><span class="line">    GifUtil.toTextGif(srcFile, targetFile, base, threshold);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考：</h3><p><a href="https://blog.csdn.net/DamonRush/article/details/51746995" target="_blank" rel="noopener">https://blog.csdn.net/DamonRush/article/details/51746995</a>、<br><a href="https://blog.csdn.net/weiwangchao_/article/details/46520571" target="_blank" rel="noopener">https://blog.csdn.net/weiwangchao_/article/details/46520571</a>，<br>还有一些其他的工具（用了私有api，不推荐）<br><a href="http://zhaorui1125.iteye.com/blog/2116816" target="_blank" rel="noopener">http://zhaorui1125.iteye.com/blog/2116816</a>，<br>最后发现他们截出来的每一张图要么发红，要么模糊，只好放弃了。最后发现不需要把每一帧都保存下来，临时存一下就好，具体代码如下：</p><h4 id="环境"><a class="markdownIt-Anchor" href="#环境"></a> 环境：</h4><p>JDK 1.8</p><h4 id="完整代码如下"><a class="markdownIt-Anchor" href="#完整代码如下"></a> 完整代码如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dawn.img2text.external.AnimatedGifEncoder;</span><br><span class="line"><span class="keyword">import</span> com.dawn.img2text.external.GifDecoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: GifUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jiang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018年8月14日 下午9:47:29</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GifUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(GifUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">toTextGif</span><span class="params">(<span class="keyword">final</span> String srcFile, <span class="keyword">final</span> String targetFile, <span class="keyword">final</span> String base, <span class="keyword">int</span> threshold)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            GifDecoder gd = <span class="keyword">new</span> GifDecoder();</span><br><span class="line">            <span class="comment">// 要处理的图片</span></span><br><span class="line">            <span class="keyword">int</span> status = gd.read(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(srcFile)));</span><br><span class="line">            <span class="keyword">if</span> (status != GifDecoder.STATUS_OK) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            AnimatedGifEncoder ge = <span class="keyword">new</span> AnimatedGifEncoder();</span><br><span class="line">            <span class="comment">// 这里是关键，设置要替换成透明的颜色</span></span><br><span class="line">            ge.setTransparent(Color.WHITE);</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            ge.start(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(targetFile)));</span><br><span class="line">            ge.setRepeat(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gd.getFrameCount(); i++) &#123;</span><br><span class="line">                <span class="comment">// 取得gif的每一帧</span></span><br><span class="line">                BufferedImage frame = gd.getFrame(i);</span><br><span class="line">                <span class="comment">// 你可以对每一帧做点什么，比如缩放什么的，这里就什么都不做了</span></span><br><span class="line">                <span class="keyword">int</span>[] rgb = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">                <span class="keyword">int</span> width = frame.getWidth();</span><br><span class="line">                <span class="keyword">int</span> height = frame.getHeight();</span><br><span class="line">                <span class="keyword">int</span> minx = frame.getMinX();</span><br><span class="line">                <span class="keyword">int</span> miny = frame.getMinY();</span><br><span class="line">                <span class="keyword">int</span> delay = gd.getDelay(i);</span><br><span class="line">                BufferedImage tag = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);</span><br><span class="line">                Graphics g = tag.getGraphics();</span><br><span class="line">                g.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.PLAIN, <span class="number">2</span>));<span class="comment">// 设置字体</span></span><br><span class="line">                g.setColor(Color.BLACK);<span class="comment">// 设置颜色</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x = minx; x &lt; width; x += <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> y = miny; y &lt; height; y += <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">int</span> pixel = frame.getRGB(x, y); <span class="comment">// 下面三行代码将一个数字转换为RGB数字</span></span><br><span class="line">                        rgb[<span class="number">0</span>] = (pixel &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span>;<span class="comment">// red</span></span><br><span class="line">                        rgb[<span class="number">1</span>] = (pixel &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>;<span class="comment">// green</span></span><br><span class="line">                        rgb[<span class="number">2</span>] = (pixel &amp; <span class="number">0xff</span>);<span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">float</span> gray = <span class="number">0.299F</span> * rgb[<span class="number">0</span>] + <span class="number">0.578F</span> * rgb[<span class="number">1</span>] + <span class="number">0.114F</span> * rgb[<span class="number">2</span>];</span><br><span class="line">                        <span class="comment">// index [0,base.length()),index越小颜色越深</span></span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> index = Math.round(gray * (base.length() + <span class="number">1</span>) / <span class="number">255</span>);</span><br><span class="line">                        <span class="keyword">if</span> (index &lt;= base.length() % threshold) &#123;</span><br><span class="line">                            g.drawString(String.valueOf(base.charAt(index % base.length())), x, y);<span class="comment">// 文字的编写及位置</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">/*-</span></span><br><span class="line"><span class="comment">                        if (rgb[0] + rgb[1] + rgb[2] &lt;= 300) &#123;</span></span><br><span class="line"><span class="comment">                            g.drawString(String.valueOf(base.charAt(index % base.length())), x, y);// 文字的编写及位置</span></span><br><span class="line"><span class="comment">                        &#125;*/</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ge.setDelay(delay);</span><br><span class="line">                ge.addFrame(tag);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 输出图片</span></span><br><span class="line">            ge.finish();</span><br><span class="line">            logger.debug(<span class="string">"&#123;&#125; toTextGif cost time： &#123;&#125;s"</span>, srcFile, System.currentTimeMillis() - startTime);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"err"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理和静态图转字符图片是一致，不再累述。</p><p>源码地址：<br><a href="https://github.com/Ruffianjiang/java4fun/tree/master/img2text" target="_blank" rel="noopener">https://github.com/Ruffianjiang/java4fun/tree/master/img2text</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;序言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#序言&quot;&gt;&lt;/a&gt; 序言&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;这个是从抖音上学来的，一开始刷抖音，遇到不少字符串跳舞的视频，因此来实践一下&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id
      
    
    </summary>
    
      <category term="java" scheme="https://lossingdawn.top/categories/java/"/>
    
      <category term="fun" scheme="https://lossingdawn.top/categories/java/fun/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
      <category term="fun" scheme="https://lossingdawn.top/tags/fun/"/>
    
  </entry>
  
  <entry>
    <title>图片转字符图片（一）</title>
    <link href="https://lossingdawn.top/p/zh-CN/10183.html"/>
    <id>https://lossingdawn.top/p/zh-CN/10183.html</id>
    <published>2018-08-20T16:02:00.000Z</published>
    <updated>2019-08-26T13:12:25.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h3><p>这个是从抖音上学来的，一开始刷抖音，遇到不少字符串跳舞的视频，因此来实践一下</p><h3 id="主要分为三个部分"><a class="markdownIt-Anchor" href="#主要分为三个部分"></a> 主要分为三个部分</h3><ol><li>静态图片转静态图片</li><li>gif转gif</li><li>视频转视频</li></ol><h3 id="静态图片转静态图片"><a class="markdownIt-Anchor" href="#静态图片转静态图片"></a> 静态图片转静态图片</h3><p>其实原理很简单，读取图片的像素，新建一张大小一样的图片，根据原图像素的灰度，决定是不是要显示出来，并在新图相应的位置添加字符，这样就完成了</p><p>先来看下效果图，如下</p><p><img src="https://blog-lossingdawn.oss-cn-shanghai.aliyuncs.com/img2text/head.png?x-oss-process=style/default_blog" alt="原图"></p><p><img src="https://blog-lossingdawn.oss-cn-shanghai.aliyuncs.com/img2text/head_copy.png?x-oss-process=style/default_blog" alt="字符串后"></p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><p>借助前辈写的工具，主要包含一下四个类：<br>AnimatedGifEncoder<br>GifDecoder<br>LZWEncoder<br>NeuQuant</p><p>源地址:<a href="https://github.com/rtyley/animated-gif-lib-for-java" target="_blank" rel="noopener">https://github.com/rtyley/animated-gif-lib-for-java</a></p><p>ps: 网上各种版本的太多，不清楚这个是不是原作者，github上搜GifDecoder</p><h3 id="环境"><a class="markdownIt-Anchor" href="#环境"></a> 环境：</h3><p>JDK 1.8</p><p>注：Java原生代码实现使用jdk内部的GIFImageReader、GIFImageWriter等类，maven在编译的时候会提示这是sun公司的私有API，在1.7、1.8版的JDK中已经删除，所以是有风险的。在此使用ImageIO这个类来进行图片的操作。</p><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">imgTest</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    String inputFile </span>= <span class="string">"F:/123/head.png"</span>;</span><br><span class="line">    String outputFile = <span class="string">"F:/123/head_copy.png"</span>;</span><br><span class="line">    <span class="comment">// String base = "01"; // 替换的字符串</span></span><br><span class="line">    String base = <span class="string">"@#&amp;$%*o!;."</span>;<span class="comment">// 字符串由复杂到简单</span></span><br><span class="line">    <span class="keyword">int</span> threshold = <span class="number">8</span>;<span class="comment">// 阈值</span></span><br><span class="line">    ImgUtil.toTextImg(inputFile, outputFile, base, threshold);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参数调整">具体参数调整如下图所示：</h2><p><img src="https://blog-lossingdawn.oss-cn-shanghai.aliyuncs.com/img2text/paranCode.png?x-oss-process=style/default_blog" alt="代码"></p><ol><li>调整字符大小，颜色</li><li>调整字符间距</li><li>调整字符的区域 （index数值越小，灰度越大）</li></ol><p>完整代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ImgUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jiang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018年8月14日 下午10:15:56</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImgUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(ImgUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">toTextImg</span><span class="params">(String inputFile, String outputFile, <span class="keyword">final</span> String base, <span class="keyword">int</span> threshold)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        String blackFile = "F:/123/head_black.png";</span></span><br><span class="line">        BufferedImage src = <span class="keyword">null</span>;</span><br><span class="line">        BufferedImage tag = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> res = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            src = ImageIO.read(<span class="keyword">new</span> FileInputStream(inputFile));</span><br><span class="line">            <span class="keyword">int</span>[] rgb = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">int</span> width = src.getWidth();</span><br><span class="line">            <span class="keyword">int</span> height = src.getHeight();</span><br><span class="line">            <span class="keyword">int</span> minx = src.getMinX();</span><br><span class="line">            <span class="keyword">int</span> miny = src.getMinY();</span><br><span class="line">            <span class="comment">// 黑白化</span></span><br><span class="line"><span class="comment">/*-                        </span></span><br><span class="line"><span class="comment">            src = new ColorConvertOp(ColorSpace.getInstance(ColorSpace.CS_GRAY), null).filter(src, null);</span></span><br><span class="line"><span class="comment">            res = ImageIO.write(src, blackFile.substring(blackFile.lastIndexOf(".") + 1), new File(blackFile));</span></span><br><span class="line"><span class="comment">            src = ImageIO.read(new FileInputStream(blackFile));*/</span></span><br><span class="line"></span><br><span class="line">            tag = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);</span><br><span class="line">            Graphics g = tag.getGraphics();</span><br><span class="line">            g.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.PLAIN, <span class="number">10</span>));<span class="comment">// 设置字体</span></span><br><span class="line">            g.setColor(Color.BLUE);<span class="comment">// 设置颜色</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = minx; x &lt; width; x += <span class="number">6</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> y = miny; y &lt; height; y += <span class="number">6</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> pixel = src.getRGB(x, y); <span class="comment">// 下面三行代码将一个数字转换为RGB数字</span></span><br><span class="line">                    rgb[<span class="number">0</span>] = (pixel &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span>;<span class="comment">// red</span></span><br><span class="line">                    rgb[<span class="number">1</span>] = (pixel &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>;<span class="comment">// green</span></span><br><span class="line">                    rgb[<span class="number">2</span>] = (pixel &amp; <span class="number">0xff</span>);<span class="comment">// blue</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> gray = <span class="number">0.299f</span> * rgb[<span class="number">0</span>] + <span class="number">0.578f</span> * rgb[<span class="number">1</span>] + <span class="number">0.114f</span> * rgb[<span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> index = Math.round(gray * (base.length() + <span class="number">1</span>) / <span class="number">255</span>);</span><br><span class="line"><span class="comment">//                    logger.debug("&#123;&#125;,&#123;&#125;",index,base.length() / threshold);</span></span><br><span class="line">                    <span class="keyword">if</span> (index &lt;= threshold) &#123;</span><br><span class="line">                        g.drawString(String.valueOf(base.charAt(index % base.length())), x, y);<span class="comment">// 文字的编写及位置</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/*-</span></span><br><span class="line"><span class="comment">                    if (rgb[0] + rgb[1] + rgb[2] &lt;= 500) &#123;</span></span><br><span class="line"><span class="comment">                        System.out.println("i=" + i + ",j=" + j + ":(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + ")");</span></span><br><span class="line"><span class="comment">                        g.drawString("v", i, j);// 文字的编写及位置</span></span><br><span class="line"><span class="comment">                    &#125;*/</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            g.dispose();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出图片</span></span><br><span class="line">            res = ImageIO.write(tag, outputFile.substring(outputFile.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>),</span><br><span class="line">                    <span class="keyword">new</span> File(outputFile));</span><br><span class="line">            logger.debug(<span class="string">"字符化结果：&#123;&#125;"</span>, res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"err"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码的思路很简单，src.getRGB(x, y)获取具体像素点的颜色值，共六位，每两位一个颜色值，依次是red、green、blue,类似的使用</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(pixel &amp; <span class="number">0xff0000</span>) <span class="meta">&gt;&gt; </span><span class="number">16</span></span><br></pre></td></tr></table></figure><p>获取第一位的红色等，根据灰度公式</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Gray</span> = R/*<span class="number">0.299</span> + G/*<span class="number">0.587</span> + B/*<span class="number">0.114</span></span><br></pre></td></tr></table></figure><p>计算灰度（百度颜色灰度公式，有很多来计算心理灰度的解决方案），选择合适的灰度替换上合适的字符即可</p><p>源码地址：<br><a href="https://github.com/Ruffianjiang/java4fun/tree/master/img2text" target="_blank" rel="noopener">https://github.com/Ruffianjiang/java4fun/tree/master/img2text</a></p><p>参考：</p><ol><li><a href="https://blog.csdn.net/chwshuang/article/details/64923345" target="_blank" rel="noopener">https://blog.csdn.net/chwshuang/article/details/64923345</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;序言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#序言&quot;&gt;&lt;/a&gt; 序言&lt;/h3&gt;&lt;p&gt;这个是从抖音上学来的，一开始刷抖音，遇到不少字符串跳舞的视频，因此来实践一下&lt;/p&gt;&lt;h3 id=&quot;主要分为三个部分&quot;&gt;&lt;a class=&quot;mar
      
    
    </summary>
    
      <category term="java" scheme="https://lossingdawn.top/categories/java/"/>
    
      <category term="fun" scheme="https://lossingdawn.top/categories/java/fun/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
      <category term="fun" scheme="https://lossingdawn.top/tags/fun/"/>
    
  </entry>
  
  <entry>
    <title>Github访问不到，登陆不上</title>
    <link href="https://lossingdawn.top/p/zh-CN/61789.html"/>
    <id>https://lossingdawn.top/p/zh-CN/61789.html</id>
    <published>2018-06-10T05:50:00.000Z</published>
    <updated>2019-07-27T17:04:49.076Z</updated>
    
    <content type="html"><![CDATA[<p>为github添加host</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\W</span>INDOWS<span class="symbol">\S</span>ystem32<span class="symbol">\d</span>rivers<span class="symbol">\e</span>tc</span><br></pre></td></tr></table></figure><p>在host文件添加如下两行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192<span class="selector-class">.30</span><span class="selector-class">.253</span><span class="selector-class">.112</span> <span class="selector-tag">github</span><span class="selector-class">.com</span></span><br><span class="line">151<span class="selector-class">.101</span><span class="selector-class">.113</span><span class="selector-class">.194</span> <span class="selector-tag">github</span><span class="selector-class">.global</span><span class="selector-class">.SSL</span><span class="selector-class">.fastly</span><span class="selector-class">.net</span></span><br></pre></td></tr></table></figure><p>再次 ping <a href="http://github.com" target="_blank" rel="noopener">github.com</a> 解析后的ip就会强制指向host中的ip</p><p><img src="https://images2018.cnblogs.com/blog/670989/201806/670989-20180610134332071-1047669790.png" alt=""></p><p></p><p>注1：</p><p>host文件修改需要权限，建议使用 <a href="https://notepad-plus.en.softonic.com/" target="_blank" rel="noopener">nodepad++</a> ，保存后会自动要求管理员权限，再次保存即可</p><p>注2：</p><p>关于IP的选择，可以去 <a href="http://tool.chinaz.com/dns/" target="_blank" rel="noopener">站长工具</a> 去查</p><p>参考：</p><p><a href="https://blog.csdn.net/wl_521/article/details/80154063" target="_blank" rel="noopener">https://blog.csdn.net/wl_521/article/details/80154063</a></p><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为github添加host&lt;/p&gt;&lt;figure class=&quot;highlight taggerscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td 
      
    
    </summary>
    
      <category term="github" scheme="https://lossingdawn.top/categories/github/"/>
    
    
      <category term="github" scheme="https://lossingdawn.top/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Jdk安装错误1316，jdk-10.0.1</title>
    <link href="https://lossingdawn.top/p/zh-CN/49489.html"/>
    <id>https://lossingdawn.top/p/zh-CN/49489.html</id>
    <published>2018-05-24T16:50:00.000Z</published>
    <updated>2019-07-27T17:05:59.486Z</updated>
    
    <content type="html"><![CDATA[<p>打开注册表regedit ，定个位到</p><p>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\</p><p>把jdk，jre下面的目录删掉。即10.0.1 ，问题解决</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180525004720215-2037377963.png" alt=""></p><p>参考：</p><p><a href="https://blog.csdn.net/lesorb/article/details/4389626" target="_blank" rel="noopener">https://blog.csdn.net/lesorb/article/details/4389626</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打开注册表regedit ，定个位到&lt;/p&gt;&lt;p&gt;计算机\HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\&lt;/p&gt;&lt;p&gt;把jdk，jre下面的目录删掉。即10.0.1 ，问题解决&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://images2018
      
    
    </summary>
    
      <category term="java" scheme="https://lossingdawn.top/categories/java/"/>
    
      <category term="jdk" scheme="https://lossingdawn.top/categories/java/jdk/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
      <category term="jdk" scheme="https://lossingdawn.top/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>Windows安装mongodb</title>
    <link href="https://lossingdawn.top/p/zh-CN/13792.html"/>
    <id>https://lossingdawn.top/p/zh-CN/13792.html</id>
    <published>2018-05-23T15:44:00.000Z</published>
    <updated>2019-07-27T17:06:41.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-资源"><a class="markdownIt-Anchor" href="#一-资源"></a> 一、资源</h1><p>mongo下载地址：</p><p><a href="https://www.mongodb.com/download-center/#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/#community</a></p><p>romongo下载：</p><p><a href="https://robomongo.org/" target="_blank" rel="noopener">https://robomongo.org/</a></p><p>如下三个文件，（mongodb-compass可以不用下在，这是管理mongo用的图形化界面，习惯用romongo查询，studio3t可以自己学习使用）</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523230609258-1965975496.png" alt=""></p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523230624498-2048375172.png" alt=""></p><p>安装好以上软件，我本地的mongo安装到了d:tools\mongo 目录下，新建两个目录用于存储数据和日志</p><p>d:\tools\data\db  和  d:\tools\data\log</p><h1 id="二-初始化工作"><a class="markdownIt-Anchor" href="#二-初始化工作"></a> 二、初始化工作</h1><p>在命令行使用命令：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">启动脚本</span><br><span class="line">D:<span class="symbol">\t</span>ools<span class="symbol">\m</span>ongo<span class="symbol">\b</span>in<span class="symbol">\m</span>ongod --dbpath D:<span class="symbol">\t</span>ools<span class="symbol">\d</span>ata<span class="symbol">\d</span>b</span><br><span class="line"></span><br><span class="line">连接脚本</span><br><span class="line">D:<span class="symbol">\t</span>ools<span class="symbol">\m</span>ongo<span class="symbol">\b</span>in<span class="symbol">\m</span>ongo.exe</span><br></pre></td></tr></table></figure><p>出现  waiting for connetions on port 27017 ，则表示启动成功，ctrl+c可以关闭</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523231214127-696762503.png" alt=""></p><p>使用连接脚本连接数据库（新开一个命令行）</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523231314507-1741726332.png" alt=""></p><p>启动数据库命令行出现如下连接者的信息，连接成功</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523231548680-1994178827.png" alt=""></p><p>使用mongodb compass连接</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523231912505-440335011.png" alt=""></p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523231932604-1994370193.png" alt=""></p><p>romongo连接</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523232009239-2102787447.png" alt=""></p><p>后面主要使用romongo进行数据的查询，其中三种视图的切换</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523232601167-1448570459.png" alt=""></p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523232628501-270467638.png" alt=""></p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523232638818-290755981.png" alt=""></p><h1 id="三-mongo的配置"><a class="markdownIt-Anchor" href="#三-mongo的配置"></a> 三、mongo的配置</h1><p>配置 MongoDB 服务</p><p><em>创建一个配置文件位于 D:\tools\mongo\mongod.cfg<br>具体内容如下：</em></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">systemLog:</span></span><br><span class="line"><span class="string">destination:</span> file</span><br><span class="line"><span class="string">path:</span> <span class="string">D:</span>\tools\data\log\mongod.log</span><br><span class="line"><span class="string">storage:</span></span><br><span class="line"><span class="string">dbPath:</span> <span class="string">D:</span>\tools\data\db</span><br></pre></td></tr></table></figure><p>安装 MongoDB服务</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:<span class="symbol">\t</span>ools<span class="symbol">\m</span>ongo<span class="symbol">\b</span>in<span class="symbol">\m</span>ongod.exe --config "D:<span class="symbol">\t</span>ools<span class="symbol">\m</span>ongo<span class="symbol">\m</span>ongod.cfg" --install</span><br></pre></td></tr></table></figure><p></p><p>命令行需要管理员权限，没使用管理员权限的出现如下log信息</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523233935268-1055788732.png" alt=""></p><p>安装完成log信息如下：</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523234018623-1110298683.png" alt=""></p><p>在服务里可以找到MongoBD的服务</p><p><img src="https://images2018.cnblogs.com/blog/670989/201805/670989-20180523233703415-677450017.png" alt=""></p><p></p><p>启动MongoDB服务</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> MongoDB</span><br></pre></td></tr></table></figure><p>关闭MongoDB服务</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net <span class="built_in">stop</span> MongoDB</span><br></pre></td></tr></table></figure><p>移除 MongoDB 服务</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\m</span>ongodb<span class="symbol">\b</span>in<span class="symbol">\m</span>ongod.exe --remove</span><br></pre></td></tr></table></figure><p>其他的信息自行摸索吧，现在可以愉快的使用mongo了</p><p>参考：</p><p><a href="http://www.runoob.com/mongodb/mongodb-window-install.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-window-install.html</a></p><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-资源&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-资源&quot;&gt;&lt;/a&gt; 一、资源&lt;/h1&gt;&lt;p&gt;mongo下载地址：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.mongodb.com/download-center/#
      
    
    </summary>
    
      <category term="db" scheme="https://lossingdawn.top/categories/db/"/>
    
      <category term="mongo" scheme="https://lossingdawn.top/categories/db/mongo/"/>
    
    
      <category term="mongo" scheme="https://lossingdawn.top/tags/mongo/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse中Cannot Nest Src Folder解决方法</title>
    <link href="https://lossingdawn.top/p/zh-CN/61671.html"/>
    <id>https://lossingdawn.top/p/zh-CN/61671.html</id>
    <published>2018-04-25T01:04:00.000Z</published>
    <updated>2019-07-27T17:04:13.047Z</updated>
    
    <content type="html"><![CDATA[<p>错误示例：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: Java Model Status [Cannot nest output <span class="built_in">folder</span> <span class="string">'xxx/bin/main'</span> inside output <span class="built_in">folder</span> <span class="string">'xxx/bin'</span>]</span><br></pre></td></tr></table></figure><p>解决方法：</p><p>右击项目 -&gt; properties -&gt; java build path -&gt; source</p><p><img src="https://images2018.cnblogs.com/blog/670989/201804/670989-20180425085906920-111690844.png" alt=""></p><p>一般是上图的红框的问题，这个已经改过的，报错的时候，是一个还未新建的文件夹目录/bin/main，解决方案如下图所示：</p><p><img src="https://images2018.cnblogs.com/blog/670989/201804/670989-20180425090102781-1418976264.png" alt=""></p><p>第一种就是把allow output folders xxx 的勾选去掉</p><p>第二种不去勾选，把default output folder目录改到bin目录</p><p></p><p>另外一种参考方法：</p><p><a href="https://blog.csdn.net/sinat_30397435/article/details/78522566" target="_blank" rel="noopener">https://blog.csdn.net/sinat_30397435/article/details/78522566</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;错误示例：&lt;/p&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=
      
    
    </summary>
    
      <category term="ide" scheme="https://lossingdawn.top/categories/ide/"/>
    
      <category term="eclipse" scheme="https://lossingdawn.top/categories/ide/eclipse/"/>
    
    
      <category term="ide" scheme="https://lossingdawn.top/tags/ide/"/>
    
      <category term="eclipse" scheme="https://lossingdawn.top/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>restTemplate重定向问题 &amp;Cookie问题</title>
    <link href="https://lossingdawn.top/p/zh-CN/20555.html"/>
    <id>https://lossingdawn.top/p/zh-CN/20555.html</id>
    <published>2018-04-20T07:44:00.000Z</published>
    <updated>2019-07-27T17:06:14.728Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个转发功能，zuul + ribbon + resttemplate 进行路由、负载、转发的功能</p><p>基本准备就绪，在微信自动登陆那遇到了一个坑，ribbon 系统用resttemplate 转发A系统的资源，在微信自动登陆的地方，A系统重定向到微信的地址，类似下面的代码</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redirect: https:<span class="regexp">//open</span>.weixin.qq.com/<span class="keyword">connect</span>/oauth2/authorize?appid=wx3290f3d5****&amp;redirect_uri=http:<span class="regexp">//</span>***.com/weixin/wxAuthRedirect?redirectUrl=http%3A%2F%2F192.<span class="number">168.10</span>.<span class="number">116</span>%3A8081%2Finternal%2Fpage%2Fuser%2Flogin_wx&amp;response_type=code&amp;scope=snsapi_userinfo&amp;<span class="keyword">state</span>=<span class="keyword">state</span><span class="comment">#wechat_redirect</span></span><br></pre></td></tr></table></figure><p>结果resttemplate 自动重定向到本地的地址，如下所示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">10.116</span>:**<span class="regexp">/connect/</span>oauth2<span class="regexp">/authorize**</span></span><br></pre></td></tr></table></figure><p>仔细思考了下，大概就是resttemplate 的重定向问题，查了查资料，找到一个类HttpComponentsClientHttpRequestFactory，RestTemplate初始化提供了这个类的参数</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new instance of the &#123;<span class="doctag">@link</span> RestTemplate&#125; based on the given &#123;<span class="doctag">@link</span> ClientHttpRequestFactory&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestFactory HTTP request factory to use</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> org.springframework.http.client.SimpleClientHttpRequestFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> org.springframework.http.client.HttpComponentsClientHttpRequestFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RestTemplate</span><span class="params">(ClientHttpRequestFactory requestFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        setRequestFactory(requestFactory);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>HttpComponentsClientHttpRequestFactory继承自ClientHttpRequestFactory，这个类的子类有HttpComponentsClientHttpRequestFactory和SimpleClientHttpRequestFactory</p><p>找到SimpleClientHttpRequestFactory，有如下方法：</p><p>第一种方式：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Template method for preparing the given &#123;@link HttpURLConnection&#125;.</span><br><span class="line">     * &lt;p&gt;The default implementation prepares the connection for input and output, and sets the HTTP method.</span><br><span class="line">     * @param connection the connection to prepare</span><br><span class="line">     * @param httpMethod the HTTP request method (&#123;@code GET&#125;, &#123;@code POST&#125;, etc.)</span><br><span class="line">     * @throws IOException in case of I/O errors</span><br><span class="line">     */</span><br><span class="line">    protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException &#123;</span><br><span class="line">        if (this.connectTimeout &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            connection.setConnectTimeout(this.connectTimeout);</span><br><span class="line">        &#125;</span><br><span class="line">        if (this.readTimeout &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            connection.setReadTimeout(this.readTimeout);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        connection.setDoInput(true);</span><br><span class="line"></span><br><span class="line">        if (<span class="string">"<span class="keyword">GET</span>"</span>.equals(httpMethod)) &#123;</span><br><span class="line">            connection.setInstanceFollowRedirects(true);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            connection.setInstanceFollowRedirects(false);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (<span class="string">"<span class="keyword">POST</span>"</span>.equals(httpMethod) || <span class="string">"<span class="keyword">PUT</span>"</span>.equals(httpMethod) ||</span><br><span class="line">                <span class="string">"<span class="keyword">PATCH</span>"</span>.equals(httpMethod) || <span class="string">"<span class="keyword">DELETE</span>"</span>.equals(httpMethod)) &#123;</span><br><span class="line">            connection.setDoOutput(true);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            connection.setDoOutput(false);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        connection.setRequestMethod(httpMethod);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到setInstanceFollowRedirects，get请求是可以重定向的，其他方法禁止了重定向，于是建个SimpleClientHttpRequestFactory的子类，禁用重定向。</p><p>于是乎 NoRedirectClientHttpRequestFactory.java</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">HttpURLConnection</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.<span class="type">SimpleClientHttpRequestFactory</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">NoRedirectClientHttpRequestFactory</span> <span class="keyword">extends</span> <span class="title">SimpleClientHttpRequestFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void prepareConnection(<span class="type">HttpURLConnection</span> connection, <span class="type">String</span> httpMethod) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">super</span>.prepareConnection(connection, httpMethod);</span><br><span class="line">        <span class="comment">// 禁止自动重定向</span></span><br><span class="line">        connection.setFollowRedirects(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NoRedirectClientHttpRequestFactory httpRequestFactory</span> = new NoRedirectClientHttpRequestFactory();</span><br><span class="line"><span class="attribute">RestTemplate restTemplate</span> = new RestTemplate(httpRequestFactory);</span><br></pre></td></tr></table></figure><p>接着，似乎更换ClientHttpRequestFactory并不合心意，还是要使用HttpComponentsClientHttpRequestFactory来实现，HttpComponentsClientHttpRequestFactory是可以自定义HttpClient的，于是查到了HttpClient头上，HttpClient是可以设置Redirect的，</p><p>第二种方式：</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpClient</span> httpClient = <span class="type">HttpClientBuilder</span>.create()</span><br><span class="line">                .setRedirectStrategy(<span class="function"><span class="keyword">new</span> <span class="title">LaxRedirectStrategy</span>())</span></span><br><span class="line"><span class="function">                .<span class="title">build</span>();</span></span><br><span class="line"><span class="function"><span class="title">httpRequestFactory</span>.<span class="title">setHttpClient</span>(httpClient);</span></span><br><span class="line"><span class="function"><span class="title">RestTemplate</span> <span class="title">restTemplate</span> = <span class="title">new</span> <span class="title">RestTemplate</span>(httpRequestFactory);</span></span><br></pre></td></tr></table></figure><p>默认提供了两个类，DefaultRedirectStrategy和LaxRedirectStrategy，LaxRedirectStrategy继承自DefaultRedirectStrategy</p><p>DefaultRedirectStrategy.java</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Redirectable methods.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span>[] REDIRECT_METHODS = <span class="keyword">new</span> <span class="keyword">String</span>[] &#123;</span><br><span class="line">        HttpGet.METHOD_NAME,</span><br><span class="line">        HttpHead.METHOD_NAME</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>LaxRedirectStrategy.java</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ====================================================================</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * "License"); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment"> * software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment"> * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment"> * KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment"> * specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment"> * under the License.</span></span><br><span class="line"><span class="comment"> * ====================================================================</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This software consists of voluntary contributions made by many</span></span><br><span class="line"><span class="comment"> * individuals on behalf of the Apache Software Foundation.  For more</span></span><br><span class="line"><span class="comment"> * information on the Apache Software Foundation, please see</span></span><br><span class="line"><span class="comment"> * &lt;http://www.apache.org/&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.http.impl.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.annotation.<span class="type">Contract</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.annotation.<span class="type">ThreadingBehavior</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.<span class="type">HttpDelete</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.<span class="type">HttpGet</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.<span class="type">HttpHead</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.<span class="type">HttpPost</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Lax &#123;@link org.apache.http.client.RedirectStrategy&#125; implementation</span></span><br><span class="line"><span class="comment"> * that automatically redirects all HEAD, GET, POST, and DELETE requests.</span></span><br><span class="line"><span class="comment"> * This strategy relaxes restrictions on automatic redirection of</span></span><br><span class="line"><span class="comment"> * POST methods imposed by the HTTP specification.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @since 4.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Contract</span>(threading = <span class="type">ThreadingBehavior</span>.<span class="type">IMMUTABLE</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LaxRedirectStrategy</span> <span class="keyword">extends</span> <span class="title">DefaultRedirectStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public static <span class="keyword">final</span> <span class="type">LaxRedirectStrategy</span> <span class="type">INSTANCE</span> = <span class="keyword">new</span> <span class="type">LaxRedirectStrategy</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Redirectable methods.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> <span class="type">String</span>[] <span class="type">REDIRECT_METHODS</span> = <span class="keyword">new</span> <span class="type">String</span>[] &#123;</span><br><span class="line">        <span class="type">HttpGet</span>.<span class="type">METHOD_NAME</span>,</span><br><span class="line">        <span class="type">HttpPost</span>.<span class="type">METHOD_NAME</span>,</span><br><span class="line">        <span class="type">HttpHead</span>.<span class="type">METHOD_NAME</span>,</span><br><span class="line">        <span class="type">HttpDelete</span>.<span class="type">METHOD_NAME</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> boolean isRedirectable(<span class="keyword">final</span> <span class="type">String</span> method) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> <span class="type">String</span> m: <span class="type">REDIRECT_METHODS</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.equalsIgnoreCase(method)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就很清晰了，copy一份LaxRedirectStrategy的代码，改写掉REDIRECT_METHODS中的定义方法，如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.http.annotation.Contract;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.annotation.ThreadingBehavior;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.DefaultRedirectStrategy;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@ClassName: MyRedirectStrategy </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@Description: TODO</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@author thinklight</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@date 2018年4月20日 下午2:47:29 </span></span></span><br><span class="line"><span class="comment"><span class="markdown">*</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"><span class="meta">@Contract</span>(threading = ThreadingBehavior.IMMUTABLE)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyRedirectStrategy</span>  <span class="keyword">extends</span> <span class="title">DefaultRedirectStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">final</span> MyRedirectStrategy INSTANCE = <span class="keyword">new</span> MyRedirectStrategy();</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     * Redirectable methods.</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    private <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">String</span>[] REDIRECT_METHODS = <span class="keyword">new</span> <span class="built_in">String</span>[] &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    protected boolean isRedirectable(<span class="keyword">final</span> <span class="built_in">String</span> method) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> <span class="built_in">String</span> m: REDIRECT_METHODS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.equalsIgnoreCase(method)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ribbon+微信各种重定向问题，解决了。</p><p>第三种方式：</p><p>自己蠢了，今天因为cookie的问题发现了简单的方式</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpClient httpClient = HttpClientBuilder.create<span class="params">()</span><span class="string">.disableCookieManagement</span><span class="params">()</span><span class="string">.disableRedirectHandling</span><span class="params">()</span><span class="string">.build</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">Autowired</span></span><br><span class="line">    <span class="type">RestTemplate</span> restTemplate;</span><br><span class="line">    </span><br><span class="line">    @<span class="type">Bean</span></span><br><span class="line">    @<span class="type">LoadBalanced</span></span><br><span class="line">    <span class="type">RestTemplate</span> restTemplate() &#123;</span><br><span class="line">        <span class="type">HttpComponentsClientHttpRequestFactory</span> httpRequestFactory = <span class="function"><span class="keyword">new</span> <span class="title">HttpComponentsClientHttpRequestFactory</span>();</span></span><br><span class="line"><span class="function"><span class="comment">//        NoRedirectClientHttpRequestFactory httpRequestFactory = new NoRedirectClientHttpRequestFactory();// 此类型不能使用httpClient</span></span></span><br><span class="line"><span class="function">        <span class="title">httpRequestFactory</span>.<span class="title">setConnectionRequestTimeout</span>(<span class="number">2000</span>);</span></span><br><span class="line"><span class="function">        <span class="title">httpRequestFactory</span>.<span class="title">setConnectTimeout</span>(<span class="number">10000</span>);</span></span><br><span class="line"><span class="function">        <span class="title">httpRequestFactory</span>.<span class="title">setReadTimeout</span>(<span class="number">7200000</span>);</span></span><br><span class="line"><span class="function">        <span class="comment">// HttpClient httpClient = HttpClientBuilder.create()</span></span></span><br><span class="line"><span class="function">        <span class="comment">//        .setRedirectStrategy(new MyRedirectStrategy())</span></span></span><br><span class="line"><span class="function">        <span class="comment">//        .build(); 　　　　 HttpClient httpClient = HttpClientBuilder.create().disableCookieManagement().disableRedirectHandling().build();</span></span></span><br><span class="line"><span class="function">        <span class="title">httpRequestFactory</span>.<span class="title">setHttpClient</span>(httpClient);</span></span><br><span class="line"><span class="function">        <span class="title">RestTemplate</span> <span class="title">restTemplate</span> = <span class="title">new</span> <span class="title">RestTemplate</span>(httpRequestFactory);</span></span><br><span class="line"><span class="function">        <span class="title">logger</span>.<span class="title">debug</span>("指定字符编码为<span class="type">UTF</span><span class="number">-8</span>,原编码为<span class="type">ISO</span><span class="number">-8859</span><span class="number">-1</span>");</span></span><br><span class="line"><span class="function">        <span class="title">restTemplate</span>.<span class="title">getMessageConverters</span>().<span class="title">set</span>(<span class="number">1</span>, new <span class="type">StringHttpMessageConverter</span>(<span class="type">StandardCharsets</span>.<span class="type">UTF_8</span>));</span></span><br><span class="line"><span class="function">        <span class="title">logger</span>.<span class="title">debug</span>("<span class="type">RestTemple</span>默认能转换为application/json，转换追加text/plain类型");</span></span><br><span class="line"><span class="function">        <span class="title">restTemplate</span>.<span class="title">getMessageConverters</span>().<span class="title">add</span>(new <span class="type">WxMappingJackson2HttpMessageConverter</span>());</span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">restTemplate</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br></pre></td></tr></table></figure><p></p><p>重定向参考：<a href="https://www.dozer.cc/2014/05/disable-resttemplate-redirect.html" target="_blank" rel="noopener">https://www.dozer.cc/2014/05/disable-resttemplate-redirect.html</a></p><p>cookie参考：<a href="https://stackoverflow.com/questions/10175649/resttemplate-and-cookie" target="_blank" rel="noopener">https://stackoverflow.com/questions/10175649/resttemplate-and-cookie</a></p><p><a href="https://stackoverflow.com/questions/22853321/resttemplate-client-with-cookies" target="_blank" rel="noopener">https://stackoverflow.com/questions/22853321/resttemplate-client-with-cookies</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做一个转发功能，zuul + ribbon + resttemplate 进行路由、负载、转发的功能&lt;/p&gt;&lt;p&gt;基本准备就绪，在微信自动登陆那遇到了一个坑，ribbon 系统用resttemplate 转发A系统的资源，在微信自动登陆的地方，A系统重定向到微信的地址
      
    
    </summary>
    
      <category term="spring boot" scheme="https://lossingdawn.top/categories/spring-boot/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
      <category term="spring boot" scheme="https://lossingdawn.top/tags/spring-boot/"/>
    
      <category term="restTemplate" scheme="https://lossingdawn.top/tags/restTemplate/"/>
    
  </entry>
  
  <entry>
    <title>Java ServletContextListener 实现UDP监听</title>
    <link href="https://lossingdawn.top/p/zh-CN/10697.html"/>
    <id>https://lossingdawn.top/p/zh-CN/10697.html</id>
    <published>2018-03-20T07:24:00.000Z</published>
    <updated>2019-07-27T17:05:20.356Z</updated>
    
    <content type="html"><![CDATA[<p>使用spring boot实现项目启动时的监听，</p><p>UDPListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_UDP_DATA_SIZE = <span class="number">4096</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UDP_PORT = <span class="number">26666</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"========UDPListener Initialized========="</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">             <span class="comment">// 启动一个线程，监听UDP数据报</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> UDPProcess(UDP_PORT)).start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UDPProcess</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UDPProcess</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> SocketException </span>&#123;</span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket(port);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            System.out.println(<span class="string">"=======UDPProcess======"</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[MAX_UDP_DATA_SIZE];</span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, buffer.length);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.receive(packet);</span><br><span class="line">                    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Process(packet)).start();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Process</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Process</span><span class="params">(DatagramPacket packet)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = packet.getData();<span class="comment">// 接收到的UDP信息，然后解码</span></span><br><span class="line">            String srt1 = <span class="keyword">new</span> String(buffer,<span class="string">"GBK"</span>).trim();</span><br><span class="line">            String srt2 = <span class="keyword">new</span> String(buffer, <span class="string">"UTF-8"</span>).trim();</span><br><span class="line">            String srt3 = <span class="keyword">new</span> String(buffer,<span class="string">"ISO-8859-1"</span>).trim();</span><br><span class="line">            System.out.println(<span class="string">"=======Process srt1 GBK======"</span> + srt1);</span><br><span class="line">            System.out.println(<span class="string">"=======Process srt2 UTF-8======"</span> + srt2);</span><br><span class="line">            System.out.println(<span class="string">"=======Process srt3 ISO-8859-1======"</span> + srt3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            System.out.println(<span class="string">"====Process run====="</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"========UDPListener Destroyed========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DemoApplication</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@ServletComponentScan</span> </span><br><span class="line">public class DemoApplication &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ServletComponentScan Servlet扫描，启动时把servlet、filter、listener自动扫描注入 UDP测试客户端（也可以用测试工具发送UDP包测试）：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.IOException;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.net.DatagramPacket;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.net.DatagramSocket;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.net.InetAddress;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPClientTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_HOSTNAME = <span class="string">"localhost"</span>;</span><br><span class="line">    <span class="comment">// 服务器端口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> int SERVER_PORT = <span class="number">26666</span>;</span><br><span class="line">    <span class="comment">// 本地发送端口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> int LOCAL_PORT = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1，创建udp服务。通过DatagramSocket对象。</span></span><br><span class="line">            DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(LOCAL_PORT);</span><br><span class="line">            <span class="comment">// 2，确定数据，并封装成数据包。DatagramPacket(byte[] buf, int length, InetAddress</span></span><br><span class="line">            <span class="comment">// address, int port)</span></span><br><span class="line">            byte[] buf = <span class="string">"你好，世界"</span>.getBytes();</span><br><span class="line">            DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length, InetAddress.getByName(SERVER_HOSTNAME),</span><br><span class="line">                    SERVER_PORT);</span><br><span class="line">            <span class="comment">// 3，通过socket服务，将已有的数据包发送出去。通过send方法。</span></span><br><span class="line">            socket.send(dp);</span><br><span class="line">            <span class="comment">// 4，关闭资源。</span></span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2018.cnblogs.com/blog/670989/201803/670989-20180320154922517-812686880.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用spring boot实现项目启动时的监听，&lt;/p&gt;&lt;p&gt;UDPListener&lt;/p&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa
      
    
    </summary>
    
      <category term="java" scheme="https://lossingdawn.top/categories/java/"/>
    
    
      <category term="java" scheme="https://lossingdawn.top/tags/java/"/>
    
      <category term="udp" scheme="https://lossingdawn.top/tags/udp/"/>
    
  </entry>
  
</feed>
